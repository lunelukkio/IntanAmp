
IntanAmp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fa4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800a150  0800a150  0001a150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1a0  0800a1a0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1a0  0800a1a0  0001a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1a8  0800a1a8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1a8  0800a1a8  0001a1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1ac  0800a1ac  0001a1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a1b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  2000007c  0800a22c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b4c  0800a22c  00020b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019398  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a9d  00000000  00000000  00039487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  0003cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e92  00000000  00000000  0003e240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ad15  00000000  00000000  0003f0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a499  00000000  00000000  00069de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdd6c  00000000  00000000  00084280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051e8  00000000  00000000  00181fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001871d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800a138 	.word	0x0800a138

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000080 	.word	0x20000080
 80001e8:	0800a138 	.word	0x0800a138

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fb85 	bl	8000bfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f820 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f91e 	bl	8000734 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f8:	f000 f880 	bl	80005fc <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 80004fc:	f009 f9a8 	bl	8009850 <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f8aa 	bl	8000658 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000504:	f000 f8d8 	bl	80006b8 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	4808      	ldr	r0, [pc, #32]	; (8000530 <main+0x48>)
 800050e:	f000 fef1 	bl	80012f4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000512:	2064      	movs	r0, #100	; 0x64
 8000514:	f000 fbe6 	bl	8000ce4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <main+0x48>)
 800051e:	f000 fee9 	bl	80012f4 <HAL_GPIO_WritePin>
	HAL_Delay(800);
 8000522:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000526:	f000 fbdd 	bl	8000ce4 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800052a:	f009 f9b7 	bl	800989c <MX_USB_HOST_Process>
  {HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800052e:	e7eb      	b.n	8000508 <main+0x20>
 8000530:	48000400 	.word	0x48000400

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b096      	sub	sp, #88	; 0x58
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2244      	movs	r2, #68	; 0x44
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f009 fd68 	bl	800a018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	463b      	mov	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000556:	f44f 7000 	mov.w	r0, #512	; 0x200
 800055a:	f002 fba9 	bl	8002cb0 <HAL_PWREx_ControlVoltageScaling>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000564:	f000 f980 	bl	8000868 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000568:	f002 fb84 	bl	8002c74 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <SystemClock_Config+0xc4>)
 800056e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000572:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemClock_Config+0xc4>)
 8000574:	f023 0318 	bic.w	r3, r3, #24
 8000578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800057c:	2314      	movs	r3, #20
 800057e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 800058c:	2390      	movs	r3, #144	; 0x90
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000594:	2301      	movs	r3, #1
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000598:	2305      	movs	r3, #5
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 800059c:	2347      	movs	r3, #71	; 0x47
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80005a8:	2306      	movs	r3, #6
 80005aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fbf3 	bl	8002d9c <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005bc:	f000 f954 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2303      	movs	r3, #3
 80005c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005c8:	2390      	movs	r3, #144	; 0x90
 80005ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fff8 	bl	80035d0 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005e6:	f000 f93f 	bl	8000868 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005ea:	f003 fd11 	bl	8004010 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005ee:	bf00      	nop
 80005f0:	3758      	adds	r7, #88	; 0x58
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_LPUART1_UART_Init+0x50>)
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <MX_LPUART1_UART_Init+0x54>)
 8000604:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_LPUART1_UART_Init+0x50>)
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_LPUART1_UART_Init+0x58>)
 800060a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_LPUART1_UART_Init+0x50>)
 800060e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000612:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <MX_LPUART1_UART_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_LPUART1_UART_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_LPUART1_UART_Init+0x50>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_LPUART1_UART_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_LPUART1_UART_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_LPUART1_UART_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_LPUART1_UART_Init+0x50>)
 800063a:	f004 f87e 	bl	800473a <HAL_UART_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 f910 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000098 	.word	0x20000098
 8000650:	40008000 	.word	0x40008000
 8000654:	00033324 	.word	0x00033324

08000658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <MX_USART1_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800069c:	f004 f89b 	bl	80047d6 <HAL_HalfDuplex_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a6:	f000 f8df 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000120 	.word	0x20000120
 80006b4:	40013800 	.word	0x40013800

080006b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_SPI1_Init+0x74>)
 80006be:	4a1c      	ldr	r2, [pc, #112]	; (8000730 <MX_SPI1_Init+0x78>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_SPI1_Init+0x74>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_SPI1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_SPI1_Init+0x74>)
 80006d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_SPI1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_SPI1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_SPI1_Init+0x74>)
 80006e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_SPI1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_SPI1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_SPI1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_SPI1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_SPI1_Init+0x74>)
 8000706:	2207      	movs	r2, #7
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_SPI1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_SPI1_Init+0x74>)
 8000712:	2208      	movs	r2, #8
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_SPI1_Init+0x74>)
 8000718:	f003 fe58 	bl	80043cc <HAL_SPI_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000722:	f000 f8a1 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200001a8 	.word	0x200001a8
 8000730:	40013000 	.word	0x40013000

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b43      	ldr	r3, [pc, #268]	; (8000858 <MX_GPIO_Init+0x124>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a42      	ldr	r2, [pc, #264]	; (8000858 <MX_GPIO_Init+0x124>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b40      	ldr	r3, [pc, #256]	; (8000858 <MX_GPIO_Init+0x124>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b3d      	ldr	r3, [pc, #244]	; (8000858 <MX_GPIO_Init+0x124>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a3c      	ldr	r2, [pc, #240]	; (8000858 <MX_GPIO_Init+0x124>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <MX_GPIO_Init+0x124>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b37      	ldr	r3, [pc, #220]	; (8000858 <MX_GPIO_Init+0x124>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a36      	ldr	r2, [pc, #216]	; (8000858 <MX_GPIO_Init+0x124>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <MX_GPIO_Init+0x124>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b31      	ldr	r3, [pc, #196]	; (8000858 <MX_GPIO_Init+0x124>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a30      	ldr	r2, [pc, #192]	; (8000858 <MX_GPIO_Init+0x124>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <MX_GPIO_Init+0x124>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <MX_GPIO_Init+0x124>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a2a      	ldr	r2, [pc, #168]	; (8000858 <MX_GPIO_Init+0x124>)
 80007b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MX_GPIO_Init+0x124>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80007c2:	f002 fadb 	bl	8002d7c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007cc:	4823      	ldr	r0, [pc, #140]	; (800085c <MX_GPIO_Init+0x128>)
 80007ce:	f000 fd91 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 80007d8:	4821      	ldr	r0, [pc, #132]	; (8000860 <MX_GPIO_Init+0x12c>)
 80007da:	f000 fd8b 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	481b      	ldr	r0, [pc, #108]	; (8000864 <MX_GPIO_Init+0x130>)
 80007f6:	f000 fbeb 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80007fa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4812      	ldr	r0, [pc, #72]	; (800085c <MX_GPIO_Init+0x128>)
 8000814:	f000 fbdc 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8000818:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_GPIO_Init+0x12c>)
 800082e:	f000 fbcf 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000832:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_GPIO_Init+0x12c>)
 800084c:	f000 fbc0 	bl	8000fd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400
 8000860:	48001800 	.word	0x48001800
 8000864:	48000800 	.word	0x48000800

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_MspInit+0x44>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6613      	str	r3, [r2, #96]	; 0x60
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x44>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6593      	str	r3, [r2, #88]	; 0x58
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b0ae      	sub	sp, #184	; 0xb8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	f107 0318 	add.w	r3, r7, #24
 80008d8:	228c      	movs	r2, #140	; 0x8c
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f009 fb9b 	bl	800a018 <memset>
  if(huart->Instance==LPUART1)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a44      	ldr	r2, [pc, #272]	; (80009f8 <HAL_UART_MspInit+0x13c>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d13e      	bne.n	800096a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008ec:	2320      	movs	r3, #32
 80008ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f4:	f107 0318 	add.w	r3, r7, #24
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 f88d 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000904:	f7ff ffb0 	bl	8000868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000908:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <HAL_UART_MspInit+0x140>)
 800090a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800090c:	4a3b      	ldr	r2, [pc, #236]	; (80009fc <HAL_UART_MspInit+0x140>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000914:	4b39      	ldr	r3, [pc, #228]	; (80009fc <HAL_UART_MspInit+0x140>)
 8000916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000920:	4b36      	ldr	r3, [pc, #216]	; (80009fc <HAL_UART_MspInit+0x140>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000924:	4a35      	ldr	r2, [pc, #212]	; (80009fc <HAL_UART_MspInit+0x140>)
 8000926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092c:	4b33      	ldr	r3, [pc, #204]	; (80009fc <HAL_UART_MspInit+0x140>)
 800092e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000938:	f002 fa20 	bl	8002d7c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800093c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000940:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000956:	2308      	movs	r3, #8
 8000958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000960:	4619      	mov	r1, r3
 8000962:	4827      	ldr	r0, [pc, #156]	; (8000a00 <HAL_UART_MspInit+0x144>)
 8000964:	f000 fb34 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000968:	e042      	b.n	80009f0 <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a25      	ldr	r2, [pc, #148]	; (8000a04 <HAL_UART_MspInit+0x148>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d13d      	bne.n	80009f0 <HAL_UART_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000978:	2300      	movs	r3, #0
 800097a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	4618      	mov	r0, r3
 8000982:	f003 f849 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800098c:	f7ff ff6c 	bl	8000868 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <HAL_UART_MspInit+0x140>)
 8000992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_UART_MspInit+0x140>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099a:	6613      	str	r3, [r2, #96]	; 0x60
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_UART_MspInit+0x140>)
 800099e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_UART_MspInit+0x140>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	4a13      	ldr	r2, [pc, #76]	; (80009fc <HAL_UART_MspInit+0x140>)
 80009ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_UART_MspInit+0x140>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80009c0:	f002 f9dc 	bl	8002d7c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	2312      	movs	r3, #18
 80009ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009de:	2307      	movs	r3, #7
 80009e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <HAL_UART_MspInit+0x144>)
 80009ec:	f000 faf0 	bl	8000fd0 <HAL_GPIO_Init>
}
 80009f0:	bf00      	nop
 80009f2:	37b8      	adds	r7, #184	; 0xb8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40008000 	.word	0x40008000
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48001800 	.word	0x48001800
 8000a04:	40013800 	.word	0x40013800

08000a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <HAL_SPI_MspInit+0x8c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d130      	bne.n	8000a8c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <HAL_SPI_MspInit+0x90>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <HAL_SPI_MspInit+0x90>)
 8000a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a34:	6613      	str	r3, [r2, #96]	; 0x60
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_SPI_MspInit+0x90>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_SPI_MspInit+0x90>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <HAL_SPI_MspInit+0x90>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_SPI_MspInit+0x90>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a5a:	23c2      	movs	r3, #194	; 0xc2
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 faaa 	bl	8000fd0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2023      	movs	r0, #35	; 0x23
 8000a82:	f000 fa2e 	bl	8000ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a86:	2023      	movs	r0, #35	; 0x23
 8000a88:	f000 fa47 	bl	8000f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40013000 	.word	0x40013000
 8000a98:	40021000 	.word	0x40021000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 f8dc 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <SPI1_IRQHandler+0x10>)
 8000af6:	f003 fd0d 	bl	8004514 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200001a8 	.word	0x200001a8

08000b04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <OTG_FS_IRQHandler+0x10>)
 8000b0a:	f000 fea1 	bl	8001850 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200006c0 	.word	0x200006c0

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f009 fa7e 	bl	800a048 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20050000 	.word	0x20050000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	2000020c 	.word	0x2000020c
 8000b80:	20000b50 	.word	0x20000b50

08000b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bac:	f7ff ffea 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	; (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f009 fa3d 	bl	800a054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bda:	f7ff fc85 	bl	80004e8 <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000bec:	0800a1b0 	.word	0x0800a1b0
  ldr r2, =_sbss
 8000bf0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000bf4:	20000b4c 	.word	0x20000b4c

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>

08000bfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f961 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 f80e 	bl	8000c2c <HAL_InitTick>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	71fb      	strb	r3, [r7, #7]
 8000c1a:	e001      	b.n	8000c20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c1c:	f7ff fe2a 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_InitTick+0x6c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d023      	beq.n	8000c88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_InitTick+0x70>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_InitTick+0x6c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f96d 	bl	8000f36 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10f      	bne.n	8000c82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d809      	bhi.n	8000c7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f000 f937 	bl	8000ee2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_InitTick+0x74>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e007      	b.n	8000c8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	73fb      	strb	r3, [r7, #15]
 8000c80:	e004      	b.n	8000c8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	73fb      	strb	r3, [r7, #15]
 8000c86:	e001      	b.n	8000c8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000210 	.word	0x20000210

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000210 	.word	0x20000210

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <__NVIC_EnableIRQ+0x38>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e98:	d301      	bcc.n	8000e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00f      	b.n	8000ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <SysTick_Config+0x40>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f7ff ff8e 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff29 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff3e 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff8e 	bl	8000e20 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5d 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff31 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffa2 	bl	8000e88 <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d005      	beq.n	8000f72 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2204      	movs	r2, #4
 8000f6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e029      	b.n	8000fc6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 020e 	bic.w	r2, r2, #14
 8000f80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0201 	bic.w	r2, r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f003 021c 	and.w	r2, r3, #28
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	4798      	blx	r3
    }
  }
  return status;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fde:	e166      	b.n	80012ae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8158 	beq.w	80012a8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b01      	cmp	r3, #1
 8001002:	d005      	beq.n	8001010 <HAL_GPIO_Init+0x40>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d130      	bne.n	8001072 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001046:	2201      	movs	r2, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	f003 0201 	and.w	r2, r3, #1
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b03      	cmp	r3, #3
 800107c:	d017      	beq.n	80010ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d123      	bne.n	8001102 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	691a      	ldr	r2, [r3, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	6939      	ldr	r1, [r7, #16]
 80010fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0203 	and.w	r2, r3, #3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 80b2 	beq.w	80012a8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001144:	4b61      	ldr	r3, [pc, #388]	; (80012cc <HAL_GPIO_Init+0x2fc>)
 8001146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001148:	4a60      	ldr	r2, [pc, #384]	; (80012cc <HAL_GPIO_Init+0x2fc>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6613      	str	r3, [r2, #96]	; 0x60
 8001150:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <HAL_GPIO_Init+0x2fc>)
 8001152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800115c:	4a5c      	ldr	r2, [pc, #368]	; (80012d0 <HAL_GPIO_Init+0x300>)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3302      	adds	r3, #2
 8001164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001186:	d02b      	beq.n	80011e0 <HAL_GPIO_Init+0x210>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <HAL_GPIO_Init+0x304>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d025      	beq.n	80011dc <HAL_GPIO_Init+0x20c>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a51      	ldr	r2, [pc, #324]	; (80012d8 <HAL_GPIO_Init+0x308>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d01f      	beq.n	80011d8 <HAL_GPIO_Init+0x208>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a50      	ldr	r2, [pc, #320]	; (80012dc <HAL_GPIO_Init+0x30c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d019      	beq.n	80011d4 <HAL_GPIO_Init+0x204>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a4f      	ldr	r2, [pc, #316]	; (80012e0 <HAL_GPIO_Init+0x310>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d013      	beq.n	80011d0 <HAL_GPIO_Init+0x200>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a4e      	ldr	r2, [pc, #312]	; (80012e4 <HAL_GPIO_Init+0x314>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d00d      	beq.n	80011cc <HAL_GPIO_Init+0x1fc>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <HAL_GPIO_Init+0x318>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d007      	beq.n	80011c8 <HAL_GPIO_Init+0x1f8>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <HAL_GPIO_Init+0x31c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d101      	bne.n	80011c4 <HAL_GPIO_Init+0x1f4>
 80011c0:	2307      	movs	r3, #7
 80011c2:	e00e      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011c4:	2308      	movs	r3, #8
 80011c6:	e00c      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011c8:	2306      	movs	r3, #6
 80011ca:	e00a      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011cc:	2305      	movs	r3, #5
 80011ce:	e008      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011d4:	2303      	movs	r3, #3
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011d8:	2302      	movs	r3, #2
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011e0:	2300      	movs	r3, #0
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	f002 0203 	and.w	r2, r2, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f2:	4937      	ldr	r1, [pc, #220]	; (80012d0 <HAL_GPIO_Init+0x300>)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001224:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <HAL_GPIO_Init+0x320>)
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800124e:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001254:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001278:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <HAL_GPIO_Init+0x320>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <HAL_GPIO_Init+0x320>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f47f ae91 	bne.w	8000fe0 <HAL_GPIO_Init+0x10>
  }
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48000800 	.word	0x48000800
 80012dc:	48000c00 	.word	0x48000c00
 80012e0:	48001000 	.word	0x48001000
 80012e4:	48001400 	.word	0x48001400
 80012e8:	48001800 	.word	0x48001800
 80012ec:	48001c00 	.word	0x48001c00
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001310:	e002      	b.n	8001318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	b08f      	sub	sp, #60	; 0x3c
 8001328:	af0a      	add	r7, sp, #40	; 0x28
 800132a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e054      	b.n	80013e0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d106      	bne.n	8001356 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f008 fadb 	bl	800990c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2203      	movs	r2, #3
 800135a:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f003 ff8f 	bl	8005298 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	687e      	ldr	r6, [r7, #4]
 8001382:	466d      	mov	r5, sp
 8001384:	f106 0410 	add.w	r4, r6, #16
 8001388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001390:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001394:	e885 0003 	stmia.w	r5, {r0, r1}
 8001398:	1d33      	adds	r3, r6, #4
 800139a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800139c:	6838      	ldr	r0, [r7, #0]
 800139e:	f003 ff3e 	bl	800521e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2101      	movs	r1, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 ff86 	bl	80052ba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	687e      	ldr	r6, [r7, #4]
 80013b6:	466d      	mov	r5, sp
 80013b8:	f106 0410 	add.w	r4, r6, #16
 80013bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80013cc:	1d33      	adds	r3, r6, #4
 80013ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d0:	6838      	ldr	r0, [r7, #0]
 80013d2:	f004 f92b 	bl	800562c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339

  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013e8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af04      	add	r7, sp, #16
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	4608      	mov	r0, r1
 80013f2:	4611      	mov	r1, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	70fb      	strb	r3, [r7, #3]
 80013fa:	460b      	mov	r3, r1
 80013fc:	70bb      	strb	r3, [r7, #2]
 80013fe:	4613      	mov	r3, r2
 8001400:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HCcharMps = mps;
 8001402:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001404:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hhcd);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_HCD_HC_Init+0x2c>
 8001410:	2302      	movs	r3, #2
 8001412:	e087      	b.n	8001524 <HAL_HCD_HC_Init+0x13c>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  hhcd->hc[ch_num].do_ping = 0U;
 800141c:	78fa      	ldrb	r2, [r7, #3]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	440b      	add	r3, r1
 800142a:	333d      	adds	r3, #61	; 0x3d
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	440b      	add	r3, r1
 800143e:	3338      	adds	r3, #56	; 0x38
 8001440:	787a      	ldrb	r2, [r7, #1]
 8001442:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001444:	78fa      	ldrb	r2, [r7, #3]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	440b      	add	r3, r1
 8001452:	3339      	adds	r3, #57	; 0x39
 8001454:	78fa      	ldrb	r2, [r7, #3]
 8001456:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001458:	78fa      	ldrb	r2, [r7, #3]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	440b      	add	r3, r1
 8001466:	3340      	adds	r3, #64	; 0x40
 8001468:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800146c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	78bb      	ldrb	r3, [r7, #2]
 8001472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001476:	b2d8      	uxtb	r0, r3
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	440b      	add	r3, r1
 8001484:	333a      	adds	r3, #58	; 0x3a
 8001486:	4602      	mov	r2, r0
 8001488:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	4619      	mov	r1, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fb6c 	bl	8001b6c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001494:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001498:	2b00      	cmp	r3, #0
 800149a:	da0a      	bge.n	80014b2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800149c:	78fa      	ldrb	r2, [r7, #3]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	440b      	add	r3, r1
 80014aa:	333b      	adds	r3, #59	; 0x3b
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e009      	b.n	80014c6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014b2:	78fa      	ldrb	r2, [r7, #3]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	440b      	add	r3, r1
 80014c0:	333b      	adds	r3, #59	; 0x3b
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	440b      	add	r3, r1
 80014d4:	333c      	adds	r3, #60	; 0x3c
 80014d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	b298      	uxth	r0, r3
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	440b      	add	r3, r1
 80014ee:	3342      	adds	r3, #66	; 0x42
 80014f0:	4602      	mov	r2, r0
 80014f2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	787c      	ldrb	r4, [r7, #1]
 80014fe:	78ba      	ldrb	r2, [r7, #2]
 8001500:	78f9      	ldrb	r1, [r7, #3]
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4623      	mov	r3, r4
 8001512:	f004 f9d5 	bl	80058c0 <USB_HC_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	72fb      	strb	r3, [r7, #11]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return status;
 8001522:	7afb      	ldrb	r3, [r7, #11]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}

0800152c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_HCD_HC_Halt+0x1e>
 8001546:	2302      	movs	r3, #2
 8001548:	e00f      	b.n	800156a <HAL_HCD_HC_Halt+0x3e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	78fa      	ldrb	r2, [r7, #3]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fbc5 	bl	8005cea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4603      	mov	r3, r0
 8001584:	70fb      	strb	r3, [r7, #3]
 8001586:	460b      	mov	r3, r1
 8001588:	70bb      	strb	r3, [r7, #2]
 800158a:	4613      	mov	r3, r2
 800158c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800158e:	78fa      	ldrb	r2, [r7, #3]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	440b      	add	r3, r1
 800159c:	333b      	adds	r3, #59	; 0x3b
 800159e:	78ba      	ldrb	r2, [r7, #2]
 80015a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015a2:	78fa      	ldrb	r2, [r7, #3]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	440b      	add	r3, r1
 80015b0:	3340      	adds	r3, #64	; 0x40
 80015b2:	787a      	ldrb	r2, [r7, #1]
 80015b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015b6:	7c3b      	ldrb	r3, [r7, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d114      	bne.n	80015e6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	440b      	add	r3, r1
 80015ca:	3344      	adds	r3, #68	; 0x44
 80015cc:	2203      	movs	r2, #3
 80015ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80015d0:	78fa      	ldrb	r2, [r7, #3]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	440b      	add	r3, r1
 80015de:	333d      	adds	r3, #61	; 0x3d
 80015e0:	7f3a      	ldrb	r2, [r7, #28]
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e009      	b.n	80015fa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015e6:	78fa      	ldrb	r2, [r7, #3]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	440b      	add	r3, r1
 80015f4:	3344      	adds	r3, #68	; 0x44
 80015f6:	2202      	movs	r2, #2
 80015f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80015fa:	787b      	ldrb	r3, [r7, #1]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	f200 80d6 	bhi.w	80017ae <HAL_HCD_HC_SubmitRequest+0x23a>
 8001602:	a201      	add	r2, pc, #4	; (adr r2, 8001608 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001608:	08001619 	.word	0x08001619
 800160c:	08001799 	.word	0x08001799
 8001610:	08001685 	.word	0x08001685
 8001614:	0800170f 	.word	0x0800170f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001618:	7c3b      	ldrb	r3, [r7, #16]
 800161a:	2b01      	cmp	r3, #1
 800161c:	f040 80c9 	bne.w	80017b2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (direction == 0U)
 8001620:	78bb      	ldrb	r3, [r7, #2]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f040 80c5 	bne.w	80017b2 <HAL_HCD_HC_SubmitRequest+0x23e>
        {
          if (length == 0U)
 8001628:	8b3b      	ldrh	r3, [r7, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <HAL_HCD_HC_SubmitRequest+0xce>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	440b      	add	r3, r1
 800163c:	3359      	adds	r3, #89	; 0x59
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	440b      	add	r3, r1
 8001650:	3359      	adds	r3, #89	; 0x59
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10a      	bne.n	800166e <HAL_HCD_HC_SubmitRequest+0xfa>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	440b      	add	r3, r1
 8001666:	3344      	adds	r3, #68	; 0x44
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
            /* Put the PID 1 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
          }
        }
      }
      break;
 800166c:	e0a1      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x23e>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	440b      	add	r3, r1
 800167c:	3344      	adds	r3, #68	; 0x44
 800167e:	2202      	movs	r2, #2
 8001680:	701a      	strb	r2, [r3, #0]
      break;
 8001682:	e096      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001684:	78bb      	ldrb	r3, [r7, #2]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d120      	bne.n	80016cc <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	440b      	add	r3, r1
 8001698:	3359      	adds	r3, #89	; 0x59
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10a      	bne.n	80016b6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016a0:	78fa      	ldrb	r2, [r7, #3]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	440b      	add	r3, r1
 80016ae:	3344      	adds	r3, #68	; 0x44
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016b4:	e07e      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	440b      	add	r3, r1
 80016c4:	3344      	adds	r3, #68	; 0x44
 80016c6:	2202      	movs	r2, #2
 80016c8:	701a      	strb	r2, [r3, #0]
      break;
 80016ca:	e073      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	440b      	add	r3, r1
 80016da:	3358      	adds	r3, #88	; 0x58
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10a      	bne.n	80016f8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	440b      	add	r3, r1
 80016f0:	3344      	adds	r3, #68	; 0x44
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
      break;
 80016f6:	e05d      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	440b      	add	r3, r1
 8001706:	3344      	adds	r3, #68	; 0x44
 8001708:	2202      	movs	r2, #2
 800170a:	701a      	strb	r2, [r3, #0]
      break;
 800170c:	e052      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800170e:	78bb      	ldrb	r3, [r7, #2]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d120      	bne.n	8001756 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	440b      	add	r3, r1
 8001722:	3359      	adds	r3, #89	; 0x59
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10a      	bne.n	8001740 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	440b      	add	r3, r1
 8001738:	3344      	adds	r3, #68	; 0x44
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800173e:	e039      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001740:	78fa      	ldrb	r2, [r7, #3]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	440b      	add	r3, r1
 800174e:	3344      	adds	r3, #68	; 0x44
 8001750:	2202      	movs	r2, #2
 8001752:	701a      	strb	r2, [r3, #0]
      break;
 8001754:	e02e      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	440b      	add	r3, r1
 8001764:	3358      	adds	r3, #88	; 0x58
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10a      	bne.n	8001782 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	440b      	add	r3, r1
 800177a:	3344      	adds	r3, #68	; 0x44
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
      break;
 8001780:	e018      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	440b      	add	r3, r1
 8001790:	3344      	adds	r3, #68	; 0x44
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
      break;
 8001796:	e00d      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	440b      	add	r3, r1
 80017a6:	3344      	adds	r3, #68	; 0x44
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
      break;
 80017ac:	e002      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80017ae:	bf00      	nop
 80017b0:	e000      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80017b2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	440b      	add	r3, r1
 80017c2:	3348      	adds	r3, #72	; 0x48
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	8b39      	ldrh	r1, [r7, #24]
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4403      	add	r3, r0
 80017d8:	3350      	adds	r3, #80	; 0x50
 80017da:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	440b      	add	r3, r1
 80017ea:	3364      	adds	r3, #100	; 0x64
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	440b      	add	r3, r1
 80017fe:	3354      	adds	r3, #84	; 0x54
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	440b      	add	r3, r1
 8001812:	3339      	adds	r3, #57	; 0x39
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	440b      	add	r3, r1
 8001826:	3365      	adds	r3, #101	; 0x65
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	3338      	adds	r3, #56	; 0x38
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f004 f949 	bl	8005ad8 <USB_HC_StartXfer>
 8001846:	4603      	mov	r3, r0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f003 fe9e 	bl	80055a8 <USB_GetMode>
 800186c:	4603      	mov	r3, r0
 800186e:	2b01      	cmp	r3, #1
 8001870:	f040 80fa 	bne.w	8001a68 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 fe61 	bl	8005540 <USB_ReadInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80f0 	beq.w	8001a66 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f003 fe58 	bl	8005540 <USB_ReadInterrupts>
 8001890:	4603      	mov	r3, r0
 8001892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800189a:	d104      	bne.n	80018a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 fe48 	bl	8005540 <USB_ReadInterrupts>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ba:	d104      	bne.n	80018c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 fe38 	bl	8005540 <USB_ReadInterrupts>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018da:	d104      	bne.n	80018e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 fe28 	bl	8005540 <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d103      	bne.n	8001902 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2202      	movs	r2, #2
 8001900:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fe1a 	bl	8005540 <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001916:	d120      	bne.n	800195a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001920:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d113      	bne.n	800195a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001932:	2110      	movs	r1, #16
 8001934:	6938      	ldr	r0, [r7, #16]
 8001936:	f003 fd0d 	bl	8005354 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800193a:	6938      	ldr	r0, [r7, #16]
 800193c:	f003 fd3e 	bl	80053bc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d105      	bne.n	8001954 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f003 feee 	bl	8005730 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f008 f887 	bl	8009a68 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f003 fdee 	bl	8005540 <USB_ReadInterrupts>
 8001964:	4603      	mov	r3, r0
 8001966:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800196a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196e:	d102      	bne.n	8001976 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f001 f90c 	bl	8002b8e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fde0 	bl	8005540 <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b08      	cmp	r3, #8
 8001988:	d106      	bne.n	8001998 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f008 f850 	bl	8009a30 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2208      	movs	r2, #8
 8001996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fdcf 	bl	8005540 <USB_ReadInterrupts>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ac:	d138      	bne.n	8001a20 <HAL_HCD_IRQHandler+0x1d0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 f988 	bl	8005cc8 <USB_HC_ReadInterrupt>
 80019b8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e025      	b.n	8001a0c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d018      	beq.n	8001a06 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019ea:	d106      	bne.n	80019fa <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	4619      	mov	r1, r3
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f8db 	bl	8001bae <HCD_HC_IN_IRQHandler>
 80019f8:	e005      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fd0f 	bl	8002424 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d3d4      	bcc.n	80019c0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 fd8b 	bl	8005540 <USB_ReadInterrupts>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d101      	bne.n	8001a38 <HAL_HCD_IRQHandler+0x1e8>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_HCD_IRQHandler+0x1ea>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d014      	beq.n	8001a68 <HAL_HCD_IRQHandler+0x218>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0210 	bic.w	r2, r2, #16
 8001a4c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 ffbe 	bl	80029d0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0210 	orr.w	r2, r2, #16
 8001a62:	619a      	str	r2, [r3, #24]
 8001a64:	e000      	b.n	8001a68 <HAL_HCD_IRQHandler+0x218>
      return;
 8001a66:	bf00      	nop
    }
  }
}
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_HCD_Start+0x16>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e013      	b.n	8001aac <HAL_HCD_Start+0x3e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 feb3 	bl	80057fe <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 fbea 	bl	8005276 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_HCD_Stop+0x16>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e00d      	b.n	8001ae6 <HAL_HCD_Stop+0x32>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  (void)USB_StopHost(hhcd->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 fa27 	bl	8005f2a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fe55 	bl	80057aa <USB_ResetPort>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	440b      	add	r3, r1
 8001b24:	3364      	adds	r3, #100	; 0x64
 8001b26:	781b      	ldrb	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 feac 	bl	800589e <USB_GetCurrentFrame>
 8001b46:	4603      	mov	r3, r0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fe87 	bl	8005870 <USB_GetHostSpeed>
 8001b62:	4603      	mov	r3, r0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	440b      	add	r3, r1
 8001b86:	333f      	adds	r3, #63	; 0x3f
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	440b      	add	r3, r1
 8001b9a:	333e      	adds	r3, #62	; 0x3e
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fcca 	bl	8005566 <USB_ReadChInterrupts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d11a      	bne.n	8001c12 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	461a      	mov	r2, r3
 8001bea:	2304      	movs	r3, #4
 8001bec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3365      	adds	r3, #101	; 0x65
 8001bfe:	2207      	movs	r2, #7
 8001c00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f004 f86d 	bl	8005cea <USB_HC_Halt>
 8001c10:	e09e      	b.n	8001d50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fca3 	bl	8005566 <USB_ReadChInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c2a:	d11b      	bne.n	8001c64 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	015a      	lsls	r2, r3, #5
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3365      	adds	r3, #101	; 0x65
 8001c50:	2208      	movs	r2, #8
 8001c52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 f844 	bl	8005cea <USB_HC_Halt>
 8001c62:	e075      	b.n	8001d50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fc7a 	bl	8005566 <USB_ReadChInterrupts>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d11a      	bne.n	8001cb2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3365      	adds	r3, #101	; 0x65
 8001c9e:	2206      	movs	r2, #6
 8001ca0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 f81d 	bl	8005cea <USB_HC_Halt>
 8001cb0:	e04e      	b.n	8001d50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fc53 	bl	8005566 <USB_ReadChInterrupts>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	d11b      	bne.n	8001d04 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	440b      	add	r3, r1
 8001cee:	3365      	adds	r3, #101	; 0x65
 8001cf0:	2209      	movs	r2, #9
 8001cf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fff4 	bl	8005cea <USB_HC_Halt>
 8001d02:	e025      	b.n	8001d50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fc2a 	bl	8005566 <USB_ReadChInterrupts>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d18:	2b80      	cmp	r3, #128	; 0x80
 8001d1a:	d119      	bne.n	8001d50 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3365      	adds	r3, #101	; 0x65
 8001d3e:	2207      	movs	r2, #7
 8001d40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 ffcd 	bl	8005cea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fc04 	bl	8005566 <USB_ReadChInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d68:	d111      	bne.n	8001d8e <HCD_HC_IN_IRQHandler+0x1e0>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	78fa      	ldrb	r2, [r7, #3]
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 ffb9 	bl	8005cea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d84:	461a      	mov	r2, r3
 8001d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d8a:	6093      	str	r3, [r2, #8]
 8001d8c:	e347      	b.n	800241e <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	78fa      	ldrb	r2, [r7, #3]
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fbe5 	bl	8005566 <USB_ReadChInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	f040 80d8 	bne.w	8001f58 <HCD_HC_IN_IRQHandler+0x3aa>
  {
    hhcd->hc[chnum].state = HC_XFRC;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	440b      	add	r3, r1
 8001db6:	3365      	adds	r3, #101	; 0x65
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	440b      	add	r3, r1
 8001dca:	3360      	adds	r3, #96	; 0x60
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2301      	movs	r3, #1
 8001de0:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	440b      	add	r3, r1
 8001df0:	3340      	adds	r3, #64	; 0x40
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <HCD_HC_IN_IRQHandler+0x260>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	440b      	add	r3, r1
 8001e06:	3340      	adds	r3, #64	; 0x40
 8001e08:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d110      	bne.n	8001e30 <HCD_HC_IN_IRQHandler+0x282>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	78fa      	ldrb	r2, [r7, #3]
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 ff67 	bl	8005cea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2310      	movs	r3, #16
 8001e2c:	6093      	str	r3, [r2, #8]
 8001e2e:	e03d      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x2fe>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3340      	adds	r3, #64	; 0x40
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d00a      	beq.n	8001e5c <HCD_HC_IN_IRQHandler+0x2ae>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	440b      	add	r3, r1
 8001e54:	3340      	adds	r3, #64	; 0x40
 8001e56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d127      	bne.n	8001eac <HCD_HC_IN_IRQHandler+0x2fe>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	0151      	lsls	r1, r2, #5
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	440a      	add	r2, r1
 8001e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e7a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	440b      	add	r3, r1
 8001e8a:	3364      	adds	r3, #100	; 0x64
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3364      	adds	r3, #100	; 0x64
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f007 fdec 	bl	8009a84 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d13a      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x37c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001eb4:	78fa      	ldrb	r2, [r7, #3]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3354      	adds	r3, #84	; 0x54
 8001ec4:	6819      	ldr	r1, [r3, #0]
 8001ec6:	78fa      	ldrb	r2, [r7, #3]
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	4403      	add	r3, r0
 8001ed4:	3342      	adds	r3, #66	; 0x42
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	440b      	add	r3, r1
 8001eda:	1e59      	subs	r1, r3, #1
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	4403      	add	r3, r0
 8001eea:	3342      	adds	r3, #66	; 0x42
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8291 	beq.w	800241e <HCD_HC_IN_IRQHandler+0x870>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	440b      	add	r3, r1
 8001f0a:	3358      	adds	r3, #88	; 0x58
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2d8      	uxtb	r0, r3
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	440b      	add	r3, r1
 8001f22:	3358      	adds	r3, #88	; 0x58
 8001f24:	4602      	mov	r2, r0
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e279      	b.n	800241e <HCD_HC_IN_IRQHandler+0x870>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	440b      	add	r3, r1
 8001f38:	3358      	adds	r3, #88	; 0x58
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	f083 0301 	eor.w	r3, r3, #1
 8001f42:	b2d8      	uxtb	r0, r3
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	440b      	add	r3, r1
 8001f50:	3358      	adds	r3, #88	; 0x58
 8001f52:	4602      	mov	r2, r0
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e262      	b.n	800241e <HCD_HC_IN_IRQHandler+0x870>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 fb00 	bl	8005566 <USB_ReadChInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d109      	bne.n	8001f84 <HCD_HC_IN_IRQHandler+0x3d6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2320      	movs	r3, #32
 8001f80:	6093      	str	r3, [r2, #8]
 8001f82:	e24c      	b.n	800241e <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 faea 	bl	8005566 <USB_ReadChInterrupts>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	f040 81a0 	bne.w	80022de <HCD_HC_IN_IRQHandler+0x730>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	461a      	mov	r2, r3
 8001fac:	2302      	movs	r3, #2
 8001fae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3365      	adds	r3, #101	; 0x65
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d114      	bne.n	8001ff0 <HCD_HC_IN_IRQHandler+0x442>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3365      	adds	r3, #101	; 0x65
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001fda:	78fa      	ldrb	r2, [r7, #3]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3364      	adds	r3, #100	; 0x64
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
 8001fee:	e167      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3365      	adds	r3, #101	; 0x65
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b06      	cmp	r3, #6
 8002004:	d114      	bne.n	8002030 <HCD_HC_IN_IRQHandler+0x482>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	440b      	add	r3, r1
 8002014:	3365      	adds	r3, #101	; 0x65
 8002016:	2202      	movs	r2, #2
 8002018:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	440b      	add	r3, r1
 8002028:	3364      	adds	r3, #100	; 0x64
 800202a:	2205      	movs	r2, #5
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e147      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	440b      	add	r3, r1
 800203e:	3365      	adds	r3, #101	; 0x65
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b07      	cmp	r3, #7
 8002044:	d00a      	beq.n	800205c <HCD_HC_IN_IRQHandler+0x4ae>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	440b      	add	r3, r1
 8002054:	3365      	adds	r3, #101	; 0x65
 8002056:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002058:	2b09      	cmp	r3, #9
 800205a:	d176      	bne.n	800214a <HCD_HC_IN_IRQHandler+0x59c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	440b      	add	r3, r1
 800206a:	3365      	adds	r3, #101	; 0x65
 800206c:	2202      	movs	r2, #2
 800206e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	440b      	add	r3, r1
 800207e:	3360      	adds	r3, #96	; 0x60
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	1c59      	adds	r1, r3, #1
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	4403      	add	r3, r0
 8002090:	3360      	adds	r3, #96	; 0x60
 8002092:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	440b      	add	r3, r1
 80020a2:	3360      	adds	r3, #96	; 0x60
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d914      	bls.n	80020d4 <HCD_HC_IN_IRQHandler+0x526>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	440b      	add	r3, r1
 80020b8:	3360      	adds	r3, #96	; 0x60
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	440b      	add	r3, r1
 80020cc:	3364      	adds	r3, #100	; 0x64
 80020ce:	2204      	movs	r2, #4
 80020d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80020d2:	e0f4      	b.n	80022be <HCD_HC_IN_IRQHandler+0x710>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	440b      	add	r3, r1
 80020e2:	3364      	adds	r3, #100	; 0x64
 80020e4:	2202      	movs	r2, #2
 80020e6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	440b      	add	r3, r1
 80020f6:	3340      	adds	r3, #64	; 0x40
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HCD_HC_IN_IRQHandler+0x568>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	440b      	add	r3, r1
 800210c:	3340      	adds	r3, #64	; 0x40
 800210e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002110:	2b02      	cmp	r3, #2
 8002112:	f040 80d4 	bne.w	80022be <HCD_HC_IN_IRQHandler+0x710>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800212c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002134:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4413      	add	r3, r2
 800213e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002148:	e0b9      	b.n	80022be <HCD_HC_IN_IRQHandler+0x710>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	440b      	add	r3, r1
 8002158:	3365      	adds	r3, #101	; 0x65
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b05      	cmp	r3, #5
 800215e:	d10a      	bne.n	8002176 <HCD_HC_IN_IRQHandler+0x5c8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	440b      	add	r3, r1
 800216e:	3365      	adds	r3, #101	; 0x65
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e0a4      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	440b      	add	r3, r1
 8002184:	3365      	adds	r3, #101	; 0x65
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d10a      	bne.n	80021a2 <HCD_HC_IN_IRQHandler+0x5f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	440b      	add	r3, r1
 800219a:	3365      	adds	r3, #101	; 0x65
 800219c:	2202      	movs	r2, #2
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e08e      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	440b      	add	r3, r1
 80021b0:	3365      	adds	r3, #101	; 0x65
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d143      	bne.n	8002240 <HCD_HC_IN_IRQHandler+0x692>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	440b      	add	r3, r1
 80021c6:	3365      	adds	r3, #101	; 0x65
 80021c8:	2202      	movs	r2, #2
 80021ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	440b      	add	r3, r1
 80021da:	3364      	adds	r3, #100	; 0x64
 80021dc:	2202      	movs	r2, #2
 80021de:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	440b      	add	r3, r1
 80021ee:	3340      	adds	r3, #64	; 0x40
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HCD_HC_IN_IRQHandler+0x65e>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	440b      	add	r3, r1
 8002204:	3340      	adds	r3, #64	; 0x40
 8002206:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002208:	2b02      	cmp	r3, #2
 800220a:	d159      	bne.n	80022c0 <HCD_HC_IN_IRQHandler+0x712>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002222:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800222a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	461a      	mov	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e03f      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x712>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	440b      	add	r3, r1
 800224e:	3365      	adds	r3, #101	; 0x65
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b08      	cmp	r3, #8
 8002254:	d126      	bne.n	80022a4 <HCD_HC_IN_IRQHandler+0x6f6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	440b      	add	r3, r1
 8002264:	3365      	adds	r3, #101	; 0x65
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	440b      	add	r3, r1
 8002278:	3360      	adds	r3, #96	; 0x60
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1c59      	adds	r1, r3, #1
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	4403      	add	r3, r0
 800228a:	3360      	adds	r3, #96	; 0x60
 800228c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	440b      	add	r3, r1
 800229c:	3364      	adds	r3, #100	; 0x64
 800229e:	2204      	movs	r2, #4
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e00d      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x712>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	440b      	add	r3, r1
 80022b2:	3365      	adds	r3, #101	; 0x65
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	f000 80b0 	beq.w	800241c <HCD_HC_IN_IRQHandler+0x86e>
 80022bc:	e000      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x712>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	440b      	add	r3, r1
 80022ce:	3364      	adds	r3, #100	; 0x64
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f007 fbd4 	bl	8009a84 <HAL_HCD_HC_NotifyURBChange_Callback>
 80022dc:	e09f      	b.n	800241e <HCD_HC_IN_IRQHandler+0x870>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 f93d 	bl	8005566 <USB_ReadChInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f2:	2b40      	cmp	r3, #64	; 0x40
 80022f4:	d124      	bne.n	8002340 <HCD_HC_IN_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	2340      	movs	r3, #64	; 0x40
 8002306:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	440b      	add	r3, r1
 8002316:	3365      	adds	r3, #101	; 0x65
 8002318:	2205      	movs	r2, #5
 800231a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	440b      	add	r3, r1
 800232a:	3360      	adds	r3, #96	; 0x60
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fcd6 	bl	8005cea <USB_HC_Halt>
 800233e:	e06e      	b.n	800241e <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f003 f90c 	bl	8005566 <USB_ReadChInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b10      	cmp	r3, #16
 8002356:	d162      	bne.n	800241e <HCD_HC_IN_IRQHandler+0x870>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	440b      	add	r3, r1
 8002366:	3340      	adds	r3, #64	; 0x40
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d11b      	bne.n	80023a6 <HCD_HC_IN_IRQHandler+0x7f8>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	440b      	add	r3, r1
 800237c:	3360      	adds	r3, #96	; 0x60
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	440b      	add	r3, r1
 8002390:	3365      	adds	r3, #101	; 0x65
 8002392:	2204      	movs	r2, #4
 8002394:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 fca3 	bl	8005cea <USB_HC_Halt>
 80023a4:	e030      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x85a>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	440b      	add	r3, r1
 80023b4:	3340      	adds	r3, #64	; 0x40
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HCD_HC_IN_IRQHandler+0x824>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	440b      	add	r3, r1
 80023ca:	3340      	adds	r3, #64	; 0x40
 80023cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d11a      	bne.n	8002408 <HCD_HC_IN_IRQHandler+0x85a>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	440b      	add	r3, r1
 80023e0:	3360      	adds	r3, #96	; 0x60
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	440b      	add	r3, r1
 80023f4:	3365      	adds	r3, #101	; 0x65
 80023f6:	2204      	movs	r2, #4
 80023f8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f003 fc71 	bl	8005cea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	461a      	mov	r2, r3
 8002416:	2310      	movs	r3, #16
 8002418:	6093      	str	r3, [r2, #8]
 800241a:	e000      	b.n	800241e <HCD_HC_IN_IRQHandler+0x870>
        return;
 800241c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f003 f88f 	bl	8005566 <USB_ReadChInterrupts>
 8002448:	4603      	mov	r3, r0
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d11a      	bne.n	8002488 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	461a      	mov	r2, r3
 8002460:	2304      	movs	r3, #4
 8002462:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	440b      	add	r3, r1
 8002472:	3365      	adds	r3, #101	; 0x65
 8002474:	2207      	movs	r2, #7
 8002476:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f003 fc32 	bl	8005cea <USB_HC_Halt>
 8002486:	e2a0      	b.n	80029ca <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f003 f868 	bl	8005566 <USB_ReadChInterrupts>
 8002496:	4603      	mov	r3, r0
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b20      	cmp	r3, #32
 800249e:	d109      	bne.n	80024b4 <HCD_HC_OUT_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	461a      	mov	r2, r3
 80024ae:	2320      	movs	r3, #32
 80024b0:	6093      	str	r3, [r2, #8]
 80024b2:	e28a      	b.n	80029ca <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 f852 	bl	8005566 <USB_ReadChInterrupts>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024cc:	d111      	bne.n	80024f2 <HCD_HC_OUT_IRQHandler+0xce>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	461a      	mov	r2, r3
 80024dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fbfd 	bl	8005cea <USB_HC_Halt>
 80024f0:	e26b      	b.n	80029ca <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 f833 	bl	8005566 <USB_ReadChInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d124      	bne.n	8002554 <HCD_HC_OUT_IRQHandler+0x130>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	440b      	add	r3, r1
 8002518:	3360      	adds	r3, #96	; 0x60
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252a:	461a      	mov	r2, r3
 800252c:	2301      	movs	r3, #1
 800252e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	440b      	add	r3, r1
 800253e:	3365      	adds	r3, #101	; 0x65
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f003 fbcc 	bl	8005cea <USB_HC_Halt>
 8002552:	e23a      	b.n	80029ca <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f003 f802 	bl	8005566 <USB_ReadChInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b08      	cmp	r3, #8
 800256a:	d11a      	bne.n	80025a2 <HCD_HC_OUT_IRQHandler+0x17e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	2308      	movs	r3, #8
 800257c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	440b      	add	r3, r1
 800258c:	3365      	adds	r3, #101	; 0x65
 800258e:	2206      	movs	r2, #6
 8002590:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f003 fba5 	bl	8005cea <USB_HC_Halt>
 80025a0:	e213      	b.n	80029ca <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 ffdb 	bl	8005566 <USB_ReadChInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d124      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x1e0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	440b      	add	r3, r1
 80025c8:	3360      	adds	r3, #96	; 0x60
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	440b      	add	r3, r1
 80025dc:	3365      	adds	r3, #101	; 0x65
 80025de:	2204      	movs	r2, #4
 80025e0:	701a      	strb	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fb7d 	bl	8005cea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	461a      	mov	r2, r3
 80025fe:	2310      	movs	r3, #16
 8002600:	6093      	str	r3, [r2, #8]
 8002602:	e1e2      	b.n	80029ca <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f002 ffaa 	bl	8005566 <USB_ReadChInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d11a      	bne.n	8002652 <HCD_HC_OUT_IRQHandler+0x22e>
  {
    hhcd->hc[chnum].state = HC_XACTERR;
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	440b      	add	r3, r1
 800262a:	3365      	adds	r3, #101	; 0x65
 800262c:	2207      	movs	r2, #7
 800262e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f003 fb56 	bl	8005cea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264a:	461a      	mov	r2, r3
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	6093      	str	r3, [r2, #8]
 8002650:	e1bb      	b.n	80029ca <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f002 ff83 	bl	8005566 <USB_ReadChInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266a:	d11b      	bne.n	80026a4 <HCD_HC_OUT_IRQHandler+0x280>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	440b      	add	r3, r1
 800267a:	3365      	adds	r3, #101	; 0x65
 800267c:	2209      	movs	r2, #9
 800267e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f003 fb2e 	bl	8005cea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	461a      	mov	r2, r3
 800269c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a0:	6093      	str	r3, [r2, #8]
 80026a2:	e192      	b.n	80029ca <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f002 ff5a 	bl	8005566 <USB_ReadChInterrupts>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	f040 8183 	bne.w	80029c4 <HCD_HC_OUT_IRQHandler+0x5a0>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ca:	461a      	mov	r2, r3
 80026cc:	2302      	movs	r3, #2
 80026ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	440b      	add	r3, r1
 80026de:	3365      	adds	r3, #101	; 0x65
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	f040 8093 	bne.w	800280e <HCD_HC_OUT_IRQHandler+0x3ea>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	440b      	add	r3, r1
 80026f6:	3365      	adds	r3, #101	; 0x65
 80026f8:	2202      	movs	r2, #2
 80026fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	440b      	add	r3, r1
 800270a:	3364      	adds	r3, #100	; 0x64
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	440b      	add	r3, r1
 800271e:	3340      	adds	r3, #64	; 0x40
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d00b      	beq.n	800273e <HCD_HC_OUT_IRQHandler+0x31a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	440b      	add	r3, r1
 8002734:	3340      	adds	r3, #64	; 0x40
 8002736:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002738:	2b03      	cmp	r3, #3
 800273a:	f040 8134 	bne.w	80029a6 <HCD_HC_OUT_IRQHandler+0x582>
      {
        if (hhcd->Init.dma_enable == 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d115      	bne.n	8002772 <HCD_HC_OUT_IRQHandler+0x34e>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	440b      	add	r3, r1
 8002754:	3359      	adds	r3, #89	; 0x59
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	f083 0301 	eor.w	r3, r3, #1
 800275e:	b2d8      	uxtb	r0, r3
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	440b      	add	r3, r1
 800276c:	3359      	adds	r3, #89	; 0x59
 800276e:	4602      	mov	r2, r0
 8002770:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	f040 8115 	bne.w	80029a6 <HCD_HC_OUT_IRQHandler+0x582>
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	440b      	add	r3, r1
 800278a:	3350      	adds	r3, #80	; 0x50
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8109 	beq.w	80029a6 <HCD_HC_OUT_IRQHandler+0x582>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	440b      	add	r3, r1
 80027a2:	3350      	adds	r3, #80	; 0x50
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	4403      	add	r3, r0
 80027b4:	3342      	adds	r3, #66	; 0x42
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	440b      	add	r3, r1
 80027ba:	1e59      	subs	r1, r3, #1
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4403      	add	r3, r0
 80027ca:	3342      	adds	r3, #66	; 0x42
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80e3 	beq.w	80029a6 <HCD_HC_OUT_IRQHandler+0x582>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	440b      	add	r3, r1
 80027ee:	3359      	adds	r3, #89	; 0x59
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	f083 0301 	eor.w	r3, r3, #1
 80027f8:	b2d8      	uxtb	r0, r3
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	440b      	add	r3, r1
 8002806:	3359      	adds	r3, #89	; 0x59
 8002808:	4602      	mov	r2, r0
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e0cb      	b.n	80029a6 <HCD_HC_OUT_IRQHandler+0x582>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	440b      	add	r3, r1
 800281c:	3365      	adds	r3, #101	; 0x65
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d10a      	bne.n	800283a <HCD_HC_OUT_IRQHandler+0x416>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	440b      	add	r3, r1
 8002832:	3365      	adds	r3, #101	; 0x65
 8002834:	2202      	movs	r2, #2
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	e0b5      	b.n	80029a6 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	440b      	add	r3, r1
 8002848:	3365      	adds	r3, #101	; 0x65
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d114      	bne.n	800287a <HCD_HC_OUT_IRQHandler+0x456>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	440b      	add	r3, r1
 800285e:	3365      	adds	r3, #101	; 0x65
 8002860:	2202      	movs	r2, #2
 8002862:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	440b      	add	r3, r1
 8002872:	3364      	adds	r3, #100	; 0x64
 8002874:	2202      	movs	r2, #2
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	e095      	b.n	80029a6 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	440b      	add	r3, r1
 8002888:	3365      	adds	r3, #101	; 0x65
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b06      	cmp	r3, #6
 800288e:	d114      	bne.n	80028ba <HCD_HC_OUT_IRQHandler+0x496>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	440b      	add	r3, r1
 800289e:	3365      	adds	r3, #101	; 0x65
 80028a0:	2202      	movs	r2, #2
 80028a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	440b      	add	r3, r1
 80028b2:	3364      	adds	r3, #100	; 0x64
 80028b4:	2205      	movs	r2, #5
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e075      	b.n	80029a6 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	440b      	add	r3, r1
 80028c8:	3365      	adds	r3, #101	; 0x65
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b07      	cmp	r3, #7
 80028ce:	d00a      	beq.n	80028e6 <HCD_HC_OUT_IRQHandler+0x4c2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	440b      	add	r3, r1
 80028de:	3365      	adds	r3, #101	; 0x65
 80028e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80028e2:	2b09      	cmp	r3, #9
 80028e4:	d170      	bne.n	80029c8 <HCD_HC_OUT_IRQHandler+0x5a4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	440b      	add	r3, r1
 80028f4:	3365      	adds	r3, #101	; 0x65
 80028f6:	2202      	movs	r2, #2
 80028f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	440b      	add	r3, r1
 8002908:	3360      	adds	r3, #96	; 0x60
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1c59      	adds	r1, r3, #1
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	4403      	add	r3, r0
 800291a:	3360      	adds	r3, #96	; 0x60
 800291c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	440b      	add	r3, r1
 800292c:	3360      	adds	r3, #96	; 0x60
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d914      	bls.n	800295e <HCD_HC_OUT_IRQHandler+0x53a>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	440b      	add	r3, r1
 8002942:	3360      	adds	r3, #96	; 0x60
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	440b      	add	r3, r1
 8002956:	3364      	adds	r3, #100	; 0x64
 8002958:	2204      	movs	r2, #4
 800295a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800295c:	e022      	b.n	80029a4 <HCD_HC_OUT_IRQHandler+0x580>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	440b      	add	r3, r1
 800296c:	3364      	adds	r3, #100	; 0x64
 800296e:	2202      	movs	r2, #2
 8002970:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002988:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002990:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	461a      	mov	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029a4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	440b      	add	r3, r1
 80029b4:	3364      	adds	r3, #100	; 0x64
 80029b6:	781a      	ldrb	r2, [r3, #0]
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	4619      	mov	r1, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f007 f861 	bl	8009a84 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029c2:	e002      	b.n	80029ca <HCD_HC_OUT_IRQHandler+0x5a6>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80029c4:	bf00      	nop
 80029c6:	e000      	b.n	80029ca <HCD_HC_OUT_IRQHandler+0x5a6>
      return;
 80029c8:	bf00      	nop
  }
}
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	0c5b      	lsrs	r3, r3, #17
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a04:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d004      	beq.n	8002a16 <HCD_RXQLVL_IRQHandler+0x46>
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	f000 80b6 	beq.w	8002b80 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a14:	e0b7      	b.n	8002b86 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80b3 	beq.w	8002b84 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3348      	adds	r3, #72	; 0x48
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80a7 	beq.w	8002b84 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	440b      	add	r3, r1
 8002a44:	3354      	adds	r3, #84	; 0x54
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	18d1      	adds	r1, r2, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	4403      	add	r3, r0
 8002a5a:	3350      	adds	r3, #80	; 0x50
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4299      	cmp	r1, r3
 8002a60:	f200 8083 	bhi.w	8002b6a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	440b      	add	r3, r1
 8002a76:	3348      	adds	r3, #72	; 0x48
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f002 fd06 	bl	8005490 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	440b      	add	r3, r1
 8002a92:	3348      	adds	r3, #72	; 0x48
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	18d1      	adds	r1, r2, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	4403      	add	r3, r0
 8002aa8:	3348      	adds	r3, #72	; 0x48
 8002aaa:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	440b      	add	r3, r1
 8002aba:	3354      	adds	r3, #84	; 0x54
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	18d1      	adds	r1, r2, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	4403      	add	r3, r0
 8002ad0:	3354      	adds	r3, #84	; 0x54
 8002ad2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	0cdb      	lsrs	r3, r3, #19
 8002ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	440b      	add	r3, r1
 8002af8:	3342      	adds	r3, #66	; 0x42
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d13f      	bne.n	8002b84 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d03c      	beq.n	8002b84 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b20:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b28:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	440b      	add	r3, r1
 8002b4a:	3358      	adds	r3, #88	; 0x58
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	f083 0301 	eor.w	r3, r3, #1
 8002b52:	b2d8      	uxtb	r0, r3
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	440b      	add	r3, r1
 8002b62:	3358      	adds	r3, #88	; 0x58
 8002b64:	4602      	mov	r2, r0
 8002b66:	701a      	strb	r2, [r3, #0]
      break;
 8002b68:	e00c      	b.n	8002b84 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	440b      	add	r3, r1
 8002b78:	3364      	adds	r3, #100	; 0x64
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	701a      	strb	r2, [r3, #0]
      break;
 8002b7e:	e001      	b.n	8002b84 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002b80:	bf00      	nop
 8002b82:	e000      	b.n	8002b86 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002b84:	bf00      	nop
  }
}
 8002b86:	bf00      	nop
 8002b88:	3728      	adds	r7, #40	; 0x28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d10b      	bne.n	8002bde <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d102      	bne.n	8002bd6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f006 ff3b 	bl	8009a4c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d132      	bne.n	8002c4e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f043 0308 	orr.w	r3, r3, #8
 8002bee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d126      	bne.n	8002c48 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d113      	bne.n	8002c2a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c0c:	d106      	bne.n	8002c1c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2102      	movs	r1, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 fd8b 	bl	8005730 <USB_InitFSLSPClkSel>
 8002c1a:	e011      	b.n	8002c40 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 fd84 	bl	8005730 <USB_InitFSLSPClkSel>
 8002c28:	e00a      	b.n	8002c40 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d106      	bne.n	8002c40 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c3e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f006 ff2d 	bl	8009aa0 <HAL_HCD_PortEnabled_Callback>
 8002c46:	e002      	b.n	8002c4e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f006 ff37 	bl	8009abc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d103      	bne.n	8002c60 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f043 0320 	orr.w	r3, r3, #32
 8002c5e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6013      	str	r3, [r2, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c82:	6013      	str	r3, [r2, #0]
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40007000 	.word	0x40007000

08002c94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <HAL_PWREx_GetVoltageRange+0x18>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40007000 	.word	0x40007000

08002cb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cbe:	d130      	bne.n	8002d22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ccc:	d038      	beq.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd6:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2232      	movs	r2, #50	; 0x32
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	0c9b      	lsrs	r3, r3, #18
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf4:	e002      	b.n	8002cfc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cfc:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d08:	d102      	bne.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f2      	bne.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1c:	d110      	bne.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e00f      	b.n	8002d42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d007      	beq.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d38:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40007000 	.word	0x40007000
 8002d54:	20000000 	.word	0x20000000
 8002d58:	431bde83 	.word	0x431bde83

08002d5c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d6a:	6053      	str	r3, [r2, #4]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40007000 	.word	0x40007000

08002d7c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d8a:	6053      	str	r3, [r2, #4]
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40007000 	.word	0x40007000

08002d9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f000 bc08 	b.w	80035c0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db0:	4b96      	ldr	r3, [pc, #600]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dba:	4b94      	ldr	r3, [pc, #592]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80e4 	beq.w	8002f9a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4c>
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	f040 808b 	bne.w	8002ef6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	f040 8087 	bne.w	8002ef6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de8:	4b88      	ldr	r3, [pc, #544]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_OscConfig+0x64>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e3df      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	4b81      	ldr	r3, [pc, #516]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <HAL_RCC_OscConfig+0x7e>
 8002e10:	4b7e      	ldr	r3, [pc, #504]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e18:	e005      	b.n	8002e26 <HAL_RCC_OscConfig+0x8a>
 8002e1a:	4b7c      	ldr	r3, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d223      	bcs.n	8002e72 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fd92 	bl	8003958 <RCC_SetFlashLatencyFromMSIRange>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e3c0      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e3e:	4b73      	ldr	r3, [pc, #460]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a72      	ldr	r2, [pc, #456]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e44:	f043 0308 	orr.w	r3, r3, #8
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b70      	ldr	r3, [pc, #448]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	496d      	ldr	r1, [pc, #436]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5c:	4b6b      	ldr	r3, [pc, #428]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	4968      	ldr	r1, [pc, #416]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
 8002e70:	e025      	b.n	8002ebe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e72:	4b66      	ldr	r3, [pc, #408]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a65      	ldr	r2, [pc, #404]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4960      	ldr	r1, [pc, #384]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e90:	4b5e      	ldr	r3, [pc, #376]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	495b      	ldr	r1, [pc, #364]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fd52 	bl	8003958 <RCC_SetFlashLatencyFromMSIRange>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e380      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ebe:	f000 fc87 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b51      	ldr	r3, [pc, #324]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	4950      	ldr	r1, [pc, #320]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	5ccb      	ldrb	r3, [r1, r3]
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eda:	4a4e      	ldr	r2, [pc, #312]	; (8003014 <HAL_RCC_OscConfig+0x278>)
 8002edc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ede:	4b4e      	ldr	r3, [pc, #312]	; (8003018 <HAL_RCC_OscConfig+0x27c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fea2 	bl	8000c2c <HAL_InitTick>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d052      	beq.n	8002f98 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	e364      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d032      	beq.n	8002f64 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002efe:	4b43      	ldr	r3, [pc, #268]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a42      	ldr	r2, [pc, #264]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f0a:	f7fd fedf 	bl	8000ccc <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f12:	f7fd fedb 	bl	8000ccc <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e34d      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f24:	4b39      	ldr	r3, [pc, #228]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f30:	4b36      	ldr	r3, [pc, #216]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a35      	ldr	r2, [pc, #212]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f36:	f043 0308 	orr.w	r3, r3, #8
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4930      	ldr	r1, [pc, #192]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f4e:	4b2f      	ldr	r3, [pc, #188]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	492b      	ldr	r1, [pc, #172]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
 8002f62:	e01a      	b.n	8002f9a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f64:	4b29      	ldr	r3, [pc, #164]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a28      	ldr	r2, [pc, #160]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f70:	f7fd feac 	bl	8000ccc <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f78:	f7fd fea8 	bl	8000ccc <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e31a      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x1dc>
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d073      	beq.n	800308e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x21c>
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b0c      	cmp	r3, #12
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d063      	beq.n	800308c <HAL_RCC_OscConfig+0x2f0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d15f      	bne.n	800308c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e2f7      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x24c>
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a0b      	ldr	r2, [pc, #44]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e025      	b.n	8003034 <HAL_RCC_OscConfig+0x298>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff0:	d114      	bne.n	800301c <HAL_RCC_OscConfig+0x280>
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a05      	ldr	r2, [pc, #20]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a02      	ldr	r2, [pc, #8]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e013      	b.n	8003034 <HAL_RCC_OscConfig+0x298>
 800300c:	40021000 	.word	0x40021000
 8003010:	0800a158 	.word	0x0800a158
 8003014:	20000000 	.word	0x20000000
 8003018:	20000004 	.word	0x20000004
 800301c:	4ba0      	ldr	r3, [pc, #640]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a9f      	ldr	r2, [pc, #636]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b9d      	ldr	r3, [pc, #628]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a9c      	ldr	r2, [pc, #624]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 800302e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fd fe46 	bl	8000ccc <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7fd fe42 	bl	8000ccc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e2b4      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003056:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x2a8>
 8003062:	e014      	b.n	800308e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fd fe32 	bl	8000ccc <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800306c:	f7fd fe2e 	bl	8000ccc <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e2a0      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800307e:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x2d0>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d060      	beq.n	800315c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b04      	cmp	r3, #4
 800309e:	d005      	beq.n	80030ac <HAL_RCC_OscConfig+0x310>
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d119      	bne.n	80030da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d116      	bne.n	80030da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ac:	4b7c      	ldr	r3, [pc, #496]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_OscConfig+0x328>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e27d      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b76      	ldr	r3, [pc, #472]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	4973      	ldr	r1, [pc, #460]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d8:	e040      	b.n	800315c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d023      	beq.n	800312a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e2:	4b6f      	ldr	r3, [pc, #444]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6e      	ldr	r2, [pc, #440]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 80030e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fd fded 	bl	8000ccc <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f6:	f7fd fde9 	bl	8000ccc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e25b      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003108:	4b65      	ldr	r3, [pc, #404]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003114:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	495f      	ldr	r1, [pc, #380]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
 8003128:	e018      	b.n	800315c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312a:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5c      	ldr	r2, [pc, #368]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7fd fdc9 	bl	8000ccc <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313e:	f7fd fdc5 	bl	8000ccc <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e237      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003150:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d03c      	beq.n	80031e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01c      	beq.n	80031aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003170:	4b4b      	ldr	r3, [pc, #300]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003176:	4a4a      	ldr	r2, [pc, #296]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fd fda4 	bl	8000ccc <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003188:	f7fd fda0 	bl	8000ccc <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e212      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 800319c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ef      	beq.n	8003188 <HAL_RCC_OscConfig+0x3ec>
 80031a8:	e01b      	b.n	80031e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 80031ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b0:	4a3b      	ldr	r2, [pc, #236]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fd fd87 	bl	8000ccc <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fd fd83 	bl	8000ccc <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e1f5      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ef      	bne.n	80031c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80a6 	beq.w	800333c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f0:	2300      	movs	r3, #0
 80031f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10d      	bne.n	800321c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320a:	6593      	str	r3, [r2, #88]	; 0x58
 800320c:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003218:	2301      	movs	r3, #1
 800321a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_RCC_OscConfig+0x508>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d118      	bne.n	800325a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003228:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <HAL_RCC_OscConfig+0x508>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <HAL_RCC_OscConfig+0x508>)
 800322e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003234:	f7fd fd4a 	bl	8000ccc <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323c:	f7fd fd46 	bl	8000ccc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e1b8      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <HAL_RCC_OscConfig+0x508>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d108      	bne.n	8003274 <HAL_RCC_OscConfig+0x4d8>
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003272:	e029      	b.n	80032c8 <HAL_RCC_OscConfig+0x52c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b05      	cmp	r3, #5
 800327a:	d115      	bne.n	80032a8 <HAL_RCC_OscConfig+0x50c>
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	4a03      	ldr	r2, [pc, #12]	; (80032a0 <HAL_RCC_OscConfig+0x504>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800329c:	e014      	b.n	80032c8 <HAL_RCC_OscConfig+0x52c>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40007000 	.word	0x40007000
 80032a8:	4b9d      	ldr	r3, [pc, #628]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	4a9c      	ldr	r2, [pc, #624]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b8:	4b99      	ldr	r3, [pc, #612]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032be:	4a98      	ldr	r2, [pc, #608]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d016      	beq.n	80032fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fd fcfc 	bl	8000ccc <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d8:	f7fd fcf8 	bl	8000ccc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e168      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ee:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ed      	beq.n	80032d8 <HAL_RCC_OscConfig+0x53c>
 80032fc:	e015      	b.n	800332a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fe:	f7fd fce5 	bl	8000ccc <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003304:	e00a      	b.n	800331c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fd fce1 	bl	8000ccc <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e151      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800331c:	4b80      	ldr	r3, [pc, #512]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ed      	bne.n	8003306 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332a:	7ffb      	ldrb	r3, [r7, #31]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d105      	bne.n	800333c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003330:	4b7b      	ldr	r3, [pc, #492]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	4a7a      	ldr	r2, [pc, #488]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 8003336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d03c      	beq.n	80033c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01c      	beq.n	800338a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003350:	4b73      	ldr	r3, [pc, #460]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 8003352:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003356:	4a72      	ldr	r2, [pc, #456]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fd fcb4 	bl	8000ccc <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003368:	f7fd fcb0 	bl	8000ccc <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e122      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800337a:	4b69      	ldr	r3, [pc, #420]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 800337c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ef      	beq.n	8003368 <HAL_RCC_OscConfig+0x5cc>
 8003388:	e01b      	b.n	80033c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800338a:	4b65      	ldr	r3, [pc, #404]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 800338c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003390:	4a63      	ldr	r2, [pc, #396]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fd fc97 	bl	8000ccc <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033a2:	f7fd fc93 	bl	8000ccc <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e105      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033b4:	4b5a      	ldr	r3, [pc, #360]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80033b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ef      	bne.n	80033a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80f9 	beq.w	80035be <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	f040 80cf 	bne.w	8003574 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033d6:	4b52      	ldr	r3, [pc, #328]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0203 	and.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d12c      	bne.n	8003444 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	3b01      	subs	r3, #1
 80033f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d123      	bne.n	8003444 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d11b      	bne.n	8003444 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d113      	bne.n	8003444 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	3b01      	subs	r3, #1
 800342a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d109      	bne.n	8003444 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	085b      	lsrs	r3, r3, #1
 800343c:	3b01      	subs	r3, #1
 800343e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d071      	beq.n	8003528 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d068      	beq.n	800351c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800344a:	4b35      	ldr	r3, [pc, #212]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003456:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0ac      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003466:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2d      	ldr	r2, [pc, #180]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 800346c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003470:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003472:	f7fd fc2b 	bl	8000ccc <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347a:	f7fd fc27 	bl	8000ccc <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e099      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f0      	bne.n	800347a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_RCC_OscConfig+0x788>)
 800349e:	4013      	ands	r3, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034a8:	3a01      	subs	r2, #1
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034b2:	0212      	lsls	r2, r2, #8
 80034b4:	4311      	orrs	r1, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034ba:	0852      	lsrs	r2, r2, #1
 80034bc:	3a01      	subs	r2, #1
 80034be:	0552      	lsls	r2, r2, #21
 80034c0:	4311      	orrs	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034c6:	0852      	lsrs	r2, r2, #1
 80034c8:	3a01      	subs	r2, #1
 80034ca:	0652      	lsls	r2, r2, #25
 80034cc:	4311      	orrs	r1, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034d2:	06d2      	lsls	r2, r2, #27
 80034d4:	430a      	orrs	r2, r1
 80034d6:	4912      	ldr	r1, [pc, #72]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0f      	ldr	r2, [pc, #60]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80034e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a0c      	ldr	r2, [pc, #48]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034f4:	f7fd fbea 	bl	8000ccc <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fd fbe6 	bl	8000ccc <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e058      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_RCC_OscConfig+0x784>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800351a:	e050      	b.n	80035be <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e04f      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
 8003520:	40021000 	.word	0x40021000
 8003524:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003528:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <HAL_RCC_OscConfig+0x82c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d144      	bne.n	80035be <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCC_OscConfig+0x82c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a23      	ldr	r2, [pc, #140]	; (80035c8 <HAL_RCC_OscConfig+0x82c>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003540:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <HAL_RCC_OscConfig+0x82c>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a20      	ldr	r2, [pc, #128]	; (80035c8 <HAL_RCC_OscConfig+0x82c>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800354c:	f7fd fbbe 	bl	8000ccc <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd fbba 	bl	8000ccc <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e02c      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <HAL_RCC_OscConfig+0x82c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x7b8>
 8003572:	e024      	b.n	80035be <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b0c      	cmp	r3, #12
 8003578:	d01f      	beq.n	80035ba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <HAL_RCC_OscConfig+0x82c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <HAL_RCC_OscConfig+0x82c>)
 8003580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fd fba1 	bl	8000ccc <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fd fb9d 	bl	8000ccc <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e00f      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_RCC_OscConfig+0x82c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_RCC_OscConfig+0x82c>)
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	4905      	ldr	r1, [pc, #20]	; (80035c8 <HAL_RCC_OscConfig+0x82c>)
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_RCC_OscConfig+0x830>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	60cb      	str	r3, [r1, #12]
 80035b8:	e001      	b.n	80035be <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3720      	adds	r7, #32
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000
 80035cc:	feeefffc 	.word	0xfeeefffc

080035d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0e7      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b75      	ldr	r3, [pc, #468]	; (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d910      	bls.n	8003614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b72      	ldr	r3, [pc, #456]	; (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	4970      	ldr	r1, [pc, #448]	; (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b6e      	ldr	r3, [pc, #440]	; (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0cf      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d010      	beq.n	8003642 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	4b66      	ldr	r3, [pc, #408]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800362c:	429a      	cmp	r2, r3
 800362e:	d908      	bls.n	8003642 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4960      	ldr	r1, [pc, #384]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d04c      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003656:	4b5a      	ldr	r3, [pc, #360]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d121      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e0a6      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366e:	4b54      	ldr	r3, [pc, #336]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d115      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e09a      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003686:	4b4e      	ldr	r3, [pc, #312]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e08e      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e086      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b46      	ldr	r3, [pc, #280]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4943      	ldr	r1, [pc, #268]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fd fb08 	bl	8000ccc <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fd fb04 	bl	8000ccc <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e06e      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b3a      	ldr	r3, [pc, #232]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d010      	beq.n	8003716 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003700:	429a      	cmp	r2, r3
 8003702:	d208      	bcs.n	8003716 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	492b      	ldr	r1, [pc, #172]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d210      	bcs.n	8003746 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f023 0207 	bic.w	r2, r3, #7
 800372c:	4923      	ldr	r1, [pc, #140]	; (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003734:	4b21      	ldr	r3, [pc, #132]	; (80037bc <HAL_RCC_ClockConfig+0x1ec>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d001      	beq.n	8003746 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e036      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003752:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	4918      	ldr	r1, [pc, #96]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003760:	4313      	orrs	r3, r2
 8003762:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d009      	beq.n	8003784 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4910      	ldr	r1, [pc, #64]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003784:	f000 f824 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <HAL_RCC_ClockConfig+0x1f0>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	490b      	ldr	r1, [pc, #44]	; (80037c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
 80037a0:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_RCC_ClockConfig+0x1f8>)
 80037a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_ClockConfig+0x1fc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd fa3f 	bl	8000c2c <HAL_InitTick>
 80037ae:	4603      	mov	r3, r0
 80037b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80037b2:	7afb      	ldrb	r3, [r7, #11]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40021000 	.word	0x40021000
 80037c4:	0800a158 	.word	0x0800a158
 80037c8:	20000000 	.word	0x20000000
 80037cc:	20000004 	.word	0x20000004

080037d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	2300      	movs	r3, #0
 80037dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037de:	4b3e      	ldr	r3, [pc, #248]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037e8:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x34>
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d121      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d11e      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003804:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	e005      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003820:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800382c:	4a2b      	ldr	r2, [pc, #172]	; (80038dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003834:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d102      	bne.n	800384e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003848:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	e004      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d101      	bne.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003854:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003856:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d134      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800385e:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d003      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0xa6>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d003      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0xac>
 8003874:	e005      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003876:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003878:	617b      	str	r3, [r7, #20]
      break;
 800387a:	e005      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800387e:	617b      	str	r3, [r7, #20]
      break;
 8003880:	e002      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	617b      	str	r3, [r7, #20]
      break;
 8003886:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003888:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	3301      	adds	r3, #1
 8003894:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	fb03 f202 	mul.w	r2, r3, r2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	0e5b      	lsrs	r3, r3, #25
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	3301      	adds	r3, #1
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038c8:	69bb      	ldr	r3, [r7, #24]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3724      	adds	r7, #36	; 0x24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	0800a170 	.word	0x0800a170
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	007a1200 	.word	0x007a1200

080038e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000000 	.word	0x20000000

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003904:	f7ff fff0 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4904      	ldr	r1, [pc, #16]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	0800a168 	.word	0x0800a168

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003930:	f7ff ffda 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0adb      	lsrs	r3, r3, #11
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4904      	ldr	r1, [pc, #16]	; (8003954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	0800a168 	.word	0x0800a168

08003958 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003964:	4b2a      	ldr	r3, [pc, #168]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003970:	f7ff f990 	bl	8002c94 <HAL_PWREx_GetVoltageRange>
 8003974:	6178      	str	r0, [r7, #20]
 8003976:	e014      	b.n	80039a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003978:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800397e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003982:	6593      	str	r3, [r2, #88]	; 0x58
 8003984:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003990:	f7ff f980 	bl	8002c94 <HAL_PWREx_GetVoltageRange>
 8003994:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003996:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800399c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039a8:	d10b      	bne.n	80039c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b80      	cmp	r3, #128	; 0x80
 80039ae:	d919      	bls.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2ba0      	cmp	r3, #160	; 0xa0
 80039b4:	d902      	bls.n	80039bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039b6:	2302      	movs	r3, #2
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	e013      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039bc:	2301      	movs	r3, #1
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	e010      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b80      	cmp	r3, #128	; 0x80
 80039c6:	d902      	bls.n	80039ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039c8:	2303      	movs	r3, #3
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	e00a      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b80      	cmp	r3, #128	; 0x80
 80039d2:	d102      	bne.n	80039da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039d4:	2302      	movs	r3, #2
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	e004      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b70      	cmp	r3, #112	; 0x70
 80039de:	d101      	bne.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039e0:	2301      	movs	r3, #1
 80039e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 0207 	bic.w	r2, r3, #7
 80039ec:	4909      	ldr	r1, [pc, #36]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d001      	beq.n	8003a06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40022000 	.word	0x40022000

08003a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a20:	2300      	movs	r3, #0
 8003a22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a24:	2300      	movs	r3, #0
 8003a26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d041      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a3c:	d02a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a42:	d824      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a48:	d008      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a4e:	d81e      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a58:	d010      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a5a:	e018      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a5c:	4b86      	ldr	r3, [pc, #536]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4a85      	ldr	r2, [pc, #532]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a68:	e015      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fadd 	bl	8004030 <RCCEx_PLLSAI1_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a7a:	e00c      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3320      	adds	r3, #32
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fbc6 	bl	8004214 <RCCEx_PLLSAI2_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a8c:	e003      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	74fb      	strb	r3, [r7, #19]
      break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a96:	7cfb      	ldrb	r3, [r7, #19]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a9c:	4b76      	ldr	r3, [pc, #472]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aaa:	4973      	ldr	r1, [pc, #460]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ab2:	e001      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d041      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003acc:	d02a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ace:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ad2:	d824      	bhi.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ad4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ad8:	d008      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ada:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ade:	d81e      	bhi.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ae8:	d010      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003aea:	e018      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aec:	4b62      	ldr	r3, [pc, #392]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a61      	ldr	r2, [pc, #388]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003af8:	e015      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3304      	adds	r3, #4
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fa95 	bl	8004030 <RCCEx_PLLSAI1_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b0a:	e00c      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3320      	adds	r3, #32
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fb7e 	bl	8004214 <RCCEx_PLLSAI2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b1c:	e003      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	74fb      	strb	r3, [r7, #19]
      break;
 8003b22:	e000      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b26:	7cfb      	ldrb	r3, [r7, #19]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10b      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b2c:	4b52      	ldr	r3, [pc, #328]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3a:	494f      	ldr	r1, [pc, #316]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b42:	e001      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80a0 	beq.w	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b56:	2300      	movs	r3, #0
 8003b58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b5a:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00d      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b70:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	4a40      	ldr	r2, [pc, #256]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b7c:	4b3e      	ldr	r3, [pc, #248]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b8c:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a3a      	ldr	r2, [pc, #232]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b98:	f7fd f898 	bl	8000ccc <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b9e:	e009      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba0:	f7fd f894 	bl	8000ccc <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d902      	bls.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	74fb      	strb	r3, [r7, #19]
        break;
 8003bb2:	e005      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bb4:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ef      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d15c      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bc6:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01f      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d019      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003be4:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bf0:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c00:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	4a1c      	ldr	r2, [pc, #112]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c10:	4a19      	ldr	r2, [pc, #100]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d016      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c22:	f7fd f853 	bl	8000ccc <HAL_GetTick>
 8003c26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c28:	e00b      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f7fd f84f 	bl	8000ccc <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d902      	bls.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	74fb      	strb	r3, [r7, #19]
            break;
 8003c40:	e006      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c42:	4b0d      	ldr	r3, [pc, #52]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ec      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c50:	7cfb      	ldrb	r3, [r7, #19]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	4904      	ldr	r1, [pc, #16]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c6e:	e009      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	74bb      	strb	r3, [r7, #18]
 8003c74:	e006      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c84:	7c7b      	ldrb	r3, [r7, #17]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d105      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8a:	4ba6      	ldr	r3, [pc, #664]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	4aa5      	ldr	r2, [pc, #660]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ca2:	4ba0      	ldr	r3, [pc, #640]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f023 0203 	bic.w	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	499c      	ldr	r1, [pc, #624]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cc4:	4b97      	ldr	r3, [pc, #604]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f023 020c 	bic.w	r2, r3, #12
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	4994      	ldr	r1, [pc, #592]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ce6:	4b8f      	ldr	r3, [pc, #572]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	498b      	ldr	r1, [pc, #556]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d08:	4b86      	ldr	r3, [pc, #536]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	4983      	ldr	r1, [pc, #524]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d2a:	4b7e      	ldr	r3, [pc, #504]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d38:	497a      	ldr	r1, [pc, #488]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d4c:	4b75      	ldr	r3, [pc, #468]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	4972      	ldr	r1, [pc, #456]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d6e:	4b6d      	ldr	r3, [pc, #436]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7c:	4969      	ldr	r1, [pc, #420]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d90:	4b64      	ldr	r3, [pc, #400]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d9e:	4961      	ldr	r1, [pc, #388]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db2:	4b5c      	ldr	r3, [pc, #368]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	4958      	ldr	r1, [pc, #352]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dd4:	4b53      	ldr	r3, [pc, #332]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	4950      	ldr	r1, [pc, #320]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003df6:	4b4b      	ldr	r3, [pc, #300]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	4947      	ldr	r1, [pc, #284]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e18:	4b42      	ldr	r3, [pc, #264]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e1e:	f023 0203 	bic.w	r2, r3, #3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	493f      	ldr	r1, [pc, #252]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d028      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e3a:	4b3a      	ldr	r3, [pc, #232]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4936      	ldr	r1, [pc, #216]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e58:	d106      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5a:	4b32      	ldr	r3, [pc, #200]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	4a31      	ldr	r2, [pc, #196]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e64:	60d3      	str	r3, [r2, #12]
 8003e66:	e011      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3304      	adds	r3, #4
 8003e76:	2101      	movs	r1, #1
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 f8d9 	bl	8004030 <RCCEx_PLLSAI1_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e82:	7cfb      	ldrb	r3, [r7, #19]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d028      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e98:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea6:	491f      	ldr	r1, [pc, #124]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec2:	60d3      	str	r3, [r2, #12]
 8003ec4:	e011      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ece:	d10c      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f8aa 	bl	8004030 <RCCEx_PLLSAI1_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003ee6:	7cfb      	ldrb	r3, [r7, #19]
 8003ee8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f04:	4907      	ldr	r1, [pc, #28]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f14:	d108      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f16:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	4a02      	ldr	r2, [pc, #8]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f20:	60d3      	str	r3, [r2, #12]
 8003f22:	e013      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003f24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2101      	movs	r1, #1
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 f879 	bl	8004030 <RCCEx_PLLSAI1_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d02f      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f58:	4b2c      	ldr	r3, [pc, #176]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f66:	4929      	ldr	r1, [pc, #164]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	2102      	movs	r1, #2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f856 	bl	8004030 <RCCEx_PLLSAI1_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d014      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	74bb      	strb	r3, [r7, #18]
 8003f92:	e011      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3320      	adds	r3, #32
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 f935 	bl	8004214 <RCCEx_PLLSAI2_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fae:	7cfb      	ldrb	r3, [r7, #19]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00b      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fd4:	490d      	ldr	r1, [pc, #52]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00b      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fe8:	4b08      	ldr	r3, [pc, #32]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff8:	4904      	ldr	r1, [pc, #16]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004000:	7cbb      	ldrb	r3, [r7, #18]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000

08004010 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800401a:	f043 0304 	orr.w	r3, r3, #4
 800401e:	6013      	str	r3, [r2, #0]
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000

08004030 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800403e:	4b74      	ldr	r3, [pc, #464]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d018      	beq.n	800407c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800404a:	4b71      	ldr	r3, [pc, #452]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0203 	and.w	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d10d      	bne.n	8004076 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
       ||
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004062:	4b6b      	ldr	r3, [pc, #428]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
       ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d047      	beq.n	8004106 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	e044      	b.n	8004106 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d018      	beq.n	80040b6 <RCCEx_PLLSAI1_Config+0x86>
 8004084:	2b03      	cmp	r3, #3
 8004086:	d825      	bhi.n	80040d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004088:	2b01      	cmp	r3, #1
 800408a:	d002      	beq.n	8004092 <RCCEx_PLLSAI1_Config+0x62>
 800408c:	2b02      	cmp	r3, #2
 800408e:	d009      	beq.n	80040a4 <RCCEx_PLLSAI1_Config+0x74>
 8004090:	e020      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004092:	4b5f      	ldr	r3, [pc, #380]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d11d      	bne.n	80040da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a2:	e01a      	b.n	80040da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040a4:	4b5a      	ldr	r3, [pc, #360]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d116      	bne.n	80040de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b4:	e013      	b.n	80040de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040b6:	4b56      	ldr	r3, [pc, #344]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10f      	bne.n	80040e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040c2:	4b53      	ldr	r3, [pc, #332]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040d2:	e006      	b.n	80040e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e004      	b.n	80040e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040da:	bf00      	nop
 80040dc:	e002      	b.n	80040e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10d      	bne.n	8004106 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040ea:	4b49      	ldr	r3, [pc, #292]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6819      	ldr	r1, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	430b      	orrs	r3, r1
 8004100:	4943      	ldr	r1, [pc, #268]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d17c      	bne.n	8004206 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800410c:	4b40      	ldr	r3, [pc, #256]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a3f      	ldr	r2, [pc, #252]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004112:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004118:	f7fc fdd8 	bl	8000ccc <HAL_GetTick>
 800411c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800411e:	e009      	b.n	8004134 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004120:	f7fc fdd4 	bl	8000ccc <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d902      	bls.n	8004134 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	73fb      	strb	r3, [r7, #15]
        break;
 8004132:	e005      	b.n	8004140 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004134:	4b36      	ldr	r3, [pc, #216]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ef      	bne.n	8004120 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d15f      	bne.n	8004206 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d110      	bne.n	800416e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800414c:	4b30      	ldr	r3, [pc, #192]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004154:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6892      	ldr	r2, [r2, #8]
 800415c:	0211      	lsls	r1, r2, #8
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68d2      	ldr	r2, [r2, #12]
 8004162:	06d2      	lsls	r2, r2, #27
 8004164:	430a      	orrs	r2, r1
 8004166:	492a      	ldr	r1, [pc, #168]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	610b      	str	r3, [r1, #16]
 800416c:	e027      	b.n	80041be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d112      	bne.n	800419a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004174:	4b26      	ldr	r3, [pc, #152]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800417c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6892      	ldr	r2, [r2, #8]
 8004184:	0211      	lsls	r1, r2, #8
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6912      	ldr	r2, [r2, #16]
 800418a:	0852      	lsrs	r2, r2, #1
 800418c:	3a01      	subs	r2, #1
 800418e:	0552      	lsls	r2, r2, #21
 8004190:	430a      	orrs	r2, r1
 8004192:	491f      	ldr	r1, [pc, #124]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004194:	4313      	orrs	r3, r2
 8004196:	610b      	str	r3, [r1, #16]
 8004198:	e011      	b.n	80041be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6892      	ldr	r2, [r2, #8]
 80041aa:	0211      	lsls	r1, r2, #8
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6952      	ldr	r2, [r2, #20]
 80041b0:	0852      	lsrs	r2, r2, #1
 80041b2:	3a01      	subs	r2, #1
 80041b4:	0652      	lsls	r2, r2, #25
 80041b6:	430a      	orrs	r2, r1
 80041b8:	4915      	ldr	r1, [pc, #84]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041be:	4b14      	ldr	r3, [pc, #80]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a13      	ldr	r2, [pc, #76]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ca:	f7fc fd7f 	bl	8000ccc <HAL_GetTick>
 80041ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041d0:	e009      	b.n	80041e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041d2:	f7fc fd7b 	bl	8000ccc <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d902      	bls.n	80041e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	73fb      	strb	r3, [r7, #15]
          break;
 80041e4:	e005      	b.n	80041f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0ef      	beq.n	80041d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	4903      	ldr	r1, [pc, #12]	; (8004210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004202:	4313      	orrs	r3, r2
 8004204:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004206:	7bfb      	ldrb	r3, [r7, #15]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000

08004214 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004222:	4b69      	ldr	r3, [pc, #420]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d018      	beq.n	8004260 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800422e:	4b66      	ldr	r3, [pc, #408]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0203 	and.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d10d      	bne.n	800425a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
       ||
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004246:	4b60      	ldr	r3, [pc, #384]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
       ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d047      	beq.n	80042ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
 800425e:	e044      	b.n	80042ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d018      	beq.n	800429a <RCCEx_PLLSAI2_Config+0x86>
 8004268:	2b03      	cmp	r3, #3
 800426a:	d825      	bhi.n	80042b8 <RCCEx_PLLSAI2_Config+0xa4>
 800426c:	2b01      	cmp	r3, #1
 800426e:	d002      	beq.n	8004276 <RCCEx_PLLSAI2_Config+0x62>
 8004270:	2b02      	cmp	r3, #2
 8004272:	d009      	beq.n	8004288 <RCCEx_PLLSAI2_Config+0x74>
 8004274:	e020      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004276:	4b54      	ldr	r3, [pc, #336]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d11d      	bne.n	80042be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004286:	e01a      	b.n	80042be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004288:	4b4f      	ldr	r3, [pc, #316]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004290:	2b00      	cmp	r3, #0
 8004292:	d116      	bne.n	80042c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004298:	e013      	b.n	80042c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800429a:	4b4b      	ldr	r3, [pc, #300]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10f      	bne.n	80042c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042a6:	4b48      	ldr	r3, [pc, #288]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042b6:	e006      	b.n	80042c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      break;
 80042bc:	e004      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042be:	bf00      	nop
 80042c0:	e002      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10d      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042ce:	4b3e      	ldr	r3, [pc, #248]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6819      	ldr	r1, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	3b01      	subs	r3, #1
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	430b      	orrs	r3, r1
 80042e4:	4938      	ldr	r1, [pc, #224]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d166      	bne.n	80043be <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042f0:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a34      	ldr	r2, [pc, #208]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fc:	f7fc fce6 	bl	8000ccc <HAL_GetTick>
 8004300:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004302:	e009      	b.n	8004318 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004304:	f7fc fce2 	bl	8000ccc <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d902      	bls.n	8004318 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	73fb      	strb	r3, [r7, #15]
        break;
 8004316:	e005      	b.n	8004324 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004318:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1ef      	bne.n	8004304 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d149      	bne.n	80043be <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d110      	bne.n	8004352 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004330:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004338:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6892      	ldr	r2, [r2, #8]
 8004340:	0211      	lsls	r1, r2, #8
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68d2      	ldr	r2, [r2, #12]
 8004346:	06d2      	lsls	r2, r2, #27
 8004348:	430a      	orrs	r2, r1
 800434a:	491f      	ldr	r1, [pc, #124]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800434c:	4313      	orrs	r3, r2
 800434e:	614b      	str	r3, [r1, #20]
 8004350:	e011      	b.n	8004376 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004352:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800435a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6892      	ldr	r2, [r2, #8]
 8004362:	0211      	lsls	r1, r2, #8
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6912      	ldr	r2, [r2, #16]
 8004368:	0852      	lsrs	r2, r2, #1
 800436a:	3a01      	subs	r2, #1
 800436c:	0652      	lsls	r2, r2, #25
 800436e:	430a      	orrs	r2, r1
 8004370:	4915      	ldr	r1, [pc, #84]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004372:	4313      	orrs	r3, r2
 8004374:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800437c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004380:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004382:	f7fc fca3 	bl	8000ccc <HAL_GetTick>
 8004386:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004388:	e009      	b.n	800439e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800438a:	f7fc fc9f 	bl	8000ccc <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d902      	bls.n	800439e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	73fb      	strb	r3, [r7, #15]
          break;
 800439c:	e005      	b.n	80043aa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ef      	beq.n	800438a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	4903      	ldr	r1, [pc, #12]	; (80043c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043be:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000

080043cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e095      	b.n	800450a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d108      	bne.n	80043f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ee:	d009      	beq.n	8004404 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	61da      	str	r2, [r3, #28]
 80043f6:	e005      	b.n	8004404 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fc faf2 	bl	8000a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004444:	d902      	bls.n	800444c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	e002      	b.n	8004452 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800444c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004450:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800445a:	d007      	beq.n	800446c <HAL_SPI_Init+0xa0>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004464:	d002      	beq.n	800446c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	ea42 0103 	orr.w	r1, r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	0c1b      	lsrs	r3, r3, #16
 80044c8:	f003 0204 	and.w	r2, r3, #4
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044e8:	ea42 0103 	orr.w	r1, r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10e      	bne.n	8004554 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
    return;
 8004552:	e0ce      	b.n	80046f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_SPI_IRQHandler+0x5e>
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004564:	2b00      	cmp	r3, #0
 8004566:	d004      	beq.n	8004572 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
    return;
 8004570:	e0bf      	b.n	80046f2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <HAL_SPI_IRQHandler+0x7e>
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d105      	bne.n	8004592 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80b0 	beq.w	80046f2 <HAL_SPI_IRQHandler+0x1de>
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80aa 	beq.w	80046f2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d023      	beq.n	80045f0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d011      	beq.n	80045d8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b8:	f043 0204 	orr.w	r2, r3, #4
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	e00b      	b.n	80045f0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045d8:	2300      	movs	r3, #0
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	693b      	ldr	r3, [r7, #16]
        return;
 80045ee:	e080      	b.n	80046f2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d014      	beq.n	8004624 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fe:	f043 0201 	orr.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004632:	f043 0208 	orr.w	r2, r3, #8
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464c:	2b00      	cmp	r3, #0
 800464e:	d04f      	beq.n	80046f0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800465e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <HAL_SPI_IRQHandler+0x168>
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d034      	beq.n	80046e6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0203 	bic.w	r2, r2, #3
 800468a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	2b00      	cmp	r3, #0
 8004692:	d011      	beq.n	80046b8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <HAL_SPI_IRQHandler+0x1e4>)
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fc fc54 	bl	8000f4e <HAL_DMA_Abort_IT>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d016      	beq.n	80046ee <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	4a0c      	ldr	r2, [pc, #48]	; (80046f8 <HAL_SPI_IRQHandler+0x1e4>)
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fc fc3e 	bl	8000f4e <HAL_DMA_Abort_IT>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80046e4:	e003      	b.n	80046ee <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f808 	bl	80046fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80046ec:	e000      	b.n	80046f0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80046ee:	bf00      	nop
    return;
 80046f0:	bf00      	nop
  }
}
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	08004711 	.word	0x08004711

080046fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff ffe5 	bl	80046fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e040      	b.n	80047ce <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fc f8ad 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2224      	movs	r2, #36	; 0x24
 8004766:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fb37 	bl	8004df4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f87c 	bl	8004884 <UART_SetConfig>
 800478c:	4603      	mov	r3, r0
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e01b      	b.n	80047ce <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fbb6 	bl	8004f38 <UART_CheckIdleState>
 80047cc:	4603      	mov	r3, r0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e048      	b.n	800487a <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fc f85f 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2224      	movs	r2, #36	; 0x24
 8004802:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fae9 	bl	8004df4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f82e 	bl	8004884 <UART_SetConfig>
 8004828:	4603      	mov	r3, r0
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e023      	b.n	800487a <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004840:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004850:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0208 	orr.w	r2, r2, #8
 8004860:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fb60 	bl	8004f38 <UART_CheckIdleState>
 8004878:	4603      	mov	r3, r0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004888:	b08a      	sub	sp, #40	; 0x28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4ba4      	ldr	r3, [pc, #656]	; (8004b44 <UART_SetConfig+0x2c0>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048bc:	430b      	orrs	r3, r1
 80048be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a99      	ldr	r2, [pc, #612]	; (8004b48 <UART_SetConfig+0x2c4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	4313      	orrs	r3, r2
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004900:	430a      	orrs	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a90      	ldr	r2, [pc, #576]	; (8004b4c <UART_SetConfig+0x2c8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d126      	bne.n	800495c <UART_SetConfig+0xd8>
 800490e:	4b90      	ldr	r3, [pc, #576]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	2b03      	cmp	r3, #3
 800491a:	d81b      	bhi.n	8004954 <UART_SetConfig+0xd0>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0xa0>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004935 	.word	0x08004935
 8004928:	08004945 	.word	0x08004945
 800492c:	0800493d 	.word	0x0800493d
 8004930:	0800494d 	.word	0x0800494d
 8004934:	2301      	movs	r3, #1
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493a:	e116      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800493c:	2302      	movs	r3, #2
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004942:	e112      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004944:	2304      	movs	r3, #4
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494a:	e10e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800494c:	2308      	movs	r3, #8
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004952:	e10a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004954:	2310      	movs	r3, #16
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495a:	e106      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a7c      	ldr	r2, [pc, #496]	; (8004b54 <UART_SetConfig+0x2d0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d138      	bne.n	80049d8 <UART_SetConfig+0x154>
 8004966:	4b7a      	ldr	r3, [pc, #488]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b0c      	cmp	r3, #12
 8004972:	d82d      	bhi.n	80049d0 <UART_SetConfig+0x14c>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UART_SetConfig+0xf8>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049b1 	.word	0x080049b1
 8004980:	080049d1 	.word	0x080049d1
 8004984:	080049d1 	.word	0x080049d1
 8004988:	080049d1 	.word	0x080049d1
 800498c:	080049c1 	.word	0x080049c1
 8004990:	080049d1 	.word	0x080049d1
 8004994:	080049d1 	.word	0x080049d1
 8004998:	080049d1 	.word	0x080049d1
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049d1 	.word	0x080049d1
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049c9 	.word	0x080049c9
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b6:	e0d8      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049b8:	2302      	movs	r3, #2
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049be:	e0d4      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049c0:	2304      	movs	r3, #4
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c6:	e0d0      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049c8:	2308      	movs	r3, #8
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ce:	e0cc      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049d0:	2310      	movs	r3, #16
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d6:	e0c8      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a5e      	ldr	r2, [pc, #376]	; (8004b58 <UART_SetConfig+0x2d4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d125      	bne.n	8004a2e <UART_SetConfig+0x1aa>
 80049e2:	4b5b      	ldr	r3, [pc, #364]	; (8004b50 <UART_SetConfig+0x2cc>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049ec:	2b30      	cmp	r3, #48	; 0x30
 80049ee:	d016      	beq.n	8004a1e <UART_SetConfig+0x19a>
 80049f0:	2b30      	cmp	r3, #48	; 0x30
 80049f2:	d818      	bhi.n	8004a26 <UART_SetConfig+0x1a2>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d00a      	beq.n	8004a0e <UART_SetConfig+0x18a>
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d814      	bhi.n	8004a26 <UART_SetConfig+0x1a2>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <UART_SetConfig+0x182>
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d008      	beq.n	8004a16 <UART_SetConfig+0x192>
 8004a04:	e00f      	b.n	8004a26 <UART_SetConfig+0x1a2>
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0c:	e0ad      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a14:	e0a9      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a16:	2304      	movs	r3, #4
 8004a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1c:	e0a5      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a24:	e0a1      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a26:	2310      	movs	r3, #16
 8004a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2c:	e09d      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a4a      	ldr	r2, [pc, #296]	; (8004b5c <UART_SetConfig+0x2d8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d125      	bne.n	8004a84 <UART_SetConfig+0x200>
 8004a38:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a42:	2bc0      	cmp	r3, #192	; 0xc0
 8004a44:	d016      	beq.n	8004a74 <UART_SetConfig+0x1f0>
 8004a46:	2bc0      	cmp	r3, #192	; 0xc0
 8004a48:	d818      	bhi.n	8004a7c <UART_SetConfig+0x1f8>
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d00a      	beq.n	8004a64 <UART_SetConfig+0x1e0>
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d814      	bhi.n	8004a7c <UART_SetConfig+0x1f8>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <UART_SetConfig+0x1d8>
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d008      	beq.n	8004a6c <UART_SetConfig+0x1e8>
 8004a5a:	e00f      	b.n	8004a7c <UART_SetConfig+0x1f8>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a62:	e082      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a64:	2302      	movs	r3, #2
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6a:	e07e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e07a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a74:	2308      	movs	r3, #8
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e076      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a82:	e072      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a35      	ldr	r2, [pc, #212]	; (8004b60 <UART_SetConfig+0x2dc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d12a      	bne.n	8004ae4 <UART_SetConfig+0x260>
 8004a8e:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a9c:	d01a      	beq.n	8004ad4 <UART_SetConfig+0x250>
 8004a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa2:	d81b      	bhi.n	8004adc <UART_SetConfig+0x258>
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa8:	d00c      	beq.n	8004ac4 <UART_SetConfig+0x240>
 8004aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aae:	d815      	bhi.n	8004adc <UART_SetConfig+0x258>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <UART_SetConfig+0x238>
 8004ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab8:	d008      	beq.n	8004acc <UART_SetConfig+0x248>
 8004aba:	e00f      	b.n	8004adc <UART_SetConfig+0x258>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac2:	e052      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aca:	e04e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004acc:	2304      	movs	r3, #4
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e04a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e046      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e042      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <UART_SetConfig+0x2c4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d13a      	bne.n	8004b64 <UART_SetConfig+0x2e0>
 8004aee:	4b18      	ldr	r3, [pc, #96]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004afc:	d01a      	beq.n	8004b34 <UART_SetConfig+0x2b0>
 8004afe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b02:	d81b      	bhi.n	8004b3c <UART_SetConfig+0x2b8>
 8004b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b08:	d00c      	beq.n	8004b24 <UART_SetConfig+0x2a0>
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d815      	bhi.n	8004b3c <UART_SetConfig+0x2b8>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <UART_SetConfig+0x298>
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b18:	d008      	beq.n	8004b2c <UART_SetConfig+0x2a8>
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x2b8>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b22:	e022      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b24:	2302      	movs	r3, #2
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2a:	e01e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b32:	e01a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b34:	2308      	movs	r3, #8
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3a:	e016      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b42:	e012      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b44:	efff69f3 	.word	0xefff69f3
 8004b48:	40008000 	.word	0x40008000
 8004b4c:	40013800 	.word	0x40013800
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40004400 	.word	0x40004400
 8004b58:	40004800 	.word	0x40004800
 8004b5c:	40004c00 	.word	0x40004c00
 8004b60:	40005000 	.word	0x40005000
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a9f      	ldr	r2, [pc, #636]	; (8004dec <UART_SetConfig+0x568>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d17a      	bne.n	8004c6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d824      	bhi.n	8004bc6 <UART_SetConfig+0x342>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <UART_SetConfig+0x300>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bb7 	.word	0x08004bb7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bc7 	.word	0x08004bc7
 8004ba0:	08004bc7 	.word	0x08004bc7
 8004ba4:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7fe feaa 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004bac:	61f8      	str	r0, [r7, #28]
        break;
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b8f      	ldr	r3, [pc, #572]	; (8004df0 <UART_SetConfig+0x56c>)
 8004bb2:	61fb      	str	r3, [r7, #28]
        break;
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fe fe0b 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8004bba:	61f8      	str	r0, [r7, #28]
        break;
 8004bbc:	e009      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	61fb      	str	r3, [r7, #28]
        break;
 8004bc4:	e005      	b.n	8004bd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80fb 	beq.w	8004dd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	4413      	add	r3, r2
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d305      	bcc.n	8004bf6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d903      	bls.n	8004bfe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bfc:	e0e8      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2200      	movs	r2, #0
 8004c02:	461c      	mov	r4, r3
 8004c04:	4615      	mov	r5, r2
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	022b      	lsls	r3, r5, #8
 8004c10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c14:	0222      	lsls	r2, r4, #8
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	6849      	ldr	r1, [r1, #4]
 8004c1a:	0849      	lsrs	r1, r1, #1
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	4688      	mov	r8, r1
 8004c20:	4681      	mov	r9, r0
 8004c22:	eb12 0a08 	adds.w	sl, r2, r8
 8004c26:	eb43 0b09 	adc.w	fp, r3, r9
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c38:	4650      	mov	r0, sl
 8004c3a:	4659      	mov	r1, fp
 8004c3c:	f7fb fad6 	bl	80001ec <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4e:	d308      	bcc.n	8004c62 <UART_SetConfig+0x3de>
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c56:	d204      	bcs.n	8004c62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	e0b6      	b.n	8004dd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c68:	e0b2      	b.n	8004dd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c72:	d15e      	bne.n	8004d32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d828      	bhi.n	8004cce <UART_SetConfig+0x44a>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x400>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004ccf 	.word	0x08004ccf
 8004c94:	08004cbf 	.word	0x08004cbf
 8004c98:	08004ccf 	.word	0x08004ccf
 8004c9c:	08004ccf 	.word	0x08004ccf
 8004ca0:	08004ccf 	.word	0x08004ccf
 8004ca4:	08004cc7 	.word	0x08004cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fe fe2a 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004cac:	61f8      	str	r0, [r7, #28]
        break;
 8004cae:	e014      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7fe fe3c 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8004cb4:	61f8      	str	r0, [r7, #28]
        break;
 8004cb6:	e010      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb8:	4b4d      	ldr	r3, [pc, #308]	; (8004df0 <UART_SetConfig+0x56c>)
 8004cba:	61fb      	str	r3, [r7, #28]
        break;
 8004cbc:	e00d      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cbe:	f7fe fd87 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8004cc2:	61f8      	str	r0, [r7, #28]
        break;
 8004cc4:	e009      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cca:	61fb      	str	r3, [r7, #28]
        break;
 8004ccc:	e005      	b.n	8004cda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d077      	beq.n	8004dd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	005a      	lsls	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	441a      	add	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b0f      	cmp	r3, #15
 8004cfa:	d916      	bls.n	8004d2a <UART_SetConfig+0x4a6>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d02:	d212      	bcs.n	8004d2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f023 030f 	bic.w	r3, r3, #15
 8004d0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	8afb      	ldrh	r3, [r7, #22]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	8afa      	ldrh	r2, [r7, #22]
 8004d26:	60da      	str	r2, [r3, #12]
 8004d28:	e052      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d30:	e04e      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d827      	bhi.n	8004d8a <UART_SetConfig+0x506>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0x4bc>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d6d 	.word	0x08004d6d
 8004d48:	08004d75 	.word	0x08004d75
 8004d4c:	08004d8b 	.word	0x08004d8b
 8004d50:	08004d7b 	.word	0x08004d7b
 8004d54:	08004d8b 	.word	0x08004d8b
 8004d58:	08004d8b 	.word	0x08004d8b
 8004d5c:	08004d8b 	.word	0x08004d8b
 8004d60:	08004d83 	.word	0x08004d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d64:	f7fe fdcc 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004d68:	61f8      	str	r0, [r7, #28]
        break;
 8004d6a:	e014      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fe fdde 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8004d70:	61f8      	str	r0, [r7, #28]
        break;
 8004d72:	e010      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d74:	4b1e      	ldr	r3, [pc, #120]	; (8004df0 <UART_SetConfig+0x56c>)
 8004d76:	61fb      	str	r3, [r7, #28]
        break;
 8004d78:	e00d      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7a:	f7fe fd29 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8004d7e:	61f8      	str	r0, [r7, #28]
        break;
 8004d80:	e009      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d86:	61fb      	str	r3, [r7, #28]
        break;
 8004d88:	e005      	b.n	8004d96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d94:	bf00      	nop
    }

    if (pclk != 0U)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d019      	beq.n	8004dd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	085a      	lsrs	r2, r3, #1
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	d909      	bls.n	8004dca <UART_SetConfig+0x546>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbc:	d205      	bcs.n	8004dca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	e002      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ddc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3728      	adds	r7, #40	; 0x28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dea:	bf00      	nop
 8004dec:	40008000 	.word	0x40008000
 8004df0:	00f42400 	.word	0x00f42400

08004df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01a      	beq.n	8004f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef2:	d10a      	bne.n	8004f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b098      	sub	sp, #96	; 0x60
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f48:	f7fb fec0 	bl	8000ccc <HAL_GetTick>
 8004f4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d12e      	bne.n	8004fba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f64:	2200      	movs	r2, #0
 8004f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f88c 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d021      	beq.n	8004fba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f94:	647b      	str	r3, [r7, #68]	; 0x44
 8004f96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e6      	bne.n	8004f76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e062      	b.n	8005080 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d149      	bne.n	800505c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f856 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d03c      	beq.n	800505c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005000:	633b      	str	r3, [r7, #48]	; 0x30
 8005002:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e6      	bne.n	8004fe2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	60fb      	str	r3, [r7, #12]
   return(result);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	64bb      	str	r3, [r7, #72]	; 0x48
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3308      	adds	r3, #8
 8005032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005034:	61fa      	str	r2, [r7, #28]
 8005036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	617b      	str	r3, [r7, #20]
   return(result);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e011      	b.n	8005080 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3758      	adds	r7, #88	; 0x58
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	4613      	mov	r3, r2
 8005096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005098:	e049      	b.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d045      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a2:	f7fb fe13 	bl	8000ccc <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d302      	bcc.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e048      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d031      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d110      	bne.n	80050fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2208      	movs	r2, #8
 80050de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f838 	bl	8005156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2208      	movs	r2, #8
 80050ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e029      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005108:	d111      	bne.n	800512e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f81e 	bl	8005156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e00f      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	429a      	cmp	r2, r3
 800514a:	d0a6      	beq.n	800509a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005156:	b480      	push	{r7}
 8005158:	b095      	sub	sp, #84	; 0x54
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800517c:	643b      	str	r3, [r7, #64]	; 0x40
 800517e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800518a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e6      	bne.n	800515e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3308      	adds	r3, #8
 8005196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	61fb      	str	r3, [r7, #28]
   return(result);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3308      	adds	r3, #8
 80051ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e5      	bne.n	8005190 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d118      	bne.n	80051fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f023 0310 	bic.w	r3, r3, #16
 80051e0:	647b      	str	r3, [r7, #68]	; 0x44
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6979      	ldr	r1, [r7, #20]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	613b      	str	r3, [r7, #16]
   return(result);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e6      	bne.n	80051cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005212:	bf00      	nop
 8005214:	3754      	adds	r7, #84	; 0x54
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800521e:	b084      	sub	sp, #16
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	f107 001c 	add.w	r0, r7, #28
 800522c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f9c1 	bl	80055c4 <USB_CoreReset>
 8005242:	4603      	mov	r3, r0
 8005244:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	639a      	str	r2, [r3, #56]	; 0x38
 8005258:	e005      	b.n	8005266 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005272:	b004      	add	sp, #16
 8005274:	4770      	bx	lr

08005276 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f043 0201 	orr.w	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f023 0201 	bic.w	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	460b      	mov	r3, r1
 80052c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d115      	bne.n	8005308 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052e8:	2001      	movs	r0, #1
 80052ea:	f7fb fcfb 	bl	8000ce4 <HAL_Delay>
      ms++;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3301      	adds	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f957 	bl	80055a8 <USB_GetMode>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d01e      	beq.n	800533e <USB_SetCurrentMode+0x84>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b31      	cmp	r3, #49	; 0x31
 8005304:	d9f0      	bls.n	80052e8 <USB_SetCurrentMode+0x2e>
 8005306:	e01a      	b.n	800533e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d115      	bne.n	800533a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800531a:	2001      	movs	r0, #1
 800531c:	f7fb fce2 	bl	8000ce4 <HAL_Delay>
      ms++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f93e 	bl	80055a8 <USB_GetMode>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <USB_SetCurrentMode+0x84>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b31      	cmp	r3, #49	; 0x31
 8005336:	d9f0      	bls.n	800531a <USB_SetCurrentMode+0x60>
 8005338:	e001      	b.n	800533e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e005      	b.n	800534a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b32      	cmp	r3, #50	; 0x32
 8005342:	d101      	bne.n	8005348 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3301      	adds	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4a13      	ldr	r2, [pc, #76]	; (80053b8 <USB_FlushTxFifo+0x64>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e01b      	b.n	80053ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	daf2      	bge.n	8005362 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	019b      	lsls	r3, r3, #6
 8005384:	f043 0220 	orr.w	r2, r3, #32
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3301      	adds	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <USB_FlushTxFifo+0x64>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e006      	b.n	80053ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d0f0      	beq.n	800538c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	00030d40 	.word	0x00030d40

080053bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3301      	adds	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a11      	ldr	r2, [pc, #68]	; (8005418 <USB_FlushRxFifo+0x5c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e018      	b.n	800540c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	daf2      	bge.n	80053c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2210      	movs	r2, #16
 80053ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4a08      	ldr	r2, [pc, #32]	; (8005418 <USB_FlushRxFifo+0x5c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e006      	b.n	800540c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b10      	cmp	r3, #16
 8005408:	d0f0      	beq.n	80053ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	00030d40 	.word	0x00030d40

0800541c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800541c:	b480      	push	{r7}
 800541e:	b089      	sub	sp, #36	; 0x24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4611      	mov	r1, r2
 8005428:	461a      	mov	r2, r3
 800542a:	460b      	mov	r3, r1
 800542c:	71fb      	strb	r3, [r7, #7]
 800542e:	4613      	mov	r3, r2
 8005430:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800543a:	88bb      	ldrh	r3, [r7, #4]
 800543c:	3303      	adds	r3, #3
 800543e:	089b      	lsrs	r3, r3, #2
 8005440:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005442:	2300      	movs	r3, #0
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	e018      	b.n	800547a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	031a      	lsls	r2, r3, #12
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4413      	add	r3, r2
 8005450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005454:	461a      	mov	r2, r3
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	3301      	adds	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	3301      	adds	r3, #1
 8005466:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	3301      	adds	r3, #1
 800546c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3301      	adds	r3, #1
 8005472:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	3301      	adds	r3, #1
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	429a      	cmp	r2, r3
 8005480:	d3e2      	bcc.n	8005448 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3724      	adds	r7, #36	; 0x24
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005490:	b480      	push	{r7}
 8005492:	b08b      	sub	sp, #44	; 0x2c
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	4613      	mov	r3, r2
 800549c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	089b      	lsrs	r3, r3, #2
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	623b      	str	r3, [r7, #32]
 80054ba:	e014      	b.n	80054e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	3301      	adds	r3, #1
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	3301      	adds	r3, #1
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	3301      	adds	r3, #1
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	3301      	adds	r3, #1
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	3301      	adds	r3, #1
 80054e4:	623b      	str	r3, [r7, #32]
 80054e6:	6a3a      	ldr	r2, [r7, #32]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d3e6      	bcc.n	80054bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054ee:	8bfb      	ldrh	r3, [r7, #30]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01e      	beq.n	8005532 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054fe:	461a      	mov	r2, r3
 8005500:	f107 0310 	add.w	r3, r7, #16
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	b2da      	uxtb	r2, r3
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	701a      	strb	r2, [r3, #0]
      i++;
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	3301      	adds	r3, #1
 800551e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	3301      	adds	r3, #1
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005526:	8bfb      	ldrh	r3, [r7, #30]
 8005528:	3b01      	subs	r3, #1
 800552a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800552c:	8bfb      	ldrh	r3, [r7, #30]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1ea      	bne.n	8005508 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005534:	4618      	mov	r0, r3
 8005536:	372c      	adds	r7, #44	; 0x2c
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4013      	ands	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005558:	68fb      	ldr	r3, [r7, #12]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	4013      	ands	r3, r2
 8005598:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800559a:	68bb      	ldr	r3, [r7, #8]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	f003 0301 	and.w	r3, r3, #1
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3301      	adds	r3, #1
 80055d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a13      	ldr	r2, [pc, #76]	; (8005628 <USB_CoreReset+0x64>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e01b      	b.n	800561a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	daf2      	bge.n	80055d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f043 0201 	orr.w	r2, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3301      	adds	r3, #1
 80055fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <USB_CoreReset+0x64>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d901      	bls.n	800560c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e006      	b.n	800561a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b01      	cmp	r3, #1
 8005616:	d0f0      	beq.n	80055fa <USB_CoreReset+0x36>

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	00030d40 	.word	0x00030d40

0800562c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800562c:	b084      	sub	sp, #16
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800563a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800564c:	461a      	mov	r2, r3
 800564e:	2300      	movs	r3, #0
 8005650:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005678:	f023 0304 	bic.w	r3, r3, #4
 800567c:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800567e:	2110      	movs	r1, #16
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff fe67 	bl	8005354 <USB_FlushTxFifo>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fe93 	bl	80053bc <USB_FlushRxFifo>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	e015      	b.n	80056d2 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	461a      	mov	r2, r3
 80056b4:	f04f 33ff 	mov.w	r3, #4294967295
 80056b8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c6:	461a      	mov	r2, r3
 80056c8:	2300      	movs	r3, #0
 80056ca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	3301      	adds	r3, #1
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d3e5      	bcc.n	80056a6 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f04f 32ff 	mov.w	r2, #4294967295
 80056e6:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2280      	movs	r2, #128	; 0x80
 80056ec:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <USB_HostInit+0xf8>)
 80056f2:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <USB_HostInit+0xfc>)
 80056f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	f043 0210 	orr.w	r2, r3, #16
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	4b07      	ldr	r3, [pc, #28]	; (800572c <USB_HostInit+0x100>)
 800570e:	4313      	orrs	r3, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005714:	7dfb      	ldrb	r3, [r7, #23]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005720:	b004      	add	sp, #16
 8005722:	4770      	bx	lr
 8005724:	00600080 	.word	0x00600080
 8005728:	004000e0 	.word	0x004000e0
 800572c:	a3200008 	.word	0xa3200008

08005730 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d107      	bne.n	8005782 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005778:	461a      	mov	r2, r3
 800577a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800577e:	6053      	str	r3, [r2, #4]
 8005780:	e00c      	b.n	800579c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d107      	bne.n	8005798 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800578e:	461a      	mov	r2, r3
 8005790:	f241 7370 	movw	r3, #6000	; 0x1770
 8005794:	6053      	str	r3, [r2, #4]
 8005796:	e001      	b.n	800579c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057ca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80057da:	2064      	movs	r0, #100	; 0x64
 80057dc:	f7fb fa82 	bl	8000ce4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ec:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80057ee:	200a      	movs	r0, #10
 80057f0:	f7fb fa78 	bl	8000ce4 <HAL_Delay>

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80057fe:	b480      	push	{r7}
 8005800:	b085      	sub	sp, #20
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	460b      	mov	r3, r1
 8005808:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005822:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <USB_DriveVbus+0x44>
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d106      	bne.n	8005842 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800583c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005840:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584c:	d109      	bne.n	8005862 <USB_DriveVbus+0x64>
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800585c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005860:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	0c5b      	lsrs	r3, r3, #17
 800588e:	f003 0303 	and.w	r3, r3, #3
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	b29b      	uxth	r3, r3
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	4608      	mov	r0, r1
 80058ca:	4611      	mov	r1, r2
 80058cc:	461a      	mov	r2, r3
 80058ce:	4603      	mov	r3, r0
 80058d0:	70fb      	strb	r3, [r7, #3]
 80058d2:	460b      	mov	r3, r1
 80058d4:	70bb      	strb	r3, [r7, #2]
 80058d6:	4613      	mov	r3, r2
 80058d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	461a      	mov	r2, r3
 80058f0:	f04f 33ff 	mov.w	r3, #4294967295
 80058f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80058f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d867      	bhi.n	80059ce <USB_HC_Init+0x10e>
 80058fe:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <USB_HC_Init+0x44>)
 8005900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005904:	08005915 	.word	0x08005915
 8005908:	08005991 	.word	0x08005991
 800590c:	08005915 	.word	0x08005915
 8005910:	08005953 	.word	0x08005953
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4413      	add	r3, r2
 800591c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005920:	461a      	mov	r2, r3
 8005922:	f240 439d 	movw	r3, #1181	; 0x49d
 8005926:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005928:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800592c:	2b00      	cmp	r3, #0
 800592e:	da51      	bge.n	80059d4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4413      	add	r3, r2
 8005938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	440a      	add	r2, r1
 8005946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800594a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005950:	e040      	b.n	80059d4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	461a      	mov	r2, r3
 8005960:	f240 639d 	movw	r3, #1693	; 0x69d
 8005964:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005966:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800596a:	2b00      	cmp	r3, #0
 800596c:	da34      	bge.n	80059d8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800596e:	78fb      	ldrb	r3, [r7, #3]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	4413      	add	r3, r2
 8005976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	78fa      	ldrb	r2, [r7, #3]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	440a      	add	r2, r1
 8005984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800598e:	e023      	b.n	80059d8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	461a      	mov	r2, r3
 800599e:	f240 2325 	movw	r3, #549	; 0x225
 80059a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80059a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	da17      	bge.n	80059dc <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	78fa      	ldrb	r2, [r7, #3]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80059ca:	60d3      	str	r3, [r2, #12]
      }
      break;
 80059cc:	e006      	b.n	80059dc <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	77fb      	strb	r3, [r7, #31]
      break;
 80059d2:	e004      	b.n	80059de <USB_HC_Init+0x11e>
      break;
 80059d4:	bf00      	nop
 80059d6:	e002      	b.n	80059de <USB_HC_Init+0x11e>
      break;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <USB_HC_Init+0x11e>
      break;
 80059dc:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f8:	f043 0302 	orr.w	r3, r3, #2
 80059fc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a12:	6939      	ldr	r1, [r7, #16]
 8005a14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005a28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	da03      	bge.n	8005a38 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	e001      	b.n	8005a3c <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff ff17 	bl	8005870 <USB_GetHostSpeed>
 8005a42:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005a44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d106      	bne.n	8005a5a <USB_HC_Init+0x19a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d003      	beq.n	8005a5a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e001      	b.n	8005a5e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a5e:	787b      	ldrb	r3, [r7, #1]
 8005a60:	059b      	lsls	r3, r3, #22
 8005a62:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a66:	78bb      	ldrb	r3, [r7, #2]
 8005a68:	02db      	lsls	r3, r3, #11
 8005a6a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a6e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a74:	049b      	lsls	r3, r3, #18
 8005a76:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a7a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005a7c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a82:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a8c:	78fa      	ldrb	r2, [r7, #3]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a9c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005a9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d003      	beq.n	8005aae <USB_HC_Init+0x1ee>
 8005aa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d10f      	bne.n	8005ace <USB_HC_Init+0x20e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	78fa      	ldrb	r2, [r7, #3]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005acc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3720      	adds	r7, #32
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	785b      	ldrb	r3, [r3, #1]
 8005aea:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005af0:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d018      	beq.n	8005b2c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	8952      	ldrh	r2, [r2, #10]
 8005b02:	4413      	add	r3, r2
 8005b04:	3b01      	subs	r3, #1
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	8952      	ldrh	r2, [r2, #10]
 8005b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b0e:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005b10:	8bfa      	ldrh	r2, [r7, #30]
 8005b12:	8a7b      	ldrh	r3, [r7, #18]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d90b      	bls.n	8005b30 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8005b18:	8a7b      	ldrh	r3, [r7, #18]
 8005b1a:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b1c:	8bfb      	ldrh	r3, [r7, #30]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	8952      	ldrh	r2, [r2, #10]
 8005b22:	fb03 f202 	mul.w	r2, r3, r2
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	615a      	str	r2, [r3, #20]
 8005b2a:	e001      	b.n	8005b30 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	78db      	ldrb	r3, [r3, #3]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b38:	8bfb      	ldrh	r3, [r7, #30]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	8952      	ldrh	r2, [r2, #10]
 8005b3e:	fb03 f202 	mul.w	r2, r3, r2
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	615a      	str	r2, [r3, #20]
 8005b46:	e003      	b.n	8005b50 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	699a      	ldr	r2, [r3, #24]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	615a      	str	r2, [r3, #20]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b58:	8bfb      	ldrh	r3, [r7, #30]
 8005b5a:	04d9      	lsls	r1, r3, #19
 8005b5c:	4b59      	ldr	r3, [pc, #356]	; (8005cc4 <USB_HC_StartXfer+0x1ec>)
 8005b5e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b60:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	7b1b      	ldrb	r3, [r3, #12]
 8005b66:	075b      	lsls	r3, r3, #29
 8005b68:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b6c:	6979      	ldr	r1, [r7, #20]
 8005b6e:	0148      	lsls	r0, r1, #5
 8005b70:	69b9      	ldr	r1, [r7, #24]
 8005b72:	4401      	add	r1, r0
 8005b74:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b7a:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bf0c      	ite	eq
 8005b8c:	2301      	moveq	r3, #1
 8005b8e:	2300      	movne	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bb2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	7c7b      	ldrb	r3, [r7, #17]
 8005bc4:	075b      	lsls	r3, r3, #29
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	0148      	lsls	r0, r1, #5
 8005bca:	69b9      	ldr	r1, [r7, #24]
 8005bcc:	4401      	add	r1, r0
 8005bce:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bec:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	78db      	ldrb	r3, [r3, #3]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	e003      	b.n	8005c08 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c06:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c0e:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	78db      	ldrb	r3, [r3, #3]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d147      	bne.n	8005cba <USB_HC_StartXfer+0x1e2>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d043      	beq.n	8005cba <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	7a1b      	ldrb	r3, [r3, #8]
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d830      	bhi.n	8005c9c <USB_HC_StartXfer+0x1c4>
 8005c3a:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <USB_HC_StartXfer+0x168>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005c51 	.word	0x08005c51
 8005c44:	08005c75 	.word	0x08005c75
 8005c48:	08005c51 	.word	0x08005c51
 8005c4c:	08005c75 	.word	0x08005c75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	3303      	adds	r3, #3
 8005c56:	089b      	lsrs	r3, r3, #2
 8005c58:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c5a:	89fa      	ldrh	r2, [r7, #14]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d91c      	bls.n	8005ca0 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f043 0220 	orr.w	r2, r3, #32
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c72:	e015      	b.n	8005ca0 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	3303      	adds	r3, #3
 8005c7a:	089b      	lsrs	r3, r3, #2
 8005c7c:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c7e:	89fa      	ldrh	r2, [r7, #14]
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d90a      	bls.n	8005ca4 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c9a:	e003      	b.n	8005ca4 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8005c9c:	bf00      	nop
 8005c9e:	e002      	b.n	8005ca6 <USB_HC_StartXfer+0x1ce>
        break;
 8005ca0:	bf00      	nop
 8005ca2:	e000      	b.n	8005ca6 <USB_HC_StartXfer+0x1ce>
        break;
 8005ca4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6919      	ldr	r1, [r3, #16]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	785a      	ldrb	r2, [r3, #1]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fbb1 	bl	800541c <USB_WritePacket>
  }

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	1ff80000 	.word	0x1ff80000

08005cc8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	b29b      	uxth	r3, r3
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b089      	sub	sp, #36	; 0x24
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	0c9b      	lsrs	r3, r3, #18
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	0fdb      	lsrs	r3, r3, #31
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	0fdb      	lsrs	r3, r3, #31
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d10d      	bne.n	8005d6c <USB_HC_Halt+0x82>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <USB_HC_Halt+0x82>
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d002      	beq.n	8005d68 <USB_HC_Halt+0x7e>
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d101      	bne.n	8005d6c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e0d8      	b.n	8005f1e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <USB_HC_Halt+0x8e>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d173      	bne.n	8005e60 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d14a      	bne.n	8005e3a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d133      	bne.n	8005e18 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dfc:	d82e      	bhi.n	8005e5c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e14:	d0ec      	beq.n	8005df0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e16:	e081      	b.n	8005f1c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e36:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e38:	e070      	b.n	8005f1c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e5a:	e05f      	b.n	8005f1c <USB_HC_Halt+0x232>
            break;
 8005e5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e5e:	e05d      	b.n	8005f1c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d133      	bne.n	8005ef8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ece:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005edc:	d81d      	bhi.n	8005f1a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef4:	d0ec      	beq.n	8005ed0 <USB_HC_Halt+0x1e6>
 8005ef6:	e011      	b.n	8005f1c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	e000      	b.n	8005f1c <USB_HC_Halt+0x232>
          break;
 8005f1a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3724      	adds	r7, #36	; 0x24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b088      	sub	sp, #32
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff f9aa 	bl	8005298 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f44:	2110      	movs	r1, #16
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff fa04 	bl	8005354 <USB_FlushTxFifo>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fa30 	bl	80053bc <USB_FlushRxFifo>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005f66:	2300      	movs	r3, #0
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	e01f      	b.n	8005fac <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f82:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f8a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f92:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b0f      	cmp	r3, #15
 8005fb0:	d9dc      	bls.n	8005f6c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	e034      	b.n	8006022 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fce:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fd6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fde:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	461a      	mov	r2, r3
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ffe:	d80c      	bhi.n	800601a <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4413      	add	r3, r2
 8006008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006016:	d0ec      	beq.n	8005ff2 <USB_StopHost+0xc8>
 8006018:	e000      	b.n	800601c <USB_StopHost+0xf2>
        break;
 800601a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	3301      	adds	r3, #1
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b0f      	cmp	r3, #15
 8006026:	d9c7      	bls.n	8005fb8 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800602e:	461a      	mov	r2, r3
 8006030:	f04f 33ff 	mov.w	r3, #4294967295
 8006034:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f04f 32ff 	mov.w	r2, #4294967295
 800603c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff f919 	bl	8005276 <USB_EnableGlobalInt>

  return ret;
 8006044:	7ffb      	ldrb	r3, [r7, #31]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800604e:	b590      	push	{r4, r7, lr}
 8006050:	b08b      	sub	sp, #44	; 0x2c
 8006052:	af04      	add	r7, sp, #16
 8006054:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 800605e:	2300      	movs	r3, #0
 8006060:	2201      	movs	r2, #1
 8006062:	2101      	movs	r1, #1
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 ffbe 	bl	8007fe6 <USBH_FindInterface>
 800606a:	4603      	mov	r3, r0
 800606c:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 800606e:	7c7b      	ldrb	r3, [r7, #17]
 8006070:	2bff      	cmp	r3, #255	; 0xff
 8006072:	d101      	bne.n	8006078 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006074:	2302      	movs	r3, #2
 8006076:	e1a5      	b.n	80063c4 <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 800607e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8006082:	f003 ff0d 	bl	8009ea0 <malloc>
 8006086:	4603      	mov	r3, r0
 8006088:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 800609a:	2302      	movs	r3, #2
 800609c:	e192      	b.n	80063c4 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  (void)USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 800609e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80060a2:	2100      	movs	r1, #0
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f003 ffb7 	bl	800a018 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fc0f 	bl	80068ce <USBH_AUDIO_FindAudioStreamingIN>
 80060b0:	4603      	mov	r3, r0
 80060b2:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fcc9 	bl	8006a4c <USBH_AUDIO_FindAudioStreamingOUT>
 80060ba:	4603      	mov	r3, r0
 80060bc:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 80060be:	7afb      	ldrb	r3, [r7, #11]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d104      	bne.n	80060ce <USBH_AUDIO_InterfaceInit+0x80>
 80060c4:	7abb      	ldrb	r3, [r7, #10]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d101      	bne.n	80060ce <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060ca:	2302      	movs	r3, #2
 80060cc:	e17a      	b.n	80063c4 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80060ce:	2300      	movs	r3, #0
 80060d0:	75fb      	strb	r3, [r7, #23]
 80060d2:	e0c6      	b.n	8006262 <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 80060d4:	7dfa      	ldrb	r2, [r7, #23]
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	440b      	add	r3, r1
 80060e2:	333e      	adds	r3, #62	; 0x3e
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d156      	bne.n	8006198 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 80060ea:	7dfa      	ldrb	r2, [r7, #23]
 80060ec:	68f9      	ldr	r1, [r7, #12]
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	440b      	add	r3, r1
 80060f8:	333a      	adds	r3, #58	; 0x3a
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	8aba      	ldrh	r2, [r7, #20]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d24a      	bcs.n	8006198 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8006102:	7dfa      	ldrb	r2, [r7, #23]
 8006104:	68f9      	ldr	r1, [r7, #12]
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	440b      	add	r3, r1
 8006110:	333a      	adds	r3, #58	; 0x3a
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8006116:	7dfa      	ldrb	r2, [r7, #23]
 8006118:	68f9      	ldr	r1, [r7, #12]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	440b      	add	r3, r1
 8006124:	333d      	adds	r3, #61	; 0x3d
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 800612e:	7dfa      	ldrb	r2, [r7, #23]
 8006130:	68f9      	ldr	r1, [r7, #12]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	440b      	add	r3, r1
 800613c:	333c      	adds	r3, #60	; 0x3c
 800613e:	781a      	ldrb	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 8006146:	7dfa      	ldrb	r2, [r7, #23]
 8006148:	68f9      	ldr	r1, [r7, #12]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	440b      	add	r3, r1
 8006154:	3338      	adds	r3, #56	; 0x38
 8006156:	781a      	ldrb	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 800615e:	7dfa      	ldrb	r2, [r7, #23]
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	440b      	add	r3, r1
 800616c:	333a      	adds	r3, #58	; 0x3a
 800616e:	881a      	ldrh	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8006176:	7dfa      	ldrb	r2, [r7, #23]
 8006178:	68f9      	ldr	r1, [r7, #12]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	440b      	add	r3, r1
 8006184:	3340      	adds	r3, #64	; 0x40
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 8006198:	7dfa      	ldrb	r2, [r7, #23]
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	440b      	add	r3, r1
 80061a6:	330c      	adds	r3, #12
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d156      	bne.n	800625c <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 80061ae:	7dfa      	ldrb	r2, [r7, #23]
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	440b      	add	r3, r1
 80061bc:	3308      	adds	r3, #8
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	8a7a      	ldrh	r2, [r7, #18]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d24a      	bcs.n	800625c <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 80061c6:	7dfa      	ldrb	r2, [r7, #23]
 80061c8:	68f9      	ldr	r1, [r7, #12]
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	440b      	add	r3, r1
 80061d4:	3308      	adds	r3, #8
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 80061da:	7dfa      	ldrb	r2, [r7, #23]
 80061dc:	68f9      	ldr	r1, [r7, #12]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	440b      	add	r3, r1
 80061e8:	330b      	adds	r3, #11
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 80061f2:	7dfa      	ldrb	r2, [r7, #23]
 80061f4:	68f9      	ldr	r1, [r7, #12]
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	440b      	add	r3, r1
 8006200:	330a      	adds	r3, #10
 8006202:	781a      	ldrb	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 800620a:	7dfa      	ldrb	r2, [r7, #23]
 800620c:	68f9      	ldr	r1, [r7, #12]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	440b      	add	r3, r1
 8006218:	3306      	adds	r3, #6
 800621a:	781a      	ldrb	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8006222:	7dfa      	ldrb	r2, [r7, #23]
 8006224:	68f9      	ldr	r1, [r7, #12]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	440b      	add	r3, r1
 8006230:	3308      	adds	r3, #8
 8006232:	881a      	ldrh	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800623a:	7dfa      	ldrb	r2, [r7, #23]
 800623c:	68f9      	ldr	r1, [r7, #12]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	440b      	add	r3, r1
 8006248:	3340      	adds	r3, #64	; 0x40
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 800625c:	7dfb      	ldrb	r3, [r7, #23]
 800625e:	3301      	adds	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
 8006262:	7dfb      	ldrb	r3, [r7, #23]
 8006264:	2b04      	cmp	r3, #4
 8006266:	f67f af35 	bls.w	80060d4 <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fcad 	bl	8006bca <USBH_AUDIO_FindHIDControl>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d103      	bne.n	800627e <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  (void)USBH_AUDIO_ParseCSDescriptors(phost);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fd25 	bl	8006cce <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800628a:	2b01      	cmp	r3, #1
 800628c:	d12e      	bne.n	80062ec <USBH_AUDIO_InterfaceInit+0x29e>
  {
    (void)USBH_AUDIO_BuildHeadphonePath(phost);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 ff66 	bl	8007160 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f003 fa6f 	bl	8009780 <USBH_AllocPipe>
 80062a2:	4603      	mov	r3, r0
 80062a4:	461a      	mov	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 80062ca:	9202      	str	r2, [sp, #8]
 80062cc:	2201      	movs	r2, #1
 80062ce:	9201      	str	r2, [sp, #4]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4623      	mov	r3, r4
 80062d4:	4602      	mov	r2, r0
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f003 fa23 	bl	8009722 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->headphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80062e2:	2200      	movs	r2, #0
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f003 fd53 	bl	8009d92 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d12e      	bne.n	8006354 <USBH_AUDIO_InterfaceInit+0x306>
  {
    (void)USBH_AUDIO_BuildMicrophonePath(phost);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 feaa 	bl	8007050 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f003 fa3b 	bl	8009780 <USBH_AllocPipe>
 800630a:	4603      	mov	r3, r0
 800630c:	461a      	mov	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 8006332:	9202      	str	r2, [sp, #8]
 8006334:	2201      	movs	r2, #1
 8006336:	9201      	str	r2, [sp, #4]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	4623      	mov	r3, r4
 800633c:	4602      	mov	r2, r0
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f003 f9ef 	bl	8009722 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->microphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800634a:	2200      	movs	r2, #0
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f003 fd1f 	bl	8009d92 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 800635a:	2b01      	cmp	r3, #1
 800635c:	d12b      	bne.n	80063b6 <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f003 fa0a 	bl	8009780 <USBH_AllocPipe>
 800636c:	4603      	mov	r3, r0
 800636e:	461a      	mov	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8006394:	9202      	str	r2, [sp, #8]
 8006396:	2203      	movs	r2, #3
 8006398:	9201      	str	r2, [sp, #4]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	4623      	mov	r3, r4
 800639e:	4602      	mov	r2, r0
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f003 f9be 	bl	8009722 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        AUDIO_Handle->control.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80063ac:	2200      	movs	r2, #0
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f003 fcee 	bl	8009d92 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd90      	pop	{r4, r7, pc}

080063cc <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d011      	beq.n	800640c <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    (void)USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f003 f9b5 	bl	8009760 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f003 f9e0 	bl	80097c4 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8006412:	2b00      	cmp	r3, #0
 8006414:	d011      	beq.n	800643a <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f003 f99e 	bl	8009760 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f003 f9c9 	bl	80097c4 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8006440:	2b00      	cmp	r3, #0
 8006442:	d011      	beq.n	8006468 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f003 f987 	bl	8009760 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f003 f9b2 	bl	80097c4 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if ((phost->pActiveClass->pData) != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00b      	beq.n	800648c <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	4618      	mov	r0, r3
 800647e:	f003 fd17 	bl	8009eb0 <free>
    phost->pActiveClass->pData = 0U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006488:	2200      	movs	r2, #0
 800648a:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 80064aa:	2301      	movs	r3, #1
 80064ac:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 80064ae:	2301      	movs	r3, #1
 80064b0:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	2b06      	cmp	r3, #6
 80064ba:	f200 80be 	bhi.w	800663a <USBH_AUDIO_ClassRequest+0x1a2>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <USBH_AUDIO_ClassRequest+0x2c>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064e1 	.word	0x080064e1
 80064c8:	08006623 	.word	0x08006623
 80064cc:	080064e1 	.word	0x080064e1
 80064d0:	08006523 	.word	0x08006523
 80064d4:	0800659b 	.word	0x0800659b
 80064d8:	080065df 	.word	0x080065df
 80064dc:	08006587 	.word	0x08006587
  {
    case AUDIO_REQ_INIT:
    case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d117      	bne.n	800651a <USBH_AUDIO_ClassRequest+0x82>
      {
        req_status = USBH_SetInterface(phost,
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80064f0:	2200      	movs	r2, #0
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f002 fb67 	bl	8008bc8 <USBH_SetInterface>
 80064fa:	4603      	mov	r3, r0
 80064fc:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d103      	bne.n	800650c <USBH_AUDIO_ClassRequest+0x74>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2204      	movs	r2, #4
 8006508:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800650a:	e098      	b.n	800663e <USBH_AUDIO_ClassRequest+0x1a6>
        else if (req_status == USBH_NOT_SUPPORTED)
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b03      	cmp	r3, #3
 8006510:	f040 8095 	bne.w	800663e <USBH_AUDIO_ClassRequest+0x1a6>
          status = USBH_FAIL;
 8006514:	2302      	movs	r3, #2
 8006516:	75fb      	strb	r3, [r7, #23]
      break;
 8006518:	e091      	b.n	800663e <USBH_AUDIO_ClassRequest+0x1a6>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2204      	movs	r2, #4
 800651e:	701a      	strb	r2, [r3, #0]
      break;
 8006520:	e08d      	b.n	800663e <USBH_AUDIO_ClassRequest+0x1a6>

    case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8006528:	2b01      	cmp	r3, #1
 800652a:	d125      	bne.n	8006578 <USBH_AUDIO_ClassRequest+0xe0>
      {
        req_status = USBH_SetInterface(phost,
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8006532:	2200      	movs	r2, #0
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f002 fb46 	bl	8008bc8 <USBH_SetInterface>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d112      	bne.n	800656c <USBH_AUDIO_ClassRequest+0xd4>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2207      	movs	r2, #7
 800654a:	701a      	strb	r2, [r3, #0]
          AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2206      	movs	r2, #6
 8006550:	705a      	strb	r2, [r3, #1]

          AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
          AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800656a:	e06a      	b.n	8006642 <USBH_AUDIO_ClassRequest+0x1aa>
        else if (req_status == USBH_NOT_SUPPORTED)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b03      	cmp	r3, #3
 8006570:	d167      	bne.n	8006642 <USBH_AUDIO_ClassRequest+0x1aa>
          status = USBH_FAIL;
 8006572:	2302      	movs	r3, #2
 8006574:	75fb      	strb	r3, [r7, #23]
      break;
 8006576:	e064      	b.n	8006642 <USBH_AUDIO_ClassRequest+0x1aa>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2207      	movs	r2, #7
 800657c:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2206      	movs	r2, #6
 8006582:	705a      	strb	r2, [r3, #1]
      break;
 8006584:	e05d      	b.n	8006642 <USBH_AUDIO_ClassRequest+0x1aa>

    case AUDIO_REQ_CS_REQUESTS:
      if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f938 	bl	80067fc <USBH_AUDIO_HandleCSRequest>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d159      	bne.n	8006646 <USBH_AUDIO_ClassRequest+0x1ae>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	2205      	movs	r2, #5
 8006596:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006598:	e055      	b.n	8006646 <USBH_AUDIO_ClassRequest+0x1ae>

    case AUDIO_REQ_SET_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d118      	bne.n	80065d6 <USBH_AUDIO_ClassRequest+0x13e>
      {
        req_status = USBH_SetInterface(phost,
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 80065b0:	461a      	mov	r2, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f002 fb08 	bl	8008bc8 <USBH_SetInterface>
 80065b8:	4603      	mov	r3, r0
 80065ba:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       AUDIO_Handle->microphone.AltSettings);

        if (req_status == USBH_OK)
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d103      	bne.n	80065ca <USBH_AUDIO_ClassRequest+0x132>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2206      	movs	r2, #6
 80065c6:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80065c8:	e03f      	b.n	800664a <USBH_AUDIO_ClassRequest+0x1b2>
        else if (req_status == USBH_NOT_SUPPORTED)
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d13c      	bne.n	800664a <USBH_AUDIO_ClassRequest+0x1b2>
          status = USBH_FAIL;
 80065d0:	2302      	movs	r3, #2
 80065d2:	75fb      	strb	r3, [r7, #23]
      break;
 80065d4:	e039      	b.n	800664a <USBH_AUDIO_ClassRequest+0x1b2>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2206      	movs	r2, #6
 80065da:	701a      	strb	r2, [r3, #0]
      break;
 80065dc:	e035      	b.n	800664a <USBH_AUDIO_ClassRequest+0x1b2>
    case AUDIO_REQ_SET_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d118      	bne.n	800661a <USBH_AUDIO_ClassRequest+0x182>
      {
        req_status = USBH_SetInterface(phost,
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 80065f4:	461a      	mov	r2, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f002 fae6 	bl	8008bc8 <USBH_SetInterface>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       AUDIO_Handle->headphone.AltSettings);

        if (req_status == USBH_OK)
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <USBH_AUDIO_ClassRequest+0x176>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2202      	movs	r2, #2
 800660a:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800660c:	e01f      	b.n	800664e <USBH_AUDIO_ClassRequest+0x1b6>
        else if (req_status == USBH_NOT_SUPPORTED)
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	2b03      	cmp	r3, #3
 8006612:	d11c      	bne.n	800664e <USBH_AUDIO_ClassRequest+0x1b6>
          status = USBH_FAIL;
 8006614:	2302      	movs	r3, #2
 8006616:	75fb      	strb	r3, [r7, #23]
      break;
 8006618:	e019      	b.n	800664e <USBH_AUDIO_ClassRequest+0x1b6>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2202      	movs	r2, #2
 800661e:	701a      	strb	r2, [r3, #0]
      break;
 8006620:	e015      	b.n	800664e <USBH_AUDIO_ClassRequest+0x1b6>
    case AUDIO_REQ_IDLE:
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2201      	movs	r2, #1
 8006626:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800662e:	2102      	movs	r1, #2
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	4798      	blx	r3
      status  = USBH_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006638:	e00a      	b.n	8006650 <USBH_AUDIO_ClassRequest+0x1b8>

    default:
      break;
 800663a:	bf00      	nop
 800663c:	e008      	b.n	8006650 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 800663e:	bf00      	nop
 8006640:	e006      	b.n	8006650 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8006642:	bf00      	nop
 8006644:	e004      	b.n	8006650 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8006646:	bf00      	nop
 8006648:	e002      	b.n	8006650 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 800664a:	bf00      	nop
 800664c:	e000      	b.n	8006650 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 800664e:	bf00      	nop
  }
  return status;
 8006650:	7dfb      	ldrb	r3, [r7, #23]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop

0800665c <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af02      	add	r7, sp, #8
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	70fb      	strb	r3, [r7, #3]
 8006668:	4613      	mov	r3, r2
 800666a:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 800667a:	2301      	movs	r3, #1
 800667c:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	785b      	ldrb	r3, [r3, #1]
 8006682:	3b04      	subs	r3, #4
 8006684:	2b04      	cmp	r3, #4
 8006686:	f200 80aa 	bhi.w	80067de <USBH_AUDIO_CSRequest+0x182>
 800668a:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <USBH_AUDIO_CSRequest+0x34>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	080066ed 	.word	0x080066ed
 8006694:	08006733 	.word	0x08006733
 8006698:	080066a5 	.word	0x080066a5
 800669c:	08006793 	.word	0x08006793
 80066a0:	080067d9 	.word	0x080067d9
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	2302      	movs	r3, #2
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	78bb      	ldrb	r3, [r7, #2]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	2302      	movs	r3, #2
 80066b0:	2106      	movs	r1, #6
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fe92 	bl	80073dc <USBH_AC_GetCur>
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	f000 808f 	beq.w	80067e2 <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2204      	movs	r2, #4
 80066c8:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80066d6:	3302      	adds	r3, #2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	021b      	lsls	r3, r3, #8
 80066dc:	b29b      	uxth	r3, r3
 80066de:	4313      	orrs	r3, r2
 80066e0:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 80066e2:	897a      	ldrh	r2, [r7, #10]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 80066ea:	e07a      	b.n	80067e2 <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	2302      	movs	r3, #2
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	78bb      	ldrb	r3, [r7, #2]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	2302      	movs	r3, #2
 80066f8:	2106      	movs	r1, #6
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 f833 	bl	8007766 <USBH_AC_GetMin>
 8006700:	4603      	mov	r3, r0
 8006702:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d06d      	beq.n	80067e6 <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2205      	movs	r2, #5
 800670e:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800671c:	3302      	adds	r3, #2
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	b29b      	uxth	r3, r3
 8006724:	4313      	orrs	r3, r2
 8006726:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8006728:	897a      	ldrh	r2, [r7, #10]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8006730:	e059      	b.n	80067e6 <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	2302      	movs	r3, #2
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	78bb      	ldrb	r3, [r7, #2]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	2302      	movs	r3, #2
 800673e:	2106      	movs	r1, #6
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fee2 	bl	800750a <USBH_AC_GetMax>
 8006746:	4603      	mov	r3, r0
 8006748:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d04c      	beq.n	80067ea <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	2207      	movs	r2, #7
 8006754:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006762:	3302      	adds	r3, #2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	b29b      	uxth	r3, r3
 800676a:	4313      	orrs	r3, r2
 800676c:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 800676e:	897a      	ldrh	r2, [r7, #10]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8006782:	429a      	cmp	r2, r3
 8006784:	d231      	bcs.n	80067ea <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800678c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 8006790:	e02b      	b.n	80067ea <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8006792:	78fa      	ldrb	r2, [r7, #3]
 8006794:	2302      	movs	r3, #2
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	78bb      	ldrb	r3, [r7, #2]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	2302      	movs	r3, #2
 800679e:	2106      	movs	r1, #6
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 ff49 	bl	8007638 <USBH_AC_GetRes>
 80067a6:	4603      	mov	r3, r0
 80067a8:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d01e      	beq.n	80067ee <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2208      	movs	r2, #8
 80067b4:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80067c2:	3302      	adds	r3, #2
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	4313      	orrs	r3, r2
 80067cc:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 80067ce:	89ba      	ldrh	r2, [r7, #12]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 80067d6:	e00a      	b.n	80067ee <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	75fb      	strb	r3, [r7, #23]
      break;
 80067dc:	e008      	b.n	80067f0 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 80067de:	bf00      	nop
 80067e0:	e006      	b.n	80067f0 <USBH_AUDIO_CSRequest+0x194>
      break;
 80067e2:	bf00      	nop
 80067e4:	e004      	b.n	80067f0 <USBH_AUDIO_CSRequest+0x194>
      break;
 80067e6:	bf00      	nop
 80067e8:	e002      	b.n	80067f0 <USBH_AUDIO_CSRequest+0x194>
      break;
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <USBH_AUDIO_CSRequest+0x194>
      break;
 80067ee:	bf00      	nop
  }
  return status;
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop

080067fc <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8006808:	2301      	movs	r3, #1
 800680a:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8006822:	461a      	mov	r2, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff ff19 	bl	800665c <USBH_AUDIO_CSRequest>
 800682a:	4603      	mov	r3, r0
 800682c:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 800682e:	7bbb      	ldrb	r3, [r7, #14]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d01c      	beq.n	800686e <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800683a:	2b01      	cmp	r3, #1
 800683c:	d10c      	bne.n	8006858 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
 8006856:	e007      	b.n	8006868 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800685e:	3b01      	subs	r3, #1
 8006860:	b2da      	uxtb	r2, r3
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2206      	movs	r2, #6
 800686c:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return status;
 800686e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006880:	2301      	movs	r3, #1
 8006882:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8006894:	2b01      	cmp	r3, #1
 8006896:	d102      	bne.n	800689e <USBH_AUDIO_Process+0x26>
  {
    (void)USBH_AUDIO_OutputStream(phost);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f8e5 	bl	8007a68 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d102      	bne.n	80068ae <USBH_AUDIO_Process+0x36>
  {
    (void)USBH_AUDIO_InputStream(phost);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 f81b 	bl	80078e4 <USBH_AUDIO_InputStream>
  }

  return status;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 80068d6:	2302      	movs	r3, #2
 80068d8:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80068e8:	2300      	movs	r3, #0
 80068ea:	73fb      	strb	r3, [r7, #15]
 80068ec:	e09e      	b.n	8006a2c <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	211a      	movs	r1, #26
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	4413      	add	r3, r2
 80068fa:	f203 3347 	addw	r3, r3, #839	; 0x347
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b01      	cmp	r3, #1
 8006902:	f040 8090 	bne.w	8006a26 <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	211a      	movs	r1, #26
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	4413      	add	r3, r2
 8006912:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006916:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006918:	2b02      	cmp	r3, #2
 800691a:	f040 8084 	bne.w	8006a26 <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	211a      	movs	r1, #26
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	4413      	add	r3, r2
 800692a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	b25b      	sxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	da77      	bge.n	8006a26 <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	211a      	movs	r1, #26
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	4413      	add	r3, r2
 8006942:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006946:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 8006948:	2b00      	cmp	r3, #0
 800694a:	d06c      	beq.n	8006a26 <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	7bba      	ldrb	r2, [r7, #14]
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	201a      	movs	r0, #26
 8006954:	fb00 f303 	mul.w	r3, r0, r3
 8006958:	440b      	add	r3, r1
 800695a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800695e:	7818      	ldrb	r0, [r3, #0]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	440b      	add	r3, r1
 800696c:	3306      	adds	r3, #6
 800696e:	4602      	mov	r2, r0
 8006970:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	7bba      	ldrb	r2, [r7, #14]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	201a      	movs	r0, #26
 800697a:	fb00 f303 	mul.w	r3, r0, r3
 800697e:	440b      	add	r3, r1
 8006980:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006984:	8818      	ldrh	r0, [r3, #0]
 8006986:	68b9      	ldr	r1, [r7, #8]
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	440b      	add	r3, r1
 8006992:	3308      	adds	r3, #8
 8006994:	4602      	mov	r2, r0
 8006996:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	7bba      	ldrb	r2, [r7, #14]
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	201a      	movs	r0, #26
 80069a0:	fb00 f303 	mul.w	r3, r0, r3
 80069a4:	440b      	add	r3, r1
 80069a6:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80069aa:	7818      	ldrb	r0, [r3, #0]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	4613      	mov	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	440b      	add	r3, r1
 80069b8:	330b      	adds	r3, #11
 80069ba:	4602      	mov	r2, r0
 80069bc:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	7bba      	ldrb	r2, [r7, #14]
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	201a      	movs	r0, #26
 80069c6:	fb00 f303 	mul.w	r3, r0, r3
 80069ca:	440b      	add	r3, r1
 80069cc:	f203 3345 	addw	r3, r3, #837	; 0x345
 80069d0:	7818      	ldrb	r0, [r3, #0]
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	440b      	add	r3, r1
 80069de:	330a      	adds	r3, #10
 80069e0:	4602      	mov	r2, r0
 80069e2:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	211a      	movs	r1, #26
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	4413      	add	r3, r2
 80069f0:	f203 3352 	addw	r3, r3, #850	; 0x352
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	7bba      	ldrb	r2, [r7, #14]
 80069f8:	b298      	uxth	r0, r3
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	4613      	mov	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	440b      	add	r3, r1
 8006a06:	330e      	adds	r3, #14
 8006a08:	4602      	mov	r2, r0
 8006a0a:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8006a0c:	7bba      	ldrb	r2, [r7, #14]
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	4613      	mov	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	440b      	add	r3, r1
 8006a1a:	330c      	adds	r3, #12
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	3301      	adds	r3, #1
 8006a24:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	73fb      	strb	r3, [r7, #15]
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	2b09      	cmp	r3, #9
 8006a30:	f67f af5d 	bls.w	80068ee <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006a3e:	7b7b      	ldrb	r3, [r7, #13]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 8006a54:	2302      	movs	r3, #2
 8006a56:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]
 8006a6a:	e09e      	b.n	8006baa <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	211a      	movs	r1, #26
 8006a72:	fb01 f303 	mul.w	r3, r1, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	f040 8090 	bne.w	8006ba4 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	211a      	movs	r1, #26
 8006a8a:	fb01 f303 	mul.w	r3, r1, r3
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006a94:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	f040 8084 	bne.w	8006ba4 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	211a      	movs	r1, #26
 8006aa2:	fb01 f303 	mul.w	r3, r1, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	b25b      	sxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	db77      	blt.n	8006ba4 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	211a      	movs	r1, #26
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ac4:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d06c      	beq.n	8006ba4 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	7bba      	ldrb	r2, [r7, #14]
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	201a      	movs	r0, #26
 8006ad2:	fb00 f303 	mul.w	r3, r0, r3
 8006ad6:	440b      	add	r3, r1
 8006ad8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006adc:	7818      	ldrb	r0, [r3, #0]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	440b      	add	r3, r1
 8006aea:	3338      	adds	r3, #56	; 0x38
 8006aec:	4602      	mov	r2, r0
 8006aee:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	7bba      	ldrb	r2, [r7, #14]
 8006af4:	6879      	ldr	r1, [r7, #4]
 8006af6:	201a      	movs	r0, #26
 8006af8:	fb00 f303 	mul.w	r3, r0, r3
 8006afc:	440b      	add	r3, r1
 8006afe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b02:	8818      	ldrh	r0, [r3, #0]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	440b      	add	r3, r1
 8006b10:	333a      	adds	r3, #58	; 0x3a
 8006b12:	4602      	mov	r2, r0
 8006b14:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	7bba      	ldrb	r2, [r7, #14]
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	201a      	movs	r0, #26
 8006b1e:	fb00 f303 	mul.w	r3, r0, r3
 8006b22:	440b      	add	r3, r1
 8006b24:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006b28:	7818      	ldrb	r0, [r3, #0]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	440b      	add	r3, r1
 8006b36:	333d      	adds	r3, #61	; 0x3d
 8006b38:	4602      	mov	r2, r0
 8006b3a:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	7bba      	ldrb	r2, [r7, #14]
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	201a      	movs	r0, #26
 8006b44:	fb00 f303 	mul.w	r3, r0, r3
 8006b48:	440b      	add	r3, r1
 8006b4a:	f203 3345 	addw	r3, r3, #837	; 0x345
 8006b4e:	7818      	ldrb	r0, [r3, #0]
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	440b      	add	r3, r1
 8006b5c:	333c      	adds	r3, #60	; 0x3c
 8006b5e:	4602      	mov	r2, r0
 8006b60:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	211a      	movs	r1, #26
 8006b68:	fb01 f303 	mul.w	r3, r1, r3
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	7bba      	ldrb	r2, [r7, #14]
 8006b76:	b298      	uxth	r0, r3
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	440b      	add	r3, r1
 8006b84:	3340      	adds	r3, #64	; 0x40
 8006b86:	4602      	mov	r2, r0
 8006b88:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 8006b8a:	7bba      	ldrb	r2, [r7, #14]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	440b      	add	r3, r1
 8006b98:	333e      	adds	r3, #62	; 0x3e
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8006b9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	73fb      	strb	r3, [r7, #15]
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	2b09      	cmp	r3, #9
 8006bae:	f67f af5d 	bls.w	8006a6c <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006bbc:	7b7b      	ldrb	r3, [r7, #13]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 8006be0:	23ff      	movs	r3, #255	; 0xff
 8006be2:	2201      	movs	r2, #1
 8006be4:	2101      	movs	r1, #1
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 f9fd 	bl	8007fe6 <USBH_FindInterface>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	2bff      	cmp	r3, #255	; 0xff
 8006bf4:	d002      	beq.n	8006bfc <USBH_AUDIO_FindHIDControl+0x32>
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b09      	cmp	r3, #9
 8006bfa:	d901      	bls.n	8006c00 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e062      	b.n	8006cc6 <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]
 8006c04:	e05b      	b.n	8006cbe <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	211a      	movs	r1, #26
 8006c0c:	fb01 f303 	mul.w	r3, r1, r3
 8006c10:	4413      	add	r3, r2
 8006c12:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d14d      	bne.n	8006cb8 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	211a      	movs	r1, #26
 8006c22:	fb01 f303 	mul.w	r3, r1, r3
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c2c:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d042      	beq.n	8006cb8 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	211a      	movs	r1, #26
 8006c38:	fb01 f303 	mul.w	r3, r1, r3
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	b25b      	sxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	da36      	bge.n	8006cb8 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	211a      	movs	r1, #26
 8006c50:	fb01 f303 	mul.w	r3, r1, r3
 8006c54:	4413      	add	r3, r2
 8006c56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c5a:	781a      	ldrb	r2, [r3, #0]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	211a      	movs	r1, #26
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c72:	881a      	ldrh	r2, [r3, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	211a      	movs	r1, #26
 8006c80:	fb01 f303 	mul.w	r3, r1, r3
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	211a      	movs	r1, #26
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006ca2:	781a      	ldrb	r2, [r3, #0]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73bb      	strb	r3, [r7, #14]
        break;
 8006cb6:	e005      	b.n	8006cc4 <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	73fb      	strb	r3, [r7, #15]
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	2b09      	cmp	r3, #9
 8006cc2:	d9a0      	bls.n	8006c06 <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b088      	sub	sp, #32
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	331c      	adds	r3, #28
 8006cf0:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 8006cf2:	2309      	movs	r3, #9
 8006cf4:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 8006d16:	e03d      	b.n	8006d94 <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d18:	f107 030c 	add.w	r3, r7, #12
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	69b8      	ldr	r0, [r7, #24]
 8006d20:	f002 fa9b 	bl	800925a <USBH_GetNextDesc>
 8006d24:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	785b      	ldrb	r3, [r3, #1]
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d002      	beq.n	8006d34 <USBH_AUDIO_ParseCSDescriptors+0x66>
 8006d2e:	2b24      	cmp	r3, #36	; 0x24
 8006d30:	d00f      	beq.n	8006d52 <USBH_AUDIO_ParseCSDescriptors+0x84>
 8006d32:	e02e      	b.n	8006d92 <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	789b      	ldrb	r3, [r3, #2]
 8006d38:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	78db      	ldrb	r3, [r3, #3]
 8006d3e:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8006d40:	7bfa      	ldrb	r2, [r7, #15]
 8006d42:	7dbb      	ldrb	r3, [r7, #22]
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 f993 	bl	8008072 <USBH_FindInterfaceIndex>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	75fb      	strb	r3, [r7, #23]
        break;
 8006d50:	e020      	b.n	8006d94 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d58:	7dba      	ldrb	r2, [r7, #22]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d81a      	bhi.n	8006d94 <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	2bff      	cmp	r3, #255	; 0xff
 8006d62:	d002      	beq.n	8006d6a <USBH_AUDIO_ParseCSDescriptors+0x9c>
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
 8006d66:	2b09      	cmp	r3, #9
 8006d68:	d902      	bls.n	8006d70 <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e00f      	b.n	8006d90 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            (void)ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	211a      	movs	r1, #26
 8006d7c:	fb01 f303 	mul.w	r3, r1, r3
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	f000 f80e 	bl	8006dac <ParseCSDescriptors>
                                     phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                                     (uint8_t *)pdesc);
          }
        }
        break;
 8006d90:	e000      	b.n	8006d94 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 8006d92:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 8006d9a:	89bb      	ldrh	r3, [r7, #12]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d8bb      	bhi.n	8006d18 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8006da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	460b      	mov	r3, r1
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8006dba:	7afb      	ldrb	r3, [r7, #11]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d163      	bne.n	8006e88 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3302      	adds	r3, #2
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	f200 8081 	bhi.w	8006ed0 <ParseCSDescriptors+0x124>
 8006dce:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <ParseCSDescriptors+0x28>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006ded 	.word	0x08006ded
 8006dd8:	08006df5 	.word	0x08006df5
 8006ddc:	08006e11 	.word	0x08006e11
 8006de0:	08006e6b 	.word	0x08006e6b
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006e2f 	.word	0x08006e2f
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
        break;
 8006df2:	e06e      	b.n	8006ed2 <ParseCSDescriptors+0x126>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	b291      	uxth	r1, r2
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	605a      	str	r2, [r3, #4]
        break;
 8006e0e:	e060      	b.n	8006ed2 <ParseCSDescriptors+0x126>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	b291      	uxth	r1, r2
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	3304      	adds	r3, #4
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	605a      	str	r2, [r3, #4]
        break;
 8006e2c:	e051      	b.n	8006ed2 <ParseCSDescriptors+0x126>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	b291      	uxth	r1, r2
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	3308      	adds	r3, #8
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	605a      	str	r2, [r3, #4]
        break;
 8006e4a:	e042      	b.n	8006ed2 <ParseCSDescriptors+0x126>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	b291      	uxth	r1, r2
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	3310      	adds	r3, #16
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	605a      	str	r2, [r3, #4]
        break;
 8006e68:	e033      	b.n	8006ed2 <ParseCSDescriptors+0x126>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	b291      	uxth	r1, r2
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	605a      	str	r2, [r3, #4]
        break;
 8006e86:	e024      	b.n	8006ed2 <ParseCSDescriptors+0x126>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8006e88:	7afb      	ldrb	r3, [r7, #11]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d121      	bne.n	8006ed2 <ParseCSDescriptors+0x126>
    {
      switch (pdesc[2])
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3302      	adds	r3, #2
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d002      	beq.n	8006e9e <ParseCSDescriptors+0xf2>
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d00a      	beq.n	8006eb2 <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 8006e9c:	e019      	b.n	8006ed2 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	330a      	adds	r3, #10
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	4413      	add	r3, r2
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	605a      	str	r2, [r3, #4]
          break;
 8006eb0:	e00f      	b.n	8006ed2 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	b291      	uxth	r1, r2
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	330a      	adds	r3, #10
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4413      	add	r3, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	609a      	str	r2, [r3, #8]
          break;
 8006ece:	e000      	b.n	8006ed2 <ParseCSDescriptors+0x126>
        break;
 8006ed0:	bf00      	nop
      }
    }
  }

  return USBH_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifier
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
 8006efa:	e01b      	b.n	8006f34 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	3322      	adds	r3, #34	; 0x22
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	791b      	ldrb	r3, [r3, #4]
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d10e      	bne.n	8006f2e <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	3322      	adds	r3, #34	; 0x22
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	78db      	ldrb	r3, [r3, #3]
 8006f1e:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	041a      	lsls	r2, r3, #16
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006f2c:	e089      	b.n	8007042 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	3301      	adds	r3, #1
 8006f32:	73fb      	strb	r3, [r7, #15]
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d3dc      	bcc.n	8006efc <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]
 8006f46:	e026      	b.n	8006f96 <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	3326      	adds	r3, #38	; 0x26
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	795b      	ldrb	r3, [r3, #5]
 8006f56:	78fa      	ldrb	r2, [r7, #3]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d009      	beq.n	8006f70 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	3326      	adds	r3, #38	; 0x26
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8006f6a:	78fa      	ldrb	r2, [r7, #3]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d10f      	bne.n	8006f90 <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	3326      	adds	r3, #38	; 0x26
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	78db      	ldrb	r3, [r3, #3]
 8006f7e:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	041b      	lsls	r3, r3, #16
 8006f84:	461a      	mov	r2, r3
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f8e:	e058      	b.n	8007042 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	3301      	adds	r3, #1
 8006f94:	73fb      	strb	r3, [r7, #15]
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d3d1      	bcc.n	8006f48 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	73fb      	strb	r3, [r7, #15]
 8006fa8:	e01c      	b.n	8006fe4 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	332a      	adds	r3, #42	; 0x2a
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	795b      	ldrb	r3, [r3, #5]
 8006fb8:	78fa      	ldrb	r2, [r7, #3]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d10f      	bne.n	8006fde <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	332a      	adds	r3, #42	; 0x2a
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	78db      	ldrb	r3, [r3, #3]
 8006fcc:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8006fdc:	e031      	b.n	8007042 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	73fb      	strb	r3, [r7, #15]
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d3db      	bcc.n	8006faa <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find Output Terminal Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
 8006ff6:	e01c      	b.n	8007032 <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	331e      	adds	r3, #30
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	79db      	ldrb	r3, [r3, #7]
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	429a      	cmp	r2, r3
 800700a:	d10f      	bne.n	800702c <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	331e      	adds	r3, #30
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	78db      	ldrb	r3, [r3, #3]
 800701a:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	041b      	lsls	r3, r3, #16
 8007020:	461a      	mov	r2, r3
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	4313      	orrs	r3, r2
 8007026:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800702a:	e00a      	b.n	8007042 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	3301      	adds	r3, #1
 8007030:	73fb      	strb	r3, [r7, #15]
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	b29a      	uxth	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 800703c:	429a      	cmp	r2, r3
 800703e:	d3db      	bcc.n	8006ff8 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
	...

08007050 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8007058:	2300      	movs	r3, #0
 800705a:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800706a:	2300      	movs	r3, #0
 800706c:	75bb      	strb	r3, [r7, #22]
 800706e:	e02c      	b.n	80070ca <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201U)
 8007070:	7dbb      	ldrb	r3, [r7, #22]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	331a      	adds	r3, #26
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	791b      	ldrb	r3, [r3, #4]
 800707e:	4619      	mov	r1, r3
 8007080:	7dbb      	ldrb	r3, [r7, #22]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	331a      	adds	r3, #26
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	795b      	ldrb	r3, [r3, #5]
 800708e:	b29b      	uxth	r3, r3
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	b29b      	uxth	r3, r3
 8007094:	430b      	orrs	r3, r1
 8007096:	f240 2201 	movw	r2, #513	; 0x201
 800709a:	4293      	cmp	r3, r2
 800709c:	d112      	bne.n	80070c4 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800709e:	7dbb      	ldrb	r3, [r7, #22]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	331a      	adds	r3, #26
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	78db      	ldrb	r3, [r3, #3]
 80070ac:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 80070ae:	7dbb      	ldrb	r3, [r7, #22]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	331a      	adds	r3, #26
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	79da      	ldrb	r2, [r3, #7]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 80070c2:	e009      	b.n	80070d8 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80070c4:	7dbb      	ldrb	r3, [r7, #22]
 80070c6:	3301      	adds	r3, #1
 80070c8:	75bb      	strb	r3, [r7, #22]
 80070ca:	7dbb      	ldrb	r3, [r7, #22]
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d3cb      	bcc.n	8007070 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff feff 	bl	8006ee0 <USBH_AUDIO_FindLinkedUnit>
 80070e2:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 80070ea:	2302      	movs	r3, #2
 80070ec:	e034      	b.n	8007158 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	0a1b      	lsrs	r3, r3, #8
 80070f6:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	0c1b      	lsrs	r3, r3, #16
 80070fc:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80070fe:	7abb      	ldrb	r3, [r7, #10]
 8007100:	3b03      	subs	r3, #3
 8007102:	2b03      	cmp	r3, #3
 8007104:	d81e      	bhi.n	8007144 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8007106:	a201      	add	r2, pc, #4	; (adr r2, 800710c <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8007108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710c:	0800713b 	.word	0x0800713b
 8007110:	08007127 	.word	0x08007127
 8007114:	08007131 	.word	0x08007131
 8007118:	0800711d 	.word	0x0800711d
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	7afa      	ldrb	r2, [r7, #11]
 8007120:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 8007124:	e011      	b.n	800714a <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	7afa      	ldrb	r2, [r7, #11]
 800712a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 800712e:	e00c      	b.n	800714a <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	7afa      	ldrb	r2, [r7, #11]
 8007134:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 8007138:	e007      	b.n	800714a <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	7afa      	ldrb	r2, [r7, #11]
 800713e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 8007142:	e002      	b.n	800714a <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 8007144:	2302      	movs	r3, #2
 8007146:	757b      	strb	r3, [r7, #21]
        break;
 8007148:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 800714a:	7abb      	ldrb	r3, [r7, #10]
 800714c:	2b03      	cmp	r3, #3
 800714e:	d002      	beq.n	8007156 <USBH_AUDIO_BuildMicrophonePath+0x106>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1c0      	bne.n	80070d8 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 8007156:	7d7b      	ldrb	r3, [r7, #21]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8007168:	2300      	movs	r3, #0
 800716a:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800717a:	2300      	movs	r3, #0
 800717c:	757b      	strb	r3, [r7, #21]
 800717e:	e02c      	b.n	80071da <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101U)
 8007180:	7d7b      	ldrb	r3, [r7, #21]
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	331a      	adds	r3, #26
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	791b      	ldrb	r3, [r3, #4]
 800718e:	4619      	mov	r1, r3
 8007190:	7d7b      	ldrb	r3, [r7, #21]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	331a      	adds	r3, #26
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	795b      	ldrb	r3, [r3, #5]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	430b      	orrs	r3, r1
 80071a6:	f240 1201 	movw	r2, #257	; 0x101
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d112      	bne.n	80071d4 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 80071ae:	7d7b      	ldrb	r3, [r7, #21]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	331a      	adds	r3, #26
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	78db      	ldrb	r3, [r3, #3]
 80071bc:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 80071be:	7d7b      	ldrb	r3, [r7, #21]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	331a      	adds	r3, #26
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	79da      	ldrb	r2, [r3, #7]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 80071d2:	e009      	b.n	80071e8 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80071d4:	7d7b      	ldrb	r3, [r7, #21]
 80071d6:	3301      	adds	r3, #1
 80071d8:	757b      	strb	r3, [r7, #21]
 80071da:	7d7b      	ldrb	r3, [r7, #21]
 80071dc:	b29a      	uxth	r2, r3
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d3cb      	bcc.n	8007180 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80071e8:	2300      	movs	r3, #0
 80071ea:	75bb      	strb	r3, [r7, #22]
 80071ec:	e011      	b.n	8007212 <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 80071ee:	7dbb      	ldrb	r3, [r7, #22]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	3317      	adds	r3, #23
 80071f4:	00db      	lsls	r3, r3, #3
 80071f6:	4413      	add	r3, r2
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	78db      	ldrb	r3, [r3, #3]
 80071fc:	7dfa      	ldrb	r2, [r7, #23]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d104      	bne.n	800720c <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	7dba      	ldrb	r2, [r7, #22]
 8007206:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 800720a:	e009      	b.n	8007220 <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 800720c:	7dbb      	ldrb	r3, [r7, #22]
 800720e:	3301      	adds	r3, #1
 8007210:	75bb      	strb	r3, [r7, #22]
 8007212:	7dbb      	ldrb	r3, [r7, #22]
 8007214:	b29a      	uxth	r2, r3
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 800721c:	429a      	cmp	r2, r3
 800721e:	d3e6      	bcc.n	80071ee <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff fe5b 	bl	8006ee0 <USBH_AUDIO_FindLinkedUnit>
 800722a:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	e053      	b.n	80072de <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	0a1b      	lsrs	r3, r3, #8
 800723e:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	3b03      	subs	r3, #3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d83c      	bhi.n	80072c8 <USBH_AUDIO_BuildHeadphonePath+0x168>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	08007283 	.word	0x08007283
 8007258:	0800726f 	.word	0x0800726f
 800725c:	08007279 	.word	0x08007279
 8007260:	08007265 	.word	0x08007265
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	7dba      	ldrb	r2, [r7, #22]
 8007268:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 800726c:	e030      	b.n	80072d0 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	7dba      	ldrb	r2, [r7, #22]
 8007272:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 8007276:	e02b      	b.n	80072d0 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	7dba      	ldrb	r2, [r7, #22]
 800727c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 8007280:	e026      	b.n	80072d0 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	7dba      	ldrb	r2, [r7, #22]
 8007286:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 800728a:	7dbb      	ldrb	r3, [r7, #22]
 800728c:	2b03      	cmp	r3, #3
 800728e:	d818      	bhi.n	80072c2 <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103U)
 8007290:	7dbb      	ldrb	r3, [r7, #22]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	331e      	adds	r3, #30
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	791b      	ldrb	r3, [r3, #4]
 800729e:	4619      	mov	r1, r3
 80072a0:	7dbb      	ldrb	r3, [r7, #22]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	331e      	adds	r3, #30
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	795b      	ldrb	r3, [r3, #5]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	430b      	orrs	r3, r1
 80072b6:	f240 1203 	movw	r2, #259	; 0x103
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d007      	beq.n	80072ce <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e00d      	b.n	80072de <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 80072c2:	2302      	movs	r3, #2
 80072c4:	753b      	strb	r3, [r7, #20]
        }
        break;
 80072c6:	e002      	b.n	80072ce <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 80072c8:	2302      	movs	r3, #2
 80072ca:	753b      	strb	r3, [r7, #20]
        break;
 80072cc:	e000      	b.n	80072d0 <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 80072ce:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 80072d0:	7afb      	ldrb	r3, [r7, #11]
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d002      	beq.n	80072dc <USBH_AUDIO_BuildHeadphonePath+0x17c>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1a1      	bne.n	8007220 <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 80072dc:	7d3b      	ldrb	r3, [r7, #20]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop

080072e8 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	461a      	mov	r2, r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	70fb      	strb	r3, [r7, #3]
 80072fa:	460b      	mov	r3, r1
 80072fc:	70bb      	strb	r3, [r7, #2]
 80072fe:	4613      	mov	r3, r2
 8007300:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	82fb      	strh	r3, [r7, #22]
 8007306:	2300      	movs	r3, #0
 8007308:	82bb      	strh	r3, [r7, #20]
 800730a:	2300      	movs	r3, #0
 800730c:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	2b02      	cmp	r3, #2
 8007320:	d002      	beq.n	8007328 <USBH_AC_SetCur+0x40>
 8007322:	2b06      	cmp	r3, #6
 8007324:	d018      	beq.n	8007358 <USBH_AC_SetCur+0x70>
 8007326:	e035      	b.n	8007394 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732c:	78db      	ldrb	r3, [r3, #3]
 800732e:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007330:	2300      	movs	r3, #0
 8007332:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007334:	7afb      	ldrb	r3, [r7, #11]
 8007336:	b29b      	uxth	r3, r3
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	b29a      	uxth	r2, r3
 800733c:	7abb      	ldrb	r3, [r7, #10]
 800733e:	b29b      	uxth	r3, r3
 8007340:	4313      	orrs	r3, r2
 8007342:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007348:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8007352:	2301      	movs	r3, #1
 8007354:	827b      	strh	r3, [r7, #18]
      break;
 8007356:	e020      	b.n	800739a <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007358:	78bb      	ldrb	r3, [r7, #2]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	3322      	adds	r3, #34	; 0x22
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	78db      	ldrb	r3, [r3, #3]
 8007366:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007368:	2300      	movs	r3, #0
 800736a:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	b29b      	uxth	r3, r3
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	b29a      	uxth	r2, r3
 8007374:	7abb      	ldrb	r3, [r7, #10]
 8007376:	b29b      	uxth	r3, r3
 8007378:	4313      	orrs	r3, r2
 800737a:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800737c:	787b      	ldrb	r3, [r7, #1]
 800737e:	b29b      	uxth	r3, r3
 8007380:	021b      	lsls	r3, r3, #8
 8007382:	b29a      	uxth	r2, r3
 8007384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007388:	b29b      	uxth	r3, r3
 800738a:	4313      	orrs	r3, r2
 800738c:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800738e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007390:	827b      	strh	r3, [r7, #18]
      break;
 8007392:	e002      	b.n	800739a <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 8007394:	2302      	movs	r3, #2
 8007396:	747b      	strb	r3, [r7, #17]
      break;
 8007398:	bf00      	nop
  }

  if (ret != USBH_OK)
 800739a:	7c7b      	ldrb	r3, [r7, #17]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 80073a0:	7c7b      	ldrb	r3, [r7, #17]
 80073a2:	e017      	b.n	80073d4 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2221      	movs	r2, #33	; 0x21
 80073a8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	8afa      	ldrh	r2, [r7, #22]
 80073b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	8aba      	ldrh	r2, [r7, #20]
 80073ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8a7a      	ldrh	r2, [r7, #18]
 80073c0:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80073c8:	8a7a      	ldrh	r2, [r7, #18]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 ff5f 	bl	8009290 <USBH_CtlReq>
 80073d2:	4603      	mov	r3, r0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	4608      	mov	r0, r1
 80073e6:	4611      	mov	r1, r2
 80073e8:	461a      	mov	r2, r3
 80073ea:	4603      	mov	r3, r0
 80073ec:	70fb      	strb	r3, [r7, #3]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70bb      	strb	r3, [r7, #2]
 80073f2:	4613      	mov	r3, r2
 80073f4:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	82fb      	strh	r3, [r7, #22]
 80073fa:	2300      	movs	r3, #0
 80073fc:	82bb      	strh	r3, [r7, #20]
 80073fe:	2300      	movs	r3, #0
 8007400:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	743b      	strb	r3, [r7, #16]
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	2b06      	cmp	r3, #6
 800741c:	d01e      	beq.n	800745c <USBH_AC_GetCur+0x80>
 800741e:	2b06      	cmp	r3, #6
 8007420:	dc4f      	bgt.n	80074c2 <USBH_AC_GetCur+0xe6>
 8007422:	2b02      	cmp	r3, #2
 8007424:	d002      	beq.n	800742c <USBH_AC_GetCur+0x50>
 8007426:	2b03      	cmp	r3, #3
 8007428:	d036      	beq.n	8007498 <USBH_AC_GetCur+0xbc>
 800742a:	e04a      	b.n	80074c2 <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007430:	78db      	ldrb	r3, [r3, #3]
 8007432:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007434:	2300      	movs	r3, #0
 8007436:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007438:	7c3b      	ldrb	r3, [r7, #16]
 800743a:	b29b      	uxth	r3, r3
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	b29a      	uxth	r2, r3
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	b29b      	uxth	r3, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800744c:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2200      	movs	r2, #0
 8007452:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8007456:	2301      	movs	r3, #1
 8007458:	827b      	strh	r3, [r7, #18]
      break;
 800745a:	e035      	b.n	80074c8 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800745c:	78bb      	ldrb	r3, [r7, #2]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	3322      	adds	r3, #34	; 0x22
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	78db      	ldrb	r3, [r3, #3]
 800746a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007470:	7c3b      	ldrb	r3, [r7, #16]
 8007472:	b29b      	uxth	r3, r3
 8007474:	021b      	lsls	r3, r3, #8
 8007476:	b29a      	uxth	r2, r3
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	b29b      	uxth	r3, r3
 800747c:	4313      	orrs	r3, r2
 800747e:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007480:	787b      	ldrb	r3, [r7, #1]
 8007482:	b29b      	uxth	r3, r3
 8007484:	021b      	lsls	r3, r3, #8
 8007486:	b29a      	uxth	r2, r3
 8007488:	f897 3020 	ldrb.w	r3, [r7, #32]
 800748c:	b29b      	uxth	r3, r3
 800748e:	4313      	orrs	r3, r2
 8007490:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007494:	827b      	strh	r3, [r7, #18]
      break;
 8007496:	e017      	b.n	80074c8 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800749e:	78db      	ldrb	r3, [r3, #3]
 80074a0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80074a6:	7c3b      	ldrb	r3, [r7, #16]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	4313      	orrs	r3, r2
 80074b4:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80074b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074ba:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 80074bc:	2301      	movs	r3, #1
 80074be:	827b      	strh	r3, [r7, #18]
      break;
 80074c0:	e002      	b.n	80074c8 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 80074c2:	2302      	movs	r3, #2
 80074c4:	747b      	strb	r3, [r7, #17]
      break;
 80074c6:	bf00      	nop
  }

  if (ret != USBH_OK)
 80074c8:	7c7b      	ldrb	r3, [r7, #17]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <USBH_AC_GetCur+0xf6>
  {
    return ret;
 80074ce:	7c7b      	ldrb	r3, [r7, #17]
 80074d0:	e017      	b.n	8007502 <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	22a1      	movs	r2, #161	; 0xa1
 80074d6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2281      	movs	r2, #129	; 0x81
 80074dc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	8afa      	ldrh	r2, [r7, #22]
 80074e2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8aba      	ldrh	r2, [r7, #20]
 80074e8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	8a7a      	ldrh	r2, [r7, #18]
 80074ee:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80074f6:	8a7a      	ldrh	r2, [r7, #18]
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 fec8 	bl	8009290 <USBH_CtlReq>
 8007500:	4603      	mov	r3, r0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	4608      	mov	r0, r1
 8007514:	4611      	mov	r1, r2
 8007516:	461a      	mov	r2, r3
 8007518:	4603      	mov	r3, r0
 800751a:	70fb      	strb	r3, [r7, #3]
 800751c:	460b      	mov	r3, r1
 800751e:	70bb      	strb	r3, [r7, #2]
 8007520:	4613      	mov	r3, r2
 8007522:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	82fb      	strh	r3, [r7, #22]
 8007528:	2300      	movs	r3, #0
 800752a:	82bb      	strh	r3, [r7, #20]
 800752c:	2300      	movs	r3, #0
 800752e:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	743b      	strb	r3, [r7, #16]
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	2b06      	cmp	r3, #6
 800754a:	d01e      	beq.n	800758a <USBH_AC_GetMax+0x80>
 800754c:	2b06      	cmp	r3, #6
 800754e:	dc4f      	bgt.n	80075f0 <USBH_AC_GetMax+0xe6>
 8007550:	2b02      	cmp	r3, #2
 8007552:	d002      	beq.n	800755a <USBH_AC_GetMax+0x50>
 8007554:	2b03      	cmp	r3, #3
 8007556:	d036      	beq.n	80075c6 <USBH_AC_GetMax+0xbc>
 8007558:	e04a      	b.n	80075f0 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755e:	78db      	ldrb	r3, [r3, #3]
 8007560:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007566:	7c3b      	ldrb	r3, [r7, #16]
 8007568:	b29b      	uxth	r3, r3
 800756a:	021b      	lsls	r3, r3, #8
 800756c:	b29a      	uxth	r2, r3
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	b29b      	uxth	r3, r3
 8007572:	4313      	orrs	r3, r2
 8007574:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800757a:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2200      	movs	r2, #0
 8007580:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8007584:	2301      	movs	r3, #1
 8007586:	827b      	strh	r3, [r7, #18]
      break;
 8007588:	e035      	b.n	80075f6 <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800758a:	78bb      	ldrb	r3, [r7, #2]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	3322      	adds	r3, #34	; 0x22
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	78db      	ldrb	r3, [r3, #3]
 8007598:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800759e:	7c3b      	ldrb	r3, [r7, #16]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	4313      	orrs	r3, r2
 80075ac:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80075ae:	787b      	ldrb	r3, [r7, #1]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	4313      	orrs	r3, r2
 80075be:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80075c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075c2:	827b      	strh	r3, [r7, #18]
      break;
 80075c4:	e017      	b.n	80075f6 <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075cc:	78db      	ldrb	r3, [r3, #3]
 80075ce:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80075d0:	2300      	movs	r3, #0
 80075d2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80075d4:	7c3b      	ldrb	r3, [r7, #16]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	b29a      	uxth	r2, r3
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	4313      	orrs	r3, r2
 80075e2:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80075e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075e8:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 80075ea:	2301      	movs	r3, #1
 80075ec:	827b      	strh	r3, [r7, #18]
      break;
 80075ee:	e002      	b.n	80075f6 <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 80075f0:	2302      	movs	r3, #2
 80075f2:	747b      	strb	r3, [r7, #17]
      break;
 80075f4:	bf00      	nop
  }

  if (ret != USBH_OK)
 80075f6:	7c7b      	ldrb	r3, [r7, #17]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 80075fc:	7c7b      	ldrb	r3, [r7, #17]
 80075fe:	e017      	b.n	8007630 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	22a1      	movs	r2, #161	; 0xa1
 8007604:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2283      	movs	r2, #131	; 0x83
 800760a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	8afa      	ldrh	r2, [r7, #22]
 8007610:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	8aba      	ldrh	r2, [r7, #20]
 8007616:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8a7a      	ldrh	r2, [r7, #18]
 800761c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007624:	8a7a      	ldrh	r2, [r7, #18]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 fe31 	bl	8009290 <USBH_CtlReq>
 800762e:	4603      	mov	r3, r0

}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	461a      	mov	r2, r3
 8007646:	4603      	mov	r3, r0
 8007648:	70fb      	strb	r3, [r7, #3]
 800764a:	460b      	mov	r3, r1
 800764c:	70bb      	strb	r3, [r7, #2]
 800764e:	4613      	mov	r3, r2
 8007650:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	82fb      	strh	r3, [r7, #22]
 8007656:	2300      	movs	r3, #0
 8007658:	82bb      	strh	r3, [r7, #20]
 800765a:	2300      	movs	r3, #0
 800765c:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	743b      	strb	r3, [r7, #16]
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	2b06      	cmp	r3, #6
 8007678:	d01e      	beq.n	80076b8 <USBH_AC_GetRes+0x80>
 800767a:	2b06      	cmp	r3, #6
 800767c:	dc4f      	bgt.n	800771e <USBH_AC_GetRes+0xe6>
 800767e:	2b02      	cmp	r3, #2
 8007680:	d002      	beq.n	8007688 <USBH_AC_GetRes+0x50>
 8007682:	2b03      	cmp	r3, #3
 8007684:	d036      	beq.n	80076f4 <USBH_AC_GetRes+0xbc>
 8007686:	e04a      	b.n	800771e <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800768c:	78db      	ldrb	r3, [r3, #3]
 800768e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007694:	7c3b      	ldrb	r3, [r7, #16]
 8007696:	b29b      	uxth	r3, r3
 8007698:	021b      	lsls	r3, r3, #8
 800769a:	b29a      	uxth	r2, r3
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	4313      	orrs	r3, r2
 80076a2:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80076a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076a8:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80076b2:	2301      	movs	r3, #1
 80076b4:	827b      	strh	r3, [r7, #18]
      break;
 80076b6:	e035      	b.n	8007724 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80076b8:	78bb      	ldrb	r3, [r7, #2]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	3322      	adds	r3, #34	; 0x22
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	78db      	ldrb	r3, [r3, #3]
 80076c6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80076cc:	7c3b      	ldrb	r3, [r7, #16]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	4313      	orrs	r3, r2
 80076da:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80076dc:	787b      	ldrb	r3, [r7, #1]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	4313      	orrs	r3, r2
 80076ec:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80076ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076f0:	827b      	strh	r3, [r7, #18]
      break;
 80076f2:	e017      	b.n	8007724 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076fa:	78db      	ldrb	r3, [r3, #3]
 80076fc:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007702:	7c3b      	ldrb	r3, [r7, #16]
 8007704:	b29b      	uxth	r3, r3
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	b29a      	uxth	r2, r3
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	b29b      	uxth	r3, r3
 800770e:	4313      	orrs	r3, r2
 8007710:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007716:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007718:	2301      	movs	r3, #1
 800771a:	827b      	strh	r3, [r7, #18]
      break;
 800771c:	e002      	b.n	8007724 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 800771e:	2302      	movs	r3, #2
 8007720:	747b      	strb	r3, [r7, #17]
      break;
 8007722:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007724:	7c7b      	ldrb	r3, [r7, #17]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <USBH_AC_GetRes+0xf6>
  {
    return ret;
 800772a:	7c7b      	ldrb	r3, [r7, #17]
 800772c:	e017      	b.n	800775e <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	22a1      	movs	r2, #161	; 0xa1
 8007732:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2284      	movs	r2, #132	; 0x84
 8007738:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	8afa      	ldrh	r2, [r7, #22]
 800773e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	8aba      	ldrh	r2, [r7, #20]
 8007744:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8a7a      	ldrh	r2, [r7, #18]
 800774a:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007752:	8a7a      	ldrh	r2, [r7, #18]
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fd9a 	bl	8009290 <USBH_CtlReq>
 800775c:	4603      	mov	r3, r0

}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b086      	sub	sp, #24
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	4608      	mov	r0, r1
 8007770:	4611      	mov	r1, r2
 8007772:	461a      	mov	r2, r3
 8007774:	4603      	mov	r3, r0
 8007776:	70fb      	strb	r3, [r7, #3]
 8007778:	460b      	mov	r3, r1
 800777a:	70bb      	strb	r3, [r7, #2]
 800777c:	4613      	mov	r3, r2
 800777e:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	82fb      	strh	r3, [r7, #22]
 8007784:	2300      	movs	r3, #0
 8007786:	82bb      	strh	r3, [r7, #20]
 8007788:	2300      	movs	r3, #0
 800778a:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	743b      	strb	r3, [r7, #16]
 8007790:	2300      	movs	r3, #0
 8007792:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	2b06      	cmp	r3, #6
 80077a6:	d01e      	beq.n	80077e6 <USBH_AC_GetMin+0x80>
 80077a8:	2b06      	cmp	r3, #6
 80077aa:	dc4f      	bgt.n	800784c <USBH_AC_GetMin+0xe6>
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d002      	beq.n	80077b6 <USBH_AC_GetMin+0x50>
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d036      	beq.n	8007822 <USBH_AC_GetMin+0xbc>
 80077b4:	e04a      	b.n	800784c <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ba:	78db      	ldrb	r3, [r3, #3]
 80077bc:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80077c2:	7c3b      	ldrb	r3, [r7, #16]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	4313      	orrs	r3, r2
 80077d0:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80077d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077d6:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80077e0:	2301      	movs	r3, #1
 80077e2:	827b      	strh	r3, [r7, #18]
      break;
 80077e4:	e035      	b.n	8007852 <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80077e6:	78bb      	ldrb	r3, [r7, #2]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	3322      	adds	r3, #34	; 0x22
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	78db      	ldrb	r3, [r3, #3]
 80077f4:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80077fa:	7c3b      	ldrb	r3, [r7, #16]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	021b      	lsls	r3, r3, #8
 8007800:	b29a      	uxth	r2, r3
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	b29b      	uxth	r3, r3
 8007806:	4313      	orrs	r3, r2
 8007808:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800780a:	787b      	ldrb	r3, [r7, #1]
 800780c:	b29b      	uxth	r3, r3
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	b29a      	uxth	r2, r3
 8007812:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007816:	b29b      	uxth	r3, r3
 8007818:	4313      	orrs	r3, r2
 800781a:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800781c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800781e:	827b      	strh	r3, [r7, #18]
      break;
 8007820:	e017      	b.n	8007852 <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007828:	78db      	ldrb	r3, [r3, #3]
 800782a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007830:	7c3b      	ldrb	r3, [r7, #16]
 8007832:	b29b      	uxth	r3, r3
 8007834:	021b      	lsls	r3, r3, #8
 8007836:	b29a      	uxth	r2, r3
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	b29b      	uxth	r3, r3
 800783c:	4313      	orrs	r3, r2
 800783e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007844:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007846:	2301      	movs	r3, #1
 8007848:	827b      	strh	r3, [r7, #18]
      break;
 800784a:	e002      	b.n	8007852 <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 800784c:	2302      	movs	r3, #2
 800784e:	747b      	strb	r3, [r7, #17]
      break;
 8007850:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007852:	7c7b      	ldrb	r3, [r7, #17]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8007858:	7c7b      	ldrb	r3, [r7, #17]
 800785a:	e017      	b.n	800788c <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	22a1      	movs	r2, #161	; 0xa1
 8007860:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2282      	movs	r2, #130	; 0x82
 8007866:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	8afa      	ldrh	r2, [r7, #22]
 800786c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	8aba      	ldrh	r2, [r7, #20]
 8007872:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	8a7a      	ldrh	r2, [r7, #18]
 8007878:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007880:	8a7a      	ldrh	r2, [r7, #18]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 fd03 	bl	8009290 <USBH_CtlReq>
 800788a:	4603      	mov	r3, r0

}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	460b      	mov	r3, r1
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 80078a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078a6:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 80078a8:	7afb      	ldrb	r3, [r7, #11]
 80078aa:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 80078ac:	2303      	movs	r3, #3
 80078ae:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2222      	movs	r2, #34	; 0x22
 80078b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8afa      	ldrh	r2, [r7, #22]
 80078c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8aba      	ldrh	r2, [r7, #20]
 80078c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8a7a      	ldrh	r2, [r7, #18]
 80078cc:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 80078ce:	8a7b      	ldrh	r3, [r7, #18]
 80078d0:	461a      	mov	r2, r3
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f001 fcdb 	bl	8009290 <USBH_CtlReq>
 80078da:	4603      	mov	r3, r0

}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]

  return status;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
	...

08007900 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007908:	2301      	movs	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	78db      	ldrb	r3, [r3, #3]
 800791e:	3b01      	subs	r3, #1
 8007920:	2b04      	cmp	r3, #4
 8007922:	f200 8090 	bhi.w	8007a46 <USBH_AUDIO_Control+0x146>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <USBH_AUDIO_Control+0x2c>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	08007941 	.word	0x08007941
 8007930:	08007995 	.word	0x08007995
 8007934:	08007a47 	.word	0x08007a47
 8007938:	08007a13 	.word	0x08007a13
 800793c:	08007a2d 	.word	0x08007a2d
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d17d      	bne.n	8007a4a <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        (void)USBH_InterruptReceiveData(phost,
 8007966:	b2da      	uxtb	r2, r3
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 fe9d 	bl	80096ae <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2202      	movs	r2, #2
 8007990:	70da      	strb	r2, [r3, #3]
      }
      break;
 8007992:	e05a      	b.n	8007a4a <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f002 f9ce 	bl	8009d3e <USBH_LL_GetURBState>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d114      	bne.n	80079d2 <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80079b4:	3302      	adds	r3, #2
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	021b      	lsls	r3, r3, #8
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4313      	orrs	r3, r2
 80079be:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 80079c0:	89fb      	ldrh	r3, [r7, #14]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f97a 	bl	8007cc0 <USBH_AUDIO_SetControlAttribute>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d03d      	beq.n	8007a4e <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d333      	bcc.n	8007a52 <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        (void)USBH_InterruptReceiveData(phost,
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 fe4f 	bl	80096ae <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

      }
      break;
 8007a10:	e01f      	b.n	8007a52 <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 8007a12:	2101      	movs	r1, #1
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f953 	bl	8007cc0 <USBH_AUDIO_SetControlAttribute>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d11a      	bne.n	8007a56 <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2201      	movs	r2, #1
 8007a24:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007a2a:	e014      	b.n	8007a56 <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8007a2c:	2102      	movs	r1, #2
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f946 	bl	8007cc0 <USBH_AUDIO_SetControlAttribute>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10f      	bne.n	8007a5a <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007a44:	e009      	b.n	8007a5a <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8007a46:	bf00      	nop
 8007a48:	e008      	b.n	8007a5c <USBH_AUDIO_Control+0x15c>
      break;
 8007a4a:	bf00      	nop
 8007a4c:	e006      	b.n	8007a5c <USBH_AUDIO_Control+0x15c>
          break;
 8007a4e:	bf00      	nop
 8007a50:	e004      	b.n	8007a5c <USBH_AUDIO_Control+0x15c>
      break;
 8007a52:	bf00      	nop
 8007a54:	e002      	b.n	8007a5c <USBH_AUDIO_Control+0x15c>
      break;
 8007a56:	bf00      	nop
 8007a58:	e000      	b.n	8007a5c <USBH_AUDIO_Control+0x15c>
      break;
 8007a5a:	bf00      	nop
  }

  return status;
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop

08007a68 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a70:	2301      	movs	r3, #1
 8007a72:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	789b      	ldrb	r3, [r3, #2]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	2b04      	cmp	r3, #4
 8007a86:	d85c      	bhi.n	8007b42 <USBH_AUDIO_OutputStream+0xda>
 8007a88:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <USBH_AUDIO_OutputStream+0x28>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007aa5 	.word	0x08007aa5
 8007a94:	08007b01 	.word	0x08007b01
 8007a98:	08007acb 	.word	0x08007acb
 8007a9c:	08007b37 	.word	0x08007b37
 8007aa0:	08007b31 	.word	0x08007b31
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	3317      	adds	r3, #23
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	79db      	ldrb	r3, [r3, #7]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d103      	bne.n	8007ac2 <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2203      	movs	r2, #3
 8007abe:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ac0:	e044      	b.n	8007b4c <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	709a      	strb	r2, [r3, #2]
      break;
 8007ac8:	e040      	b.n	8007b4c <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	3317      	adds	r3, #23
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	4413      	add	r3, r2
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	3308      	adds	r3, #8
 8007adc:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff fed3 	bl	8007894 <USBH_AUDIO_SetEndpointControls>
 8007aee:	4603      	mov	r3, r0
 8007af0:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d126      	bne.n	8007b46 <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	2205      	movs	r2, #5
 8007afc:	709a      	strb	r2, [r3, #2]
      }
      break;
 8007afe:	e022      	b.n	8007b46 <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8007b06:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7ff febe 	bl	8007894 <USBH_AUDIO_SetEndpointControls>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d113      	bne.n	8007b4a <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2205      	movs	r2, #5
 8007b26:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f96e 	bl	8007e0a <USBH_AUDIO_FrequencySet>
      }
      break;
 8007b2e:	e00c      	b.n	8007b4a <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b34:	e00a      	b.n	8007b4c <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      (void)USBH_AUDIO_Transmit(phost);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f80e 	bl	8007b58 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b40:	e004      	b.n	8007b4c <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 8007b42:	bf00      	nop
 8007b44:	e002      	b.n	8007b4c <USBH_AUDIO_OutputStream+0xe4>
      break;
 8007b46:	bf00      	nop
 8007b48:	e000      	b.n	8007b4c <USBH_AUDIO_OutputStream+0xe4>
      break;
 8007b4a:	bf00      	nop
  }

  return status;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop

08007b58 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	791b      	ldrb	r3, [r3, #4]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d002      	beq.n	8007b7c <USBH_AUDIO_Transmit+0x24>
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d033      	beq.n	8007be2 <USBH_AUDIO_Transmit+0x8a>
 8007b7a:	e096      	b.n	8007caa <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f040 8092 	bne.w	8007cb0 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	711a      	strb	r2, [r3, #4]
        (void)USBH_IsocSendData(phost,
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                                AUDIO_Handle->headphone.buf,
                                (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        (void)USBH_IsocSendData(phost,
 8007baa:	461a      	mov	r2, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 fd9a 	bl	80096ec <USBH_IsocSendData>
                                AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8007bcc:	461a      	mov	r2, r3
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007be0:	e066      	b.n	8007cb0 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f002 f8a7 	bl	8009d3e <USBH_LL_GetURBState>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d15e      	bne.n	8007cb4 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d352      	bcc.n	8007cb4 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d102      	bne.n	8007c2a <USBH_AUDIO_Transmit+0xd2>
        {
          (void)USBH_AUDIO_Control(phost);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff fe6b 	bl	8007900 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d82b      	bhi.n	8007c92 <USBH_AUDIO_Transmit+0x13a>
        {
          (void)USBH_IsocSendData(phost,
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                                  AUDIO_Handle->headphone.cbuf,
                                  (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          (void)USBH_IsocSendData(phost,
 8007c46:	461a      	mov	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f001 fd4c 	bl	80096ec <USBH_IsocSendData>
                                  AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007c60:	441a      	add	r2, r3
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007c74:	441a      	add	r2, r3
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007c88:	441a      	add	r2, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8007c90:	e010      	b.n	8007cb4 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f04f 32ff 	mov.w	r2, #4294967295
 8007c98:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2205      	movs	r2, #5
 8007ca0:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f8bb 	bl	8007e1e <USBH_AUDIO_BufferEmptyCallback>
      break;
 8007ca8:	e004      	b.n	8007cb4 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 8007caa:	2302      	movs	r3, #2
 8007cac:	73fb      	strb	r3, [r7, #15]
      break;
 8007cae:	e002      	b.n	8007cb6 <USBH_AUDIO_Transmit+0x15e>
      break;
 8007cb0:	bf00      	nop
 8007cb2:	e000      	b.n	8007cb6 <USBH_AUDIO_Transmit+0x15e>
      break;
 8007cb4:	bf00      	nop
  }
  return status;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d002      	beq.n	8007ce6 <USBH_AUDIO_SetControlAttribute+0x26>
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d00b      	beq.n	8007cfc <USBH_AUDIO_SetControlAttribute+0x3c>
 8007ce4:	e015      	b.n	8007d12 <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8007cf2:	441a      	add	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8007cfa:	e00d      	b.n	8007d18 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8007d08:	1ad2      	subs	r2, r2, r3
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8007d10:	e002      	b.n	8007d18 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 8007d12:	2302      	movs	r3, #2
 8007d14:	73fb      	strb	r3, [r7, #15]
      break;
 8007d16:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d905      	bls.n	8007d34 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d205      	bcs.n	8007d50 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f827 	bl	8007db8 <AUDIO_SetVolume>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d01e      	beq.n	8007dae <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d10e      	bne.n	8007d98 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]
 8007d96:	e007      	b.n	8007da8 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2206      	movs	r2, #6
 8007dac:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	70fb      	strb	r3, [r7, #3]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	70bb      	strb	r3, [r7, #2]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	883a      	ldrh	r2, [r7, #0]
 8007de4:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 8007de8:	78fa      	ldrb	r2, [r7, #3]
 8007dea:	2302      	movs	r3, #2
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	78bb      	ldrb	r3, [r7, #2]
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	2302      	movs	r3, #2
 8007df4:	2106      	movs	r1, #6
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7ff fa76 	bl	80072e8 <USBH_AC_SetCur>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	60f8      	str	r0, [r7, #12]
 8007e3a:	60b9      	str	r1, [r7, #8]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007e46:	2302      	movs	r3, #2
 8007e48:	e029      	b.n	8007e9e <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	79fa      	ldrb	r2, [r7, #7]
 8007e4e:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 f81f 	bl	8007ea6 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f001 fe1e 	bl	8009ad8 <USBH_LL_Init>

  return USBH_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	e00a      	b.n	8007ece <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b0f      	cmp	r3, #15
 8007ed2:	d9f1      	bls.n	8007eb8 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e009      	b.n	8007eee <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef4:	d3f1      	bcc.n	8007eda <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2240      	movs	r2, #64	; 0x40
 8007f1a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	331c      	adds	r3, #28
 8007f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f002 f863 	bl	800a018 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f002 f85a 	bl	800a018 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007f6a:	2212      	movs	r2, #18
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f002 f852 	bl	800a018 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f7a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8007f7e:	2100      	movs	r1, #0
 8007f80:	4618      	mov	r0, r3
 8007f82:	f002 f849 	bl	800a018 <memset>

  return USBH_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d017      	beq.n	8007fd4 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10f      	bne.n	8007fce <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007fb4:	1c59      	adds	r1, r3, #1
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]
 8007fcc:	e004      	b.n	8007fd8 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	73fb      	strb	r3, [r7, #15]
 8007fd2:	e001      	b.n	8007fd8 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b087      	sub	sp, #28
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	70fb      	strb	r3, [r7, #3]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70bb      	strb	r3, [r7, #2]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008004:	2300      	movs	r3, #0
 8008006:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800800e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008010:	e025      	b.n	800805e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	221a      	movs	r2, #26
 8008016:	fb02 f303 	mul.w	r3, r2, r3
 800801a:	3308      	adds	r3, #8
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4413      	add	r3, r2
 8008020:	3302      	adds	r3, #2
 8008022:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	795b      	ldrb	r3, [r3, #5]
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	429a      	cmp	r2, r3
 800802c:	d002      	beq.n	8008034 <USBH_FindInterface+0x4e>
 800802e:	78fb      	ldrb	r3, [r7, #3]
 8008030:	2bff      	cmp	r3, #255	; 0xff
 8008032:	d111      	bne.n	8008058 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008038:	78ba      	ldrb	r2, [r7, #2]
 800803a:	429a      	cmp	r2, r3
 800803c:	d002      	beq.n	8008044 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800803e:	78bb      	ldrb	r3, [r7, #2]
 8008040:	2bff      	cmp	r3, #255	; 0xff
 8008042:	d109      	bne.n	8008058 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008048:	787a      	ldrb	r2, [r7, #1]
 800804a:	429a      	cmp	r2, r3
 800804c:	d002      	beq.n	8008054 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800804e:	787b      	ldrb	r3, [r7, #1]
 8008050:	2bff      	cmp	r3, #255	; 0xff
 8008052:	d101      	bne.n	8008058 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008054:	7dfb      	ldrb	r3, [r7, #23]
 8008056:	e006      	b.n	8008066 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	3301      	adds	r3, #1
 800805c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	2b09      	cmp	r3, #9
 8008062:	d9d6      	bls.n	8008012 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008064:	23ff      	movs	r3, #255	; 0xff
}
 8008066:	4618      	mov	r0, r3
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 8008072:	b480      	push	{r7}
 8008074:	b087      	sub	sp, #28
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	460b      	mov	r3, r1
 800807c:	70fb      	strb	r3, [r7, #3]
 800807e:	4613      	mov	r3, r2
 8008080:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008090:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008092:	e017      	b.n	80080c4 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	221a      	movs	r2, #26
 8008098:	fb02 f303 	mul.w	r3, r2, r3
 800809c:	3308      	adds	r3, #8
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	4413      	add	r3, r2
 80080a2:	3302      	adds	r3, #2
 80080a4:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	789b      	ldrb	r3, [r3, #2]
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d106      	bne.n	80080be <USBH_FindInterfaceIndex+0x4c>
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	78db      	ldrb	r3, [r3, #3]
 80080b4:	78ba      	ldrb	r2, [r7, #2]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d101      	bne.n	80080be <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	e006      	b.n	80080cc <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	3301      	adds	r3, #1
 80080c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	2b09      	cmp	r3, #9
 80080c8:	d9e4      	bls.n	8008094 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 80080ca:	23ff      	movs	r3, #255	; 0xff
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	371c      	adds	r7, #28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 fd35 	bl	8009b50 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80080e6:	2101      	movs	r1, #1
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 fe3b 	bl	8009d64 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b088      	sub	sp, #32
 80080fc:	af04      	add	r7, sp, #16
 80080fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008100:	2302      	movs	r3, #2
 8008102:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b01      	cmp	r3, #1
 8008112:	d102      	bne.n	800811a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2203      	movs	r2, #3
 8008118:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b0b      	cmp	r3, #11
 8008122:	f200 81c0 	bhi.w	80084a6 <USBH_Process+0x3ae>
 8008126:	a201      	add	r2, pc, #4	; (adr r2, 800812c <USBH_Process+0x34>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	0800815d 	.word	0x0800815d
 8008130:	0800818f 	.word	0x0800818f
 8008134:	080081f7 	.word	0x080081f7
 8008138:	08008441 	.word	0x08008441
 800813c:	080084a7 	.word	0x080084a7
 8008140:	0800829b 	.word	0x0800829b
 8008144:	080083e7 	.word	0x080083e7
 8008148:	080082d1 	.word	0x080082d1
 800814c:	080082f1 	.word	0x080082f1
 8008150:	08008311 	.word	0x08008311
 8008154:	08008355 	.word	0x08008355
 8008158:	08008429 	.word	0x08008429
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 81a0 	beq.w	80084aa <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008170:	20c8      	movs	r0, #200	; 0xc8
 8008172:	f001 fe41 	bl	8009df8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 fd47 	bl	8009c0a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800818c:	e18d      	b.n	80084aa <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008194:	2b01      	cmp	r3, #1
 8008196:	d107      	bne.n	80081a8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081a6:	e18f      	b.n	80084c8 <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80081ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081b2:	d914      	bls.n	80081de <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80081ba:	3301      	adds	r3, #1
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d903      	bls.n	80081d6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	220d      	movs	r2, #13
 80081d2:	701a      	strb	r2, [r3, #0]
      break;
 80081d4:	e178      	b.n	80084c8 <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	701a      	strb	r2, [r3, #0]
      break;
 80081dc:	e174      	b.n	80084c8 <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80081e4:	f103 020a 	add.w	r2, r3, #10
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 80081ee:	200a      	movs	r0, #10
 80081f0:	f001 fe02 	bl	8009df8 <USBH_Delay>
      break;
 80081f4:	e168      	b.n	80084c8 <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d005      	beq.n	800820c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008206:	2104      	movs	r1, #4
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800820c:	2064      	movs	r0, #100	; 0x64
 800820e:	f001 fdf3 	bl	8009df8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fcd2 	bl	8009bbc <USBH_LL_GetSpeed>
 8008218:	4603      	mov	r3, r0
 800821a:	461a      	mov	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2205      	movs	r2, #5
 8008226:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008228:	2100      	movs	r1, #0
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 faa8 	bl	8009780 <USBH_AllocPipe>
 8008230:	4603      	mov	r3, r0
 8008232:	461a      	mov	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008238:	2180      	movs	r1, #128	; 0x80
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 faa0 	bl	8009780 <USBH_AllocPipe>
 8008240:	4603      	mov	r3, r0
 8008242:	461a      	mov	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7919      	ldrb	r1, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800825c:	b292      	uxth	r2, r2
 800825e:	9202      	str	r2, [sp, #8]
 8008260:	2200      	movs	r2, #0
 8008262:	9201      	str	r2, [sp, #4]
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	4603      	mov	r3, r0
 8008268:	2280      	movs	r2, #128	; 0x80
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f001 fa59 	bl	8009722 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	7959      	ldrb	r1, [r3, #5]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008284:	b292      	uxth	r2, r2
 8008286:	9202      	str	r2, [sp, #8]
 8008288:	2200      	movs	r2, #0
 800828a:	9201      	str	r2, [sp, #4]
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	4603      	mov	r3, r0
 8008290:	2200      	movs	r2, #0
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f001 fa45 	bl	8009722 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008298:	e116      	b.n	80084c8 <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f91a 	bl	80084d4 <USBH_HandleEnum>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f040 8100 	bne.w	80084ae <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d103      	bne.n	80082c8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2208      	movs	r2, #8
 80082c4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80082c6:	e0f2      	b.n	80084ae <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2207      	movs	r2, #7
 80082cc:	701a      	strb	r2, [r3, #0]
      break;
 80082ce:	e0ee      	b.n	80084ae <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 80eb 	beq.w	80084b2 <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80082e2:	2101      	movs	r1, #1
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2208      	movs	r2, #8
 80082ec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80082ee:	e0e0      	b.n	80084b2 <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fc41 	bl	8008b82 <USBH_SetCfg>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	f040 80d7 	bne.w	80084b6 <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2209      	movs	r2, #9
 800830c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800830e:	e0d2      	b.n	80084b6 <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b00      	cmp	r3, #0
 800831c:	d016      	beq.n	800834c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800831e:	2101      	movs	r1, #1
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fc78 	bl	8008c16 <USBH_SetFeature>
 8008326:	4603      	mov	r3, r0
 8008328:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d103      	bne.n	800833a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	220a      	movs	r2, #10
 8008336:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008338:	e0bf      	b.n	80084ba <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b03      	cmp	r3, #3
 8008340:	f040 80bb 	bne.w	80084ba <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	220a      	movs	r2, #10
 8008348:	701a      	strb	r2, [r3, #0]
      break;
 800834a:	e0b6      	b.n	80084ba <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	220a      	movs	r2, #10
 8008350:	701a      	strb	r2, [r3, #0]
      break;
 8008352:	e0b2      	b.n	80084ba <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 80af 	beq.w	80084be <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
 800836c:	e018      	b.n	80083a0 <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800836e:	7bfa      	ldrb	r2, [r7, #15]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8008376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837a:	791a      	ldrb	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008382:	429a      	cmp	r2, r3
 8008384:	d109      	bne.n	800839a <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008386:	7bfa      	ldrb	r2, [r7, #15]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f502 7289 	add.w	r2, r2, #274	; 0x112
 800838e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8008398:	e005      	b.n	80083a6 <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	3301      	adds	r3, #1
 800839e:	73fb      	strb	r3, [r7, #15]
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0e3      	beq.n	800836e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d016      	beq.n	80083de <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	4798      	blx	r3
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d109      	bne.n	80083d6 <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2206      	movs	r2, #6
 80083c6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80083ce:	2103      	movs	r1, #3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083d4:	e073      	b.n	80084be <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	220d      	movs	r2, #13
 80083da:	701a      	strb	r2, [r3, #0]
      break;
 80083dc:	e06f      	b.n	80084be <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	220d      	movs	r2, #13
 80083e2:	701a      	strb	r2, [r3, #0]
      break;
 80083e4:	e06b      	b.n	80084be <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d017      	beq.n	8008420 <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	4798      	blx	r3
 80083fc:	4603      	mov	r3, r0
 80083fe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	220b      	movs	r2, #11
 800840c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800840e:	e058      	b.n	80084c2 <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d154      	bne.n	80084c2 <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	220d      	movs	r2, #13
 800841c:	701a      	strb	r2, [r3, #0]
      break;
 800841e:	e050      	b.n	80084c2 <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	220d      	movs	r2, #13
 8008424:	701a      	strb	r2, [r3, #0]
      break;
 8008426:	e04c      	b.n	80084c2 <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d049      	beq.n	80084c6 <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	4798      	blx	r3
      }
      break;
 800843e:	e042      	b.n	80084c6 <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7ff fd2c 	bl	8007ea6 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d009      	beq.n	800846c <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008472:	2b00      	cmp	r3, #0
 8008474:	d005      	beq.n	8008482 <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800847c:	2105      	movs	r1, #5
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b01      	cmp	r3, #1
 800848c:	d107      	bne.n	800849e <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff fe1e 	bl	80080d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800849c:	e014      	b.n	80084c8 <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f001 fb56 	bl	8009b50 <USBH_LL_Start>
      break;
 80084a4:	e010      	b.n	80084c8 <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 80084a6:	bf00      	nop
 80084a8:	e00e      	b.n	80084c8 <USBH_Process+0x3d0>
      break;
 80084aa:	bf00      	nop
 80084ac:	e00c      	b.n	80084c8 <USBH_Process+0x3d0>
      break;
 80084ae:	bf00      	nop
 80084b0:	e00a      	b.n	80084c8 <USBH_Process+0x3d0>
    break;
 80084b2:	bf00      	nop
 80084b4:	e008      	b.n	80084c8 <USBH_Process+0x3d0>
      break;
 80084b6:	bf00      	nop
 80084b8:	e006      	b.n	80084c8 <USBH_Process+0x3d0>
      break;
 80084ba:	bf00      	nop
 80084bc:	e004      	b.n	80084c8 <USBH_Process+0x3d0>
      break;
 80084be:	bf00      	nop
 80084c0:	e002      	b.n	80084c8 <USBH_Process+0x3d0>
      break;
 80084c2:	bf00      	nop
 80084c4:	e000      	b.n	80084c8 <USBH_Process+0x3d0>
      break;
 80084c6:	bf00      	nop
  }
  return USBH_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop

080084d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af04      	add	r7, sp, #16
 80084da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80084dc:	2301      	movs	r3, #1
 80084de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80084e0:	2301      	movs	r3, #1
 80084e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	2b07      	cmp	r3, #7
 80084ea:	f200 81c1 	bhi.w	8008870 <USBH_HandleEnum+0x39c>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <USBH_HandleEnum+0x20>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008515 	.word	0x08008515
 80084f8:	080085d3 	.word	0x080085d3
 80084fc:	0800863d 	.word	0x0800863d
 8008500:	080086cb 	.word	0x080086cb
 8008504:	08008735 	.word	0x08008735
 8008508:	080087a5 	.word	0x080087a5
 800850c:	080087eb 	.word	0x080087eb
 8008510:	08008831 	.word	0x08008831
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008514:	2108      	movs	r1, #8
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa50 	bl	80089bc <USBH_Get_DevDesc>
 800851c:	4603      	mov	r3, r0
 800851e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d130      	bne.n	8008588 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	7919      	ldrb	r1, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800854a:	b292      	uxth	r2, r2
 800854c:	9202      	str	r2, [sp, #8]
 800854e:	2200      	movs	r2, #0
 8008550:	9201      	str	r2, [sp, #4]
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	4603      	mov	r3, r0
 8008556:	2280      	movs	r2, #128	; 0x80
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f001 f8e2 	bl	8009722 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	7959      	ldrb	r1, [r3, #5]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008572:	b292      	uxth	r2, r2
 8008574:	9202      	str	r2, [sp, #8]
 8008576:	2200      	movs	r2, #0
 8008578:	9201      	str	r2, [sp, #4]
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	4603      	mov	r3, r0
 800857e:	2200      	movs	r2, #0
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 f8ce 	bl	8009722 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008586:	e175      	b.n	8008874 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	2b03      	cmp	r3, #3
 800858c:	f040 8172 	bne.w	8008874 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008596:	3301      	adds	r3, #1
 8008598:	b2da      	uxtb	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d903      	bls.n	80085b2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	220d      	movs	r2, #13
 80085ae:	701a      	strb	r2, [r3, #0]
      break;
 80085b0:	e160      	b.n	8008874 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	795b      	ldrb	r3, [r3, #5]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 f903 	bl	80097c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	791b      	ldrb	r3, [r3, #4]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 f8fd 	bl	80097c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
      break;
 80085d0:	e150      	b.n	8008874 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80085d2:	2112      	movs	r1, #18
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f9f1 	bl	80089bc <USBH_Get_DevDesc>
 80085da:	4603      	mov	r3, r0
 80085dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d103      	bne.n	80085ec <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085ea:	e145      	b.n	8008878 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	f040 8142 	bne.w	8008878 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085fa:	3301      	adds	r3, #1
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800860a:	2b03      	cmp	r3, #3
 800860c:	d903      	bls.n	8008616 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	220d      	movs	r2, #13
 8008612:	701a      	strb	r2, [r3, #0]
      break;
 8008614:	e130      	b.n	8008878 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	795b      	ldrb	r3, [r3, #5]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 f8d1 	bl	80097c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	791b      	ldrb	r3, [r3, #4]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 f8cb 	bl	80097c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	701a      	strb	r2, [r3, #0]
      break;
 800863a:	e11d      	b.n	8008878 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800863c:	2101      	movs	r1, #1
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa7b 	bl	8008b3a <USBH_SetAddress>
 8008644:	4603      	mov	r3, r0
 8008646:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d132      	bne.n	80086b4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800864e:	2002      	movs	r0, #2
 8008650:	f001 fbd2 	bl	8009df8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2203      	movs	r2, #3
 8008660:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	7919      	ldrb	r1, [r3, #4]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008676:	b292      	uxth	r2, r2
 8008678:	9202      	str	r2, [sp, #8]
 800867a:	2200      	movs	r2, #0
 800867c:	9201      	str	r2, [sp, #4]
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	4603      	mov	r3, r0
 8008682:	2280      	movs	r2, #128	; 0x80
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 f84c 	bl	8009722 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	7959      	ldrb	r1, [r3, #5]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800869e:	b292      	uxth	r2, r2
 80086a0:	9202      	str	r2, [sp, #8]
 80086a2:	2200      	movs	r2, #0
 80086a4:	9201      	str	r2, [sp, #4]
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	4603      	mov	r3, r0
 80086aa:	2200      	movs	r2, #0
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f001 f838 	bl	8009722 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80086b2:	e0e3      	b.n	800887c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	f040 80e0 	bne.w	800887c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	220d      	movs	r2, #13
 80086c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	705a      	strb	r2, [r3, #1]
      break;
 80086c8:	e0d8      	b.n	800887c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80086ca:	2109      	movs	r1, #9
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f9a1 	bl	8008a14 <USBH_Get_CfgDesc>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d103      	bne.n	80086e4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2204      	movs	r2, #4
 80086e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086e2:	e0cd      	b.n	8008880 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	f040 80ca 	bne.w	8008880 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086f2:	3301      	adds	r3, #1
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008702:	2b03      	cmp	r3, #3
 8008704:	d903      	bls.n	800870e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	220d      	movs	r2, #13
 800870a:	701a      	strb	r2, [r3, #0]
      break;
 800870c:	e0b8      	b.n	8008880 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	795b      	ldrb	r3, [r3, #5]
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 f855 	bl	80097c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	791b      	ldrb	r3, [r3, #4]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 f84f 	bl	80097c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
      break;
 8008732:	e0a5      	b.n	8008880 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f969 	bl	8008a14 <USBH_Get_CfgDesc>
 8008742:	4603      	mov	r3, r0
 8008744:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d103      	bne.n	8008754 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2205      	movs	r2, #5
 8008750:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008752:	e097      	b.n	8008884 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	2b03      	cmp	r3, #3
 8008758:	f040 8094 	bne.w	8008884 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008762:	3301      	adds	r3, #1
 8008764:	b2da      	uxtb	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008772:	2b03      	cmp	r3, #3
 8008774:	d903      	bls.n	800877e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	220d      	movs	r2, #13
 800877a:	701a      	strb	r2, [r3, #0]
      break;
 800877c:	e082      	b.n	8008884 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	795b      	ldrb	r3, [r3, #5]
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 f81d 	bl	80097c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	791b      	ldrb	r3, [r3, #4]
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 f817 	bl	80097c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	701a      	strb	r2, [r3, #0]
      break;
 80087a2:	e06f      	b.n	8008884 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d019      	beq.n	80087e2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087ba:	23ff      	movs	r3, #255	; 0xff
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f953 	bl	8008a68 <USBH_Get_StringDesc>
 80087c2:	4603      	mov	r3, r0
 80087c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d103      	bne.n	80087d4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2206      	movs	r2, #6
 80087d0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80087d2:	e059      	b.n	8008888 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d156      	bne.n	8008888 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2206      	movs	r2, #6
 80087de:	705a      	strb	r2, [r3, #1]
      break;
 80087e0:	e052      	b.n	8008888 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2206      	movs	r2, #6
 80087e6:	705a      	strb	r2, [r3, #1]
      break;
 80087e8:	e04e      	b.n	8008888 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d019      	beq.n	8008828 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008800:	23ff      	movs	r3, #255	; 0xff
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f930 	bl	8008a68 <USBH_Get_StringDesc>
 8008808:	4603      	mov	r3, r0
 800880a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2207      	movs	r2, #7
 8008816:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008818:	e038      	b.n	800888c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2b03      	cmp	r3, #3
 800881e:	d135      	bne.n	800888c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2207      	movs	r2, #7
 8008824:	705a      	strb	r2, [r3, #1]
      break;
 8008826:	e031      	b.n	800888c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2207      	movs	r2, #7
 800882c:	705a      	strb	r2, [r3, #1]
      break;
 800882e:	e02d      	b.n	800888c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008836:	2b00      	cmp	r3, #0
 8008838:	d017      	beq.n	800886a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008846:	23ff      	movs	r3, #255	; 0xff
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f90d 	bl	8008a68 <USBH_Get_StringDesc>
 800884e:	4603      	mov	r3, r0
 8008850:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d102      	bne.n	800885e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800885c:	e018      	b.n	8008890 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	2b03      	cmp	r3, #3
 8008862:	d115      	bne.n	8008890 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
      break;
 8008868:	e012      	b.n	8008890 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	73fb      	strb	r3, [r7, #15]
      break;
 800886e:	e00f      	b.n	8008890 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008870:	bf00      	nop
 8008872:	e00e      	b.n	8008892 <USBH_HandleEnum+0x3be>
      break;
 8008874:	bf00      	nop
 8008876:	e00c      	b.n	8008892 <USBH_HandleEnum+0x3be>
      break;
 8008878:	bf00      	nop
 800887a:	e00a      	b.n	8008892 <USBH_HandleEnum+0x3be>
      break;
 800887c:	bf00      	nop
 800887e:	e008      	b.n	8008892 <USBH_HandleEnum+0x3be>
      break;
 8008880:	bf00      	nop
 8008882:	e006      	b.n	8008892 <USBH_HandleEnum+0x3be>
      break;
 8008884:	bf00      	nop
 8008886:	e004      	b.n	8008892 <USBH_HandleEnum+0x3be>
      break;
 8008888:	bf00      	nop
 800888a:	e002      	b.n	8008892 <USBH_HandleEnum+0x3be>
      break;
 800888c:	bf00      	nop
 800888e:	e000      	b.n	8008892 <USBH_HandleEnum+0x3be>
      break;
 8008890:	bf00      	nop
  }
  return Status;
 8008892:	7bfb      	ldrb	r3, [r7, #15]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 80088ae:	bf00      	nop
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f804 	bl	80088de <USBH_HandleSof>
}
 80088d6:	bf00      	nop
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b082      	sub	sp, #8
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b0b      	cmp	r3, #11
 80088ee:	d10a      	bne.n	8008906 <USBH_HandleSof+0x28>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	4798      	blx	r3
  }
}
 8008906:	bf00      	nop
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800891e:	bf00      	nop
}
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800893a:	bf00      	nop
}
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 f8f6 	bl	8009b86 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	791b      	ldrb	r3, [r3, #4]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 ff0f 	bl	80097c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	795b      	ldrb	r3, [r3, #5]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 ff09 	bl	80097c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80089c8:	887b      	ldrh	r3, [r7, #2]
 80089ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ce:	d901      	bls.n	80089d4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e01b      	b.n	8008a0c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80089da:	887b      	ldrh	r3, [r7, #2]
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	4613      	mov	r3, r2
 80089e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089e4:	2100      	movs	r1, #0
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f872 	bl	8008ad0 <USBH_GetDescriptor>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d109      	bne.n	8008a0a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089fc:	887a      	ldrh	r2, [r7, #2]
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f92d 	bl	8008c60 <USBH_ParseDevDesc>
 8008a06:	4603      	mov	r3, r0
 8008a08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af02      	add	r7, sp, #8
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	331c      	adds	r3, #28
 8008a24:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008a26:	887b      	ldrh	r3, [r7, #2]
 8008a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a2c:	d901      	bls.n	8008a32 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e016      	b.n	8008a60 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008a32:	887b      	ldrh	r3, [r7, #2]
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f846 	bl	8008ad0 <USBH_GetDescriptor>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d107      	bne.n	8008a5e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008a4e:	887b      	ldrh	r3, [r7, #2]
 8008a50:	461a      	mov	r2, r3
 8008a52:	68b9      	ldr	r1, [r7, #8]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f9b7 	bl	8008dc8 <USBH_ParseCfgDesc>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af02      	add	r7, sp, #8
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	607a      	str	r2, [r7, #4]
 8008a72:	461a      	mov	r2, r3
 8008a74:	460b      	mov	r3, r1
 8008a76:	72fb      	strb	r3, [r7, #11]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008a7c:	893b      	ldrh	r3, [r7, #8]
 8008a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a82:	d802      	bhi.n	8008a8a <USBH_Get_StringDesc+0x22>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e01c      	b.n	8008ac8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008a8e:	7afb      	ldrb	r3, [r7, #11]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008a96:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008a9e:	893b      	ldrh	r3, [r7, #8]
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 f812 	bl	8008ad0 <USBH_GetDescriptor>
 8008aac:	4603      	mov	r3, r0
 8008aae:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d107      	bne.n	8008ac6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008abc:	893a      	ldrh	r2, [r7, #8]
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fb97 	bl	80091f4 <USBH_ParseStringDesc>
  }

  return status;
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	607b      	str	r3, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	72fb      	strb	r3, [r7, #11]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	789b      	ldrb	r3, [r3, #2]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d11c      	bne.n	8008b24 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008aea:	7afb      	ldrb	r3, [r7, #11]
 8008aec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2206      	movs	r2, #6
 8008afa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	893a      	ldrh	r2, [r7, #8]
 8008b00:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008b02:	893b      	ldrh	r3, [r7, #8]
 8008b04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b0c:	d104      	bne.n	8008b18 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f240 4209 	movw	r2, #1033	; 0x409
 8008b14:	829a      	strh	r2, [r3, #20]
 8008b16:	e002      	b.n	8008b1e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8b3a      	ldrh	r2, [r7, #24]
 8008b22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008b24:	8b3b      	ldrh	r3, [r7, #24]
 8008b26:	461a      	mov	r2, r3
 8008b28:	6879      	ldr	r1, [r7, #4]
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 fbb0 	bl	8009290 <USBH_CtlReq>
 8008b30:	4603      	mov	r3, r0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	460b      	mov	r3, r1
 8008b44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	789b      	ldrb	r3, [r3, #2]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d10f      	bne.n	8008b6e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2205      	movs	r2, #5
 8008b58:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2100      	movs	r1, #0
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fb8c 	bl	8009290 <USBH_CtlReq>
 8008b78:	4603      	mov	r3, r0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	789b      	ldrb	r3, [r3, #2]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d10e      	bne.n	8008bb4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2209      	movs	r2, #9
 8008ba0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	887a      	ldrh	r2, [r7, #2]
 8008ba6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fb69 	bl	8009290 <USBH_CtlReq>
 8008bbe:	4603      	mov	r3, r0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBH_SetInterface>:
  * @param  phost: Host Handle
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num, uint8_t altSetting)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	70fb      	strb	r3, [r7, #3]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	789b      	ldrb	r3, [r3, #2]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d110      	bne.n	8008c02 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	220b      	movs	r2, #11
 8008bea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 8008bec:	78bb      	ldrb	r3, [r7, #2]
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008bf4:	78fb      	ldrb	r3, [r7, #3]
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c02:	2200      	movs	r2, #0
 8008c04:	2100      	movs	r1, #0
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fb42 	bl	8009290 <USBH_CtlReq>
 8008c0c:	4603      	mov	r3, r0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b082      	sub	sp, #8
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	789b      	ldrb	r3, [r3, #2]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d10f      	bne.n	8008c4a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2203      	movs	r2, #3
 8008c34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008c36:	78fb      	ldrb	r3, [r7, #3]
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fb1e 	bl	8009290 <USBH_CtlReq>
 8008c54:	4603      	mov	r3, r0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008c74:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008c80:	2302      	movs	r3, #2
 8008c82:	e098      	b.n	8008db6 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	781a      	ldrb	r2, [r3, #0]
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	785a      	ldrb	r2, [r3, #1]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	3302      	adds	r3, #2
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	3303      	adds	r3, #3
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	021b      	lsls	r3, r3, #8
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	791a      	ldrb	r2, [r3, #4]
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	795a      	ldrb	r2, [r3, #5]
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	799a      	ldrb	r2, [r3, #6]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	79da      	ldrb	r2, [r3, #7]
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d004      	beq.n	8008ce4 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d11b      	bne.n	8008d1c <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	79db      	ldrb	r3, [r3, #7]
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	dc0f      	bgt.n	8008d0c <USBH_ParseDevDesc+0xac>
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	db0f      	blt.n	8008d10 <USBH_ParseDevDesc+0xb0>
 8008cf0:	3b08      	subs	r3, #8
 8008cf2:	4a34      	ldr	r2, [pc, #208]	; (8008dc4 <USBH_ParseDevDesc+0x164>)
 8008cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	bf14      	ite	ne
 8008d00:	2301      	movne	r3, #1
 8008d02:	2300      	moveq	r3, #0
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <USBH_ParseDevDesc+0xb8>
 8008d0a:	e001      	b.n	8008d10 <USBH_ParseDevDesc+0xb0>
 8008d0c:	2b40      	cmp	r3, #64	; 0x40
 8008d0e:	d003      	beq.n	8008d18 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	2208      	movs	r2, #8
 8008d14:	71da      	strb	r2, [r3, #7]
        break;
 8008d16:	e000      	b.n	8008d1a <USBH_ParseDevDesc+0xba>
        break;
 8008d18:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008d1a:	e00e      	b.n	8008d3a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d107      	bne.n	8008d36 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	79db      	ldrb	r3, [r3, #7]
 8008d2a:	2b08      	cmp	r3, #8
 8008d2c:	d005      	beq.n	8008d3a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	2208      	movs	r2, #8
 8008d32:	71da      	strb	r2, [r3, #7]
 8008d34:	e001      	b.n	8008d3a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008d36:	2303      	movs	r3, #3
 8008d38:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008d3a:	88fb      	ldrh	r3, [r7, #6]
 8008d3c:	2b08      	cmp	r3, #8
 8008d3e:	d939      	bls.n	8008db4 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	3308      	adds	r3, #8
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	3309      	adds	r3, #9
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	4313      	orrs	r3, r2
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	330a      	adds	r3, #10
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	330b      	adds	r3, #11
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	021b      	lsls	r3, r3, #8
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	4313      	orrs	r3, r2
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	330c      	adds	r3, #12
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	330d      	adds	r3, #13
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	021b      	lsls	r3, r3, #8
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	7b9a      	ldrb	r2, [r3, #14]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	7bda      	ldrb	r2, [r3, #15]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	7c1a      	ldrb	r2, [r3, #16]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	7c5a      	ldrb	r2, [r3, #17]
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	371c      	adds	r7, #28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	01000101 	.word	0x01000101

08008dc8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08c      	sub	sp, #48	; 0x30
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008ddc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008df6:	2302      	movs	r3, #2
 8008df8:	e0db      	b.n	8008fb2 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	781a      	ldrb	r2, [r3, #0]
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	785a      	ldrb	r2, [r3, #1]
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	3302      	adds	r3, #2
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	3303      	adds	r3, #3
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	021b      	lsls	r3, r3, #8
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	4313      	orrs	r3, r2
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e2a:	bf28      	it	cs
 8008e2c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	791a      	ldrb	r2, [r3, #4]
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	795a      	ldrb	r2, [r3, #5]
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	799a      	ldrb	r2, [r3, #6]
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	79da      	ldrb	r2, [r3, #7]
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	7a1a      	ldrb	r2, [r3, #8]
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	2b09      	cmp	r3, #9
 8008e64:	d002      	beq.n	8008e6c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	2209      	movs	r2, #9
 8008e6a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008e6c:	88fb      	ldrh	r3, [r7, #6]
 8008e6e:	2b09      	cmp	r3, #9
 8008e70:	f240 809d 	bls.w	8008fae <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008e74:	2309      	movs	r3, #9
 8008e76:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e7c:	e081      	b.n	8008f82 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e7e:	f107 0316 	add.w	r3, r7, #22
 8008e82:	4619      	mov	r1, r3
 8008e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e86:	f000 f9e8 	bl	800925a <USBH_GetNextDesc>
 8008e8a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	785b      	ldrb	r3, [r3, #1]
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d176      	bne.n	8008f82 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b09      	cmp	r3, #9
 8008e9a:	d002      	beq.n	8008ea2 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	2209      	movs	r2, #9
 8008ea0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ea6:	221a      	movs	r2, #26
 8008ea8:	fb02 f303 	mul.w	r3, r2, r3
 8008eac:	3308      	adds	r3, #8
 8008eae:	6a3a      	ldr	r2, [r7, #32]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	3302      	adds	r3, #2
 8008eb4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb8:	69f8      	ldr	r0, [r7, #28]
 8008eba:	f000 f87e 	bl	8008fba <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ec8:	e043      	b.n	8008f52 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008eca:	f107 0316 	add.w	r3, r7, #22
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ed2:	f000 f9c2 	bl	800925a <USBH_GetNextDesc>
 8008ed6:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	785b      	ldrb	r3, [r3, #1]
 8008edc:	2b05      	cmp	r3, #5
 8008ede:	d138      	bne.n	8008f52 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	795b      	ldrb	r3, [r3, #5]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d113      	bne.n	8008f10 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d003      	beq.n	8008ef8 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	799b      	ldrb	r3, [r3, #6]
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d10b      	bne.n	8008f10 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	79db      	ldrb	r3, [r3, #7]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10b      	bne.n	8008f18 <USBH_ParseCfgDesc+0x150>
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b09      	cmp	r3, #9
 8008f06:	d007      	beq.n	8008f18 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	2209      	movs	r2, #9
 8008f0c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f0e:	e003      	b.n	8008f18 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	2207      	movs	r2, #7
 8008f14:	701a      	strb	r2, [r3, #0]
 8008f16:	e000      	b.n	8008f1a <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f18:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f22:	3201      	adds	r2, #1
 8008f24:	00d2      	lsls	r2, r2, #3
 8008f26:	211a      	movs	r1, #26
 8008f28:	fb01 f303 	mul.w	r3, r1, r3
 8008f2c:	4413      	add	r3, r2
 8008f2e:	3308      	adds	r3, #8
 8008f30:	6a3a      	ldr	r2, [r7, #32]
 8008f32:	4413      	add	r3, r2
 8008f34:	3304      	adds	r3, #4
 8008f36:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f3a:	69b9      	ldr	r1, [r7, #24]
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 f870 	bl	8009022 <USBH_ParseEPDesc>
 8008f42:	4603      	mov	r3, r0
 8008f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008f48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	791b      	ldrb	r3, [r3, #4]
 8008f56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d204      	bcs.n	8008f68 <USBH_ParseCfgDesc+0x1a0>
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	885a      	ldrh	r2, [r3, #2]
 8008f62:	8afb      	ldrh	r3, [r7, #22]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d8b0      	bhi.n	8008eca <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	791b      	ldrb	r3, [r3, #4]
 8008f6c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d201      	bcs.n	8008f78 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e01c      	b.n	8008fb2 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f86:	2b09      	cmp	r3, #9
 8008f88:	d805      	bhi.n	8008f96 <USBH_ParseCfgDesc+0x1ce>
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	885a      	ldrh	r2, [r3, #2]
 8008f8e:	8afb      	ldrh	r3, [r7, #22]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	f63f af74 	bhi.w	8008e7e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	791b      	ldrb	r3, [r3, #4]
 8008f9a:	2b0a      	cmp	r3, #10
 8008f9c:	bf28      	it	cs
 8008f9e:	230a      	movcs	r3, #10
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d201      	bcs.n	8008fae <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e001      	b.n	8008fb2 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3730      	adds	r7, #48	; 0x30
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	785a      	ldrb	r2, [r3, #1]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	789a      	ldrb	r2, [r3, #2]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	78da      	ldrb	r2, [r3, #3]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	bf28      	it	cs
 8008fee:	2302      	movcs	r3, #2
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	795a      	ldrb	r2, [r3, #5]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	799a      	ldrb	r2, [r3, #6]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	79da      	ldrb	r2, [r3, #7]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	7a1a      	ldrb	r2, [r3, #8]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	721a      	strb	r2, [r3, #8]
}
 8009016:	bf00      	nop
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009022:	b480      	push	{r7}
 8009024:	b087      	sub	sp, #28
 8009026:	af00      	add	r7, sp, #0
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	60b9      	str	r1, [r7, #8]
 800902c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	781a      	ldrb	r2, [r3, #0]
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	785a      	ldrb	r2, [r3, #1]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	789a      	ldrb	r2, [r3, #2]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	78da      	ldrb	r2, [r3, #3]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3304      	adds	r3, #4
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	b29a      	uxth	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3305      	adds	r3, #5
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	b29b      	uxth	r3, r3
 8009062:	021b      	lsls	r3, r3, #8
 8009064:	b29b      	uxth	r3, r3
 8009066:	4313      	orrs	r3, r2
 8009068:	b29a      	uxth	r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	799a      	ldrb	r2, [r3, #6]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	889b      	ldrh	r3, [r3, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d009      	beq.n	8009092 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009086:	d804      	bhi.n	8009092 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800908c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009090:	d901      	bls.n	8009096 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8009092:	2303      	movs	r3, #3
 8009094:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800909c:	2b00      	cmp	r3, #0
 800909e:	d136      	bne.n	800910e <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	78db      	ldrb	r3, [r3, #3]
 80090a4:	f003 0303 	and.w	r3, r3, #3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d108      	bne.n	80090be <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	889b      	ldrh	r3, [r3, #4]
 80090b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090b4:	f240 8097 	bls.w	80091e6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80090b8:	2303      	movs	r3, #3
 80090ba:	75fb      	strb	r3, [r7, #23]
 80090bc:	e093      	b.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	78db      	ldrb	r3, [r3, #3]
 80090c2:	f003 0303 	and.w	r3, r3, #3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d107      	bne.n	80090da <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	889b      	ldrh	r3, [r3, #4]
 80090ce:	2b40      	cmp	r3, #64	; 0x40
 80090d0:	f240 8089 	bls.w	80091e6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80090d4:	2303      	movs	r3, #3
 80090d6:	75fb      	strb	r3, [r7, #23]
 80090d8:	e085      	b.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	78db      	ldrb	r3, [r3, #3]
 80090de:	f003 0303 	and.w	r3, r3, #3
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d005      	beq.n	80090f2 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	78db      	ldrb	r3, [r3, #3]
 80090ea:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d10a      	bne.n	8009108 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	799b      	ldrb	r3, [r3, #6]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <USBH_ParseEPDesc+0xe0>
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	799b      	ldrb	r3, [r3, #6]
 80090fe:	2b10      	cmp	r3, #16
 8009100:	d970      	bls.n	80091e4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009102:	2303      	movs	r3, #3
 8009104:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009106:	e06d      	b.n	80091e4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009108:	2303      	movs	r3, #3
 800910a:	75fb      	strb	r3, [r7, #23]
 800910c:	e06b      	b.n	80091e6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009114:	2b01      	cmp	r3, #1
 8009116:	d13c      	bne.n	8009192 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	78db      	ldrb	r3, [r3, #3]
 800911c:	f003 0303 	and.w	r3, r3, #3
 8009120:	2b02      	cmp	r3, #2
 8009122:	d005      	beq.n	8009130 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	78db      	ldrb	r3, [r3, #3]
 8009128:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800912c:	2b00      	cmp	r3, #0
 800912e:	d106      	bne.n	800913e <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	889b      	ldrh	r3, [r3, #4]
 8009134:	2b40      	cmp	r3, #64	; 0x40
 8009136:	d956      	bls.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009138:	2303      	movs	r3, #3
 800913a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800913c:	e053      	b.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	78db      	ldrb	r3, [r3, #3]
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	2b01      	cmp	r3, #1
 8009148:	d10e      	bne.n	8009168 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	799b      	ldrb	r3, [r3, #6]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d007      	beq.n	8009162 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009156:	2b10      	cmp	r3, #16
 8009158:	d803      	bhi.n	8009162 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800915e:	2b40      	cmp	r3, #64	; 0x40
 8009160:	d941      	bls.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009162:	2303      	movs	r3, #3
 8009164:	75fb      	strb	r3, [r7, #23]
 8009166:	e03e      	b.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	78db      	ldrb	r3, [r3, #3]
 800916c:	f003 0303 	and.w	r3, r3, #3
 8009170:	2b03      	cmp	r3, #3
 8009172:	d10b      	bne.n	800918c <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	799b      	ldrb	r3, [r3, #6]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d004      	beq.n	8009186 <USBH_ParseEPDesc+0x164>
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	889b      	ldrh	r3, [r3, #4]
 8009180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009184:	d32f      	bcc.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009186:	2303      	movs	r3, #3
 8009188:	75fb      	strb	r3, [r7, #23]
 800918a:	e02c      	b.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800918c:	2303      	movs	r3, #3
 800918e:	75fb      	strb	r3, [r7, #23]
 8009190:	e029      	b.n	80091e6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009198:	2b02      	cmp	r3, #2
 800919a:	d120      	bne.n	80091de <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	78db      	ldrb	r3, [r3, #3]
 80091a0:	f003 0303 	and.w	r3, r3, #3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d106      	bne.n	80091b6 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	889b      	ldrh	r3, [r3, #4]
 80091ac:	2b08      	cmp	r3, #8
 80091ae:	d01a      	beq.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80091b0:	2303      	movs	r3, #3
 80091b2:	75fb      	strb	r3, [r7, #23]
 80091b4:	e017      	b.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	78db      	ldrb	r3, [r3, #3]
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d10a      	bne.n	80091d8 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	799b      	ldrb	r3, [r3, #6]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <USBH_ParseEPDesc+0x1b0>
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	889b      	ldrh	r3, [r3, #4]
 80091ce:	2b08      	cmp	r3, #8
 80091d0:	d909      	bls.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80091d2:	2303      	movs	r3, #3
 80091d4:	75fb      	strb	r3, [r7, #23]
 80091d6:	e006      	b.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80091d8:	2303      	movs	r3, #3
 80091da:	75fb      	strb	r3, [r7, #23]
 80091dc:	e003      	b.n	80091e6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80091de:	2303      	movs	r3, #3
 80091e0:	75fb      	strb	r3, [r7, #23]
 80091e2:	e000      	b.n	80091e6 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80091e4:	bf00      	nop
  }

  return status;
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	371c      	adds	r7, #28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3301      	adds	r3, #1
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b03      	cmp	r3, #3
 800920a:	d120      	bne.n	800924e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	1e9a      	subs	r2, r3, #2
 8009212:	88fb      	ldrh	r3, [r7, #6]
 8009214:	4293      	cmp	r3, r2
 8009216:	bf28      	it	cs
 8009218:	4613      	movcs	r3, r2
 800921a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3302      	adds	r3, #2
 8009220:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009222:	2300      	movs	r3, #0
 8009224:	82fb      	strh	r3, [r7, #22]
 8009226:	e00b      	b.n	8009240 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009228:	8afb      	ldrh	r3, [r7, #22]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4413      	add	r3, r2
 800922e:	781a      	ldrb	r2, [r3, #0]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	3301      	adds	r3, #1
 8009238:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800923a:	8afb      	ldrh	r3, [r7, #22]
 800923c:	3302      	adds	r3, #2
 800923e:	82fb      	strh	r3, [r7, #22]
 8009240:	8afa      	ldrh	r2, [r7, #22]
 8009242:	8abb      	ldrh	r3, [r7, #20]
 8009244:	429a      	cmp	r2, r3
 8009246:	d3ef      	bcc.n	8009228 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2200      	movs	r2, #0
 800924c:	701a      	strb	r2, [r3, #0]
  }
}
 800924e:	bf00      	nop
 8009250:	371c      	adds	r7, #28
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800925a:	b480      	push	{r7}
 800925c:	b085      	sub	sp, #20
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	881a      	ldrh	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b29b      	uxth	r3, r3
 800926e:	4413      	add	r3, r2
 8009270:	b29a      	uxth	r2, r3
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4413      	add	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009282:	68fb      	ldr	r3, [r7, #12]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	4613      	mov	r3, r2
 800929c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800929e:	2301      	movs	r3, #1
 80092a0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	789b      	ldrb	r3, [r3, #2]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d002      	beq.n	80092b0 <USBH_CtlReq+0x20>
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d00f      	beq.n	80092ce <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80092ae:	e027      	b.n	8009300 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	88fa      	ldrh	r2, [r7, #6]
 80092ba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2201      	movs	r2, #1
 80092c0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2202      	movs	r2, #2
 80092c6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80092c8:	2301      	movs	r3, #1
 80092ca:	75fb      	strb	r3, [r7, #23]
      break;
 80092cc:	e018      	b.n	8009300 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 f81c 	bl	800930c <USBH_HandleControl>
 80092d4:	4603      	mov	r3, r0
 80092d6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80092d8:	7dfb      	ldrb	r3, [r7, #23]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <USBH_CtlReq+0x54>
 80092de:	7dfb      	ldrb	r3, [r7, #23]
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d106      	bne.n	80092f2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2201      	movs	r2, #1
 80092e8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	761a      	strb	r2, [r3, #24]
      break;
 80092f0:	e005      	b.n	80092fe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d102      	bne.n	80092fe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2201      	movs	r2, #1
 80092fc:	709a      	strb	r2, [r3, #2]
      break;
 80092fe:	bf00      	nop
  }
  return status;
 8009300:	7dfb      	ldrb	r3, [r7, #23]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
	...

0800930c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af02      	add	r7, sp, #8
 8009312:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009314:	2301      	movs	r3, #1
 8009316:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009318:	2300      	movs	r3, #0
 800931a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	7e1b      	ldrb	r3, [r3, #24]
 8009320:	3b01      	subs	r3, #1
 8009322:	2b0a      	cmp	r3, #10
 8009324:	f200 8156 	bhi.w	80095d4 <USBH_HandleControl+0x2c8>
 8009328:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <USBH_HandleControl+0x24>)
 800932a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932e:	bf00      	nop
 8009330:	0800935d 	.word	0x0800935d
 8009334:	08009377 	.word	0x08009377
 8009338:	080093e1 	.word	0x080093e1
 800933c:	08009407 	.word	0x08009407
 8009340:	0800943f 	.word	0x0800943f
 8009344:	08009469 	.word	0x08009469
 8009348:	080094bb 	.word	0x080094bb
 800934c:	080094dd 	.word	0x080094dd
 8009350:	08009519 	.word	0x08009519
 8009354:	0800953f 	.word	0x0800953f
 8009358:	0800957d 	.word	0x0800957d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f103 0110 	add.w	r1, r3, #16
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	795b      	ldrb	r3, [r3, #5]
 8009366:	461a      	mov	r2, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f943 	bl	80095f4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2202      	movs	r2, #2
 8009372:	761a      	strb	r2, [r3, #24]
      break;
 8009374:	e139      	b.n	80095ea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	795b      	ldrb	r3, [r3, #5]
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fcde 	bl	8009d3e <USBH_LL_GetURBState>
 8009382:	4603      	mov	r3, r0
 8009384:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d11e      	bne.n	80093ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	7c1b      	ldrb	r3, [r3, #16]
 8009390:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009394:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	8adb      	ldrh	r3, [r3, #22]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00a      	beq.n	80093b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800939e:	7b7b      	ldrb	r3, [r7, #13]
 80093a0:	2b80      	cmp	r3, #128	; 0x80
 80093a2:	d103      	bne.n	80093ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2203      	movs	r2, #3
 80093a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093aa:	e115      	b.n	80095d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2205      	movs	r2, #5
 80093b0:	761a      	strb	r2, [r3, #24]
      break;
 80093b2:	e111      	b.n	80095d8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80093b4:	7b7b      	ldrb	r3, [r7, #13]
 80093b6:	2b80      	cmp	r3, #128	; 0x80
 80093b8:	d103      	bne.n	80093c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2209      	movs	r2, #9
 80093be:	761a      	strb	r2, [r3, #24]
      break;
 80093c0:	e10a      	b.n	80095d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2207      	movs	r2, #7
 80093c6:	761a      	strb	r2, [r3, #24]
      break;
 80093c8:	e106      	b.n	80095d8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	2b04      	cmp	r3, #4
 80093ce:	d003      	beq.n	80093d8 <USBH_HandleControl+0xcc>
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	f040 8100 	bne.w	80095d8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	220b      	movs	r2, #11
 80093dc:	761a      	strb	r2, [r3, #24]
      break;
 80093de:	e0fb      	b.n	80095d8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6899      	ldr	r1, [r3, #8]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	899a      	ldrh	r2, [r3, #12]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	791b      	ldrb	r3, [r3, #4]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f93a 	bl	8009672 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2204      	movs	r2, #4
 8009402:	761a      	strb	r2, [r3, #24]
      break;
 8009404:	e0f1      	b.n	80095ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	791b      	ldrb	r3, [r3, #4]
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fc96 	bl	8009d3e <USBH_LL_GetURBState>
 8009412:	4603      	mov	r3, r0
 8009414:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d102      	bne.n	8009422 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2209      	movs	r2, #9
 8009420:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009422:	7bbb      	ldrb	r3, [r7, #14]
 8009424:	2b05      	cmp	r3, #5
 8009426:	d102      	bne.n	800942e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009428:	2303      	movs	r3, #3
 800942a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800942c:	e0d6      	b.n	80095dc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	2b04      	cmp	r3, #4
 8009432:	f040 80d3 	bne.w	80095dc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	220b      	movs	r2, #11
 800943a:	761a      	strb	r2, [r3, #24]
      break;
 800943c:	e0ce      	b.n	80095dc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6899      	ldr	r1, [r3, #8]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	899a      	ldrh	r2, [r3, #12]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	795b      	ldrb	r3, [r3, #5]
 800944a:	2001      	movs	r0, #1
 800944c:	9000      	str	r0, [sp, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f8ea 	bl	8009628 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800945a:	b29a      	uxth	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2206      	movs	r2, #6
 8009464:	761a      	strb	r2, [r3, #24]
      break;
 8009466:	e0c0      	b.n	80095ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	795b      	ldrb	r3, [r3, #5]
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fc65 	bl	8009d3e <USBH_LL_GetURBState>
 8009474:	4603      	mov	r3, r0
 8009476:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d103      	bne.n	8009486 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2207      	movs	r2, #7
 8009482:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009484:	e0ac      	b.n	80095e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009486:	7bbb      	ldrb	r3, [r7, #14]
 8009488:	2b05      	cmp	r3, #5
 800948a:	d105      	bne.n	8009498 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	220c      	movs	r2, #12
 8009490:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009492:	2303      	movs	r3, #3
 8009494:	73fb      	strb	r3, [r7, #15]
      break;
 8009496:	e0a3      	b.n	80095e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	2b02      	cmp	r3, #2
 800949c:	d103      	bne.n	80094a6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2205      	movs	r2, #5
 80094a2:	761a      	strb	r2, [r3, #24]
      break;
 80094a4:	e09c      	b.n	80095e0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	2b04      	cmp	r3, #4
 80094aa:	f040 8099 	bne.w	80095e0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	220b      	movs	r2, #11
 80094b2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80094b4:	2302      	movs	r3, #2
 80094b6:	73fb      	strb	r3, [r7, #15]
      break;
 80094b8:	e092      	b.n	80095e0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	791b      	ldrb	r3, [r3, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	2100      	movs	r1, #0
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f8d5 	bl	8009672 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2208      	movs	r2, #8
 80094d8:	761a      	strb	r2, [r3, #24]

      break;
 80094da:	e086      	b.n	80095ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	791b      	ldrb	r3, [r3, #4]
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fc2b 	bl	8009d3e <USBH_LL_GetURBState>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d105      	bne.n	80094fe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	220d      	movs	r2, #13
 80094f6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094fc:	e072      	b.n	80095e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	2b04      	cmp	r3, #4
 8009502:	d103      	bne.n	800950c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	220b      	movs	r2, #11
 8009508:	761a      	strb	r2, [r3, #24]
      break;
 800950a:	e06b      	b.n	80095e4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	2b05      	cmp	r3, #5
 8009510:	d168      	bne.n	80095e4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009512:	2303      	movs	r3, #3
 8009514:	73fb      	strb	r3, [r7, #15]
      break;
 8009516:	e065      	b.n	80095e4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	795b      	ldrb	r3, [r3, #5]
 800951c:	2201      	movs	r2, #1
 800951e:	9200      	str	r2, [sp, #0]
 8009520:	2200      	movs	r2, #0
 8009522:	2100      	movs	r1, #0
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f87f 	bl	8009628 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009530:	b29a      	uxth	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	220a      	movs	r2, #10
 800953a:	761a      	strb	r2, [r3, #24]
      break;
 800953c:	e055      	b.n	80095ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	795b      	ldrb	r3, [r3, #5]
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fbfa 	bl	8009d3e <USBH_LL_GetURBState>
 800954a:	4603      	mov	r3, r0
 800954c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800954e:	7bbb      	ldrb	r3, [r7, #14]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d105      	bne.n	8009560 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	220d      	movs	r2, #13
 800955c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800955e:	e043      	b.n	80095e8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d103      	bne.n	800956e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2209      	movs	r2, #9
 800956a:	761a      	strb	r2, [r3, #24]
      break;
 800956c:	e03c      	b.n	80095e8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	2b04      	cmp	r3, #4
 8009572:	d139      	bne.n	80095e8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	220b      	movs	r2, #11
 8009578:	761a      	strb	r2, [r3, #24]
      break;
 800957a:	e035      	b.n	80095e8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	7e5b      	ldrb	r3, [r3, #25]
 8009580:	3301      	adds	r3, #1
 8009582:	b2da      	uxtb	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	765a      	strb	r2, [r3, #25]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	7e5b      	ldrb	r3, [r3, #25]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d806      	bhi.n	800959e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800959c:	e025      	b.n	80095ea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80095a4:	2106      	movs	r1, #6
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	795b      	ldrb	r3, [r3, #5]
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f904 	bl	80097c4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	791b      	ldrb	r3, [r3, #4]
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f8fe 	bl	80097c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80095ce:	2302      	movs	r3, #2
 80095d0:	73fb      	strb	r3, [r7, #15]
      break;
 80095d2:	e00a      	b.n	80095ea <USBH_HandleControl+0x2de>

    default:
      break;
 80095d4:	bf00      	nop
 80095d6:	e008      	b.n	80095ea <USBH_HandleControl+0x2de>
      break;
 80095d8:	bf00      	nop
 80095da:	e006      	b.n	80095ea <USBH_HandleControl+0x2de>
      break;
 80095dc:	bf00      	nop
 80095de:	e004      	b.n	80095ea <USBH_HandleControl+0x2de>
      break;
 80095e0:	bf00      	nop
 80095e2:	e002      	b.n	80095ea <USBH_HandleControl+0x2de>
      break;
 80095e4:	bf00      	nop
 80095e6:	e000      	b.n	80095ea <USBH_HandleControl+0x2de>
      break;
 80095e8:	bf00      	nop
  }

  return status;
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af04      	add	r7, sp, #16
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	4613      	mov	r3, r2
 8009600:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009602:	79f9      	ldrb	r1, [r7, #7]
 8009604:	2300      	movs	r3, #0
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	2308      	movs	r3, #8
 800960a:	9302      	str	r3, [sp, #8]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	2300      	movs	r3, #0
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	2300      	movs	r3, #0
 8009616:	2200      	movs	r2, #0
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 fb5f 	bl	8009cdc <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af04      	add	r7, sp, #16
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	4611      	mov	r1, r2
 8009634:	461a      	mov	r2, r3
 8009636:	460b      	mov	r3, r1
 8009638:	80fb      	strh	r3, [r7, #6]
 800963a:	4613      	mov	r3, r2
 800963c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800964c:	7979      	ldrb	r1, [r7, #5]
 800964e:	7e3b      	ldrb	r3, [r7, #24]
 8009650:	9303      	str	r3, [sp, #12]
 8009652:	88fb      	ldrh	r3, [r7, #6]
 8009654:	9302      	str	r3, [sp, #8]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	2301      	movs	r3, #1
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	2300      	movs	r3, #0
 8009660:	2200      	movs	r2, #0
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 fb3a 	bl	8009cdc <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b088      	sub	sp, #32
 8009676:	af04      	add	r7, sp, #16
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	4611      	mov	r1, r2
 800967e:	461a      	mov	r2, r3
 8009680:	460b      	mov	r3, r1
 8009682:	80fb      	strh	r3, [r7, #6]
 8009684:	4613      	mov	r3, r2
 8009686:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009688:	7979      	ldrb	r1, [r7, #5]
 800968a:	2300      	movs	r3, #0
 800968c:	9303      	str	r3, [sp, #12]
 800968e:	88fb      	ldrh	r3, [r7, #6]
 8009690:	9302      	str	r3, [sp, #8]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	2301      	movs	r3, #1
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	2300      	movs	r3, #0
 800969c:	2201      	movs	r2, #1
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 fb1c 	bl	8009cdc <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80096a4:	2300      	movs	r3, #0

}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b088      	sub	sp, #32
 80096b2:	af04      	add	r7, sp, #16
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	4611      	mov	r1, r2
 80096ba:	461a      	mov	r2, r3
 80096bc:	460b      	mov	r3, r1
 80096be:	71fb      	strb	r3, [r7, #7]
 80096c0:	4613      	mov	r3, r2
 80096c2:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	79b9      	ldrb	r1, [r7, #6]
 80096ca:	2200      	movs	r2, #0
 80096cc:	9203      	str	r2, [sp, #12]
 80096ce:	9302      	str	r3, [sp, #8]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	2301      	movs	r3, #1
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	2303      	movs	r3, #3
 80096da:	2201      	movs	r2, #1
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 fafd 	bl	8009cdc <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af04      	add	r7, sp, #16
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	78f9      	ldrb	r1, [r7, #3]
 8009700:	2200      	movs	r2, #0
 8009702:	9203      	str	r2, [sp, #12]
 8009704:	9302      	str	r3, [sp, #8]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	2301      	movs	r3, #1
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	2301      	movs	r3, #1
 8009710:	2200      	movs	r2, #0
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 fae2 	bl	8009cdc <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af04      	add	r7, sp, #16
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	4608      	mov	r0, r1
 800972c:	4611      	mov	r1, r2
 800972e:	461a      	mov	r2, r3
 8009730:	4603      	mov	r3, r0
 8009732:	70fb      	strb	r3, [r7, #3]
 8009734:	460b      	mov	r3, r1
 8009736:	70bb      	strb	r3, [r7, #2]
 8009738:	4613      	mov	r3, r2
 800973a:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800973c:	7878      	ldrb	r0, [r7, #1]
 800973e:	78ba      	ldrb	r2, [r7, #2]
 8009740:	78f9      	ldrb	r1, [r7, #3]
 8009742:	8b3b      	ldrh	r3, [r7, #24]
 8009744:	9302      	str	r3, [sp, #8]
 8009746:	7d3b      	ldrb	r3, [r7, #20]
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	7c3b      	ldrb	r3, [r7, #16]
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	4603      	mov	r3, r0
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fa75 	bl	8009c40 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800976c:	78fb      	ldrb	r3, [r7, #3]
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fa94 	bl	8009c9e <USBH_LL_ClosePipe>

  return USBH_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f839 	bl	8009804 <USBH_GetFreePipe>
 8009792:	4603      	mov	r3, r0
 8009794:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009796:	89fb      	ldrh	r3, [r7, #14]
 8009798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800979c:	4293      	cmp	r3, r2
 800979e:	d00b      	beq.n	80097b8 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80097a0:	78fa      	ldrb	r2, [r7, #3]
 80097a2:	89fb      	ldrh	r3, [r7, #14]
 80097a4:	f003 030f 	and.w	r3, r3, #15
 80097a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	440b      	add	r3, r1
 80097b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80097b8:	89fb      	ldrh	r3, [r7, #14]
 80097ba:	b2db      	uxtb	r3, r3
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	2b0f      	cmp	r3, #15
 80097d4:	d80f      	bhi.n	80097f6 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80097d6:	78fb      	ldrb	r3, [r7, #3]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	78fb      	ldrb	r3, [r7, #3]
 80097e6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	440b      	add	r3, r1
 80097f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009810:	2300      	movs	r3, #0
 8009812:	73fb      	strb	r3, [r7, #15]
 8009814:	e010      	b.n	8009838 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	b29b      	uxth	r3, r3
 8009830:	e007      	b.n	8009842 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	3301      	adds	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	2b0f      	cmp	r3, #15
 800983c:	d9eb      	bls.n	8009816 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800983e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009842:	4618      	mov	r0, r3
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
	...

08009850 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009854:	2201      	movs	r2, #1
 8009856:	490e      	ldr	r1, [pc, #56]	; (8009890 <MX_USB_HOST_Init+0x40>)
 8009858:	480e      	ldr	r0, [pc, #56]	; (8009894 <MX_USB_HOST_Init+0x44>)
 800985a:	f7fe faea 	bl	8007e32 <USBH_Init>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009864:	f7f7 f800 	bl	8000868 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 8009868:	490b      	ldr	r1, [pc, #44]	; (8009898 <MX_USB_HOST_Init+0x48>)
 800986a:	480a      	ldr	r0, [pc, #40]	; (8009894 <MX_USB_HOST_Init+0x44>)
 800986c:	f7fe fb90 	bl	8007f90 <USBH_RegisterClass>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009876:	f7f6 fff7 	bl	8000868 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800987a:	4806      	ldr	r0, [pc, #24]	; (8009894 <MX_USB_HOST_Init+0x44>)
 800987c:	f7fe fc2c 	bl	80080d8 <USBH_Start>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009886:	f7f6 ffef 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800988a:	bf00      	nop
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	080098b1 	.word	0x080098b1
 8009894:	20000214 	.word	0x20000214
 8009898:	2000000c 	.word	0x2000000c

0800989c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80098a0:	4802      	ldr	r0, [pc, #8]	; (80098ac <MX_USB_HOST_Process+0x10>)
 80098a2:	f7fe fc29 	bl	80080f8 <USBH_Process>
}
 80098a6:	bf00      	nop
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	20000214 	.word	0x20000214

080098b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80098bc:	78fb      	ldrb	r3, [r7, #3]
 80098be:	3b01      	subs	r3, #1
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	d819      	bhi.n	80098f8 <USBH_UserProcess+0x48>
 80098c4:	a201      	add	r2, pc, #4	; (adr r2, 80098cc <USBH_UserProcess+0x1c>)
 80098c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ca:	bf00      	nop
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	080098e9 	.word	0x080098e9
 80098d4:	080098f9 	.word	0x080098f9
 80098d8:	080098f1 	.word	0x080098f1
 80098dc:	080098e1 	.word	0x080098e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80098e0:	4b09      	ldr	r3, [pc, #36]	; (8009908 <USBH_UserProcess+0x58>)
 80098e2:	2203      	movs	r2, #3
 80098e4:	701a      	strb	r2, [r3, #0]
  break;
 80098e6:	e008      	b.n	80098fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80098e8:	4b07      	ldr	r3, [pc, #28]	; (8009908 <USBH_UserProcess+0x58>)
 80098ea:	2202      	movs	r2, #2
 80098ec:	701a      	strb	r2, [r3, #0]
  break;
 80098ee:	e004      	b.n	80098fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <USBH_UserProcess+0x58>)
 80098f2:	2201      	movs	r2, #1
 80098f4:	701a      	strb	r2, [r3, #0]
  break;
 80098f6:	e000      	b.n	80098fa <USBH_UserProcess+0x4a>

  default:
  break;
 80098f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80098fa:	bf00      	nop
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	200006bc 	.word	0x200006bc

0800990c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b0ae      	sub	sp, #184	; 0xb8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009914:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	605a      	str	r2, [r3, #4]
 800991e:	609a      	str	r2, [r3, #8]
 8009920:	60da      	str	r2, [r3, #12]
 8009922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009924:	f107 0318 	add.w	r3, r7, #24
 8009928:	228c      	movs	r2, #140	; 0x8c
 800992a:	2100      	movs	r1, #0
 800992c:	4618      	mov	r0, r3
 800992e:	f000 fb73 	bl	800a018 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800993a:	d173      	bne.n	8009a24 <HAL_HCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800993c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009940:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009942:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800994a:	2301      	movs	r3, #1
 800994c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800994e:	2305      	movs	r3, #5
 8009950:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8009952:	2314      	movs	r3, #20
 8009954:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8009956:	2302      	movs	r3, #2
 8009958:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800995a:	2302      	movs	r3, #2
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800995e:	2302      	movs	r3, #2
 8009960:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8009962:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009966:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009968:	f107 0318 	add.w	r3, r7, #24
 800996c:	4618      	mov	r0, r3
 800996e:	f7fa f853 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 8009978:	f7f6 ff76 	bl	8000868 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800997c:	4b2b      	ldr	r3, [pc, #172]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 800997e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009980:	4a2a      	ldr	r2, [pc, #168]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 8009982:	f043 0301 	orr.w	r3, r3, #1
 8009986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009988:	4b28      	ldr	r3, [pc, #160]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 800998a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009994:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800999c:	2302      	movs	r3, #2
 800999e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099a2:	2300      	movs	r3, #0
 80099a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099a8:	2303      	movs	r3, #3
 80099aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099ae:	230a      	movs	r3, #10
 80099b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80099b8:	4619      	mov	r1, r3
 80099ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80099be:	f7f7 fb07 	bl	8000fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099c2:	4b1a      	ldr	r3, [pc, #104]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 80099c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c6:	4a19      	ldr	r2, [pc, #100]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 80099c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099ce:	4b17      	ldr	r3, [pc, #92]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 80099d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099d6:	613b      	str	r3, [r7, #16]
 80099d8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099da:	4b14      	ldr	r3, [pc, #80]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 80099dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d114      	bne.n	8009a10 <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099e6:	4b11      	ldr	r3, [pc, #68]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 80099e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ea:	4a10      	ldr	r2, [pc, #64]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 80099ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099f0:	6593      	str	r3, [r2, #88]	; 0x58
 80099f2:	4b0e      	ldr	r3, [pc, #56]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 80099f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80099fe:	f7f9 f9ad 	bl	8002d5c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a02:	4b0a      	ldr	r3, [pc, #40]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 8009a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a06:	4a09      	ldr	r2, [pc, #36]	; (8009a2c <HAL_HCD_MspInit+0x120>)
 8009a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8009a0e:	e001      	b.n	8009a14 <HAL_HCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009a10:	f7f9 f9a4 	bl	8002d5c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a14:	2200      	movs	r2, #0
 8009a16:	2100      	movs	r1, #0
 8009a18:	2043      	movs	r0, #67	; 0x43
 8009a1a:	f7f7 fa62 	bl	8000ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a1e:	2043      	movs	r0, #67	; 0x43
 8009a20:	f7f7 fa7b 	bl	8000f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a24:	bf00      	nop
 8009a26:	37b8      	adds	r7, #184	; 0xb8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	40021000 	.word	0x40021000

08009a30 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe ff3b 	bl	80088ba <USBH_LL_IncTimer>
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe ff73 	bl	8008946 <USBH_LL_Connect>
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe ff7c 	bl	8008974 <USBH_LL_Disconnect>
}
 8009a7c:	bf00      	nop
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	70fb      	strb	r3, [r7, #3]
 8009a90:	4613      	mov	r3, r2
 8009a92:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe ff2d 	bl	800890e <USBH_LL_PortEnabled>
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe ff2d 	bl	800892a <USBH_LL_PortDisabled>
}
 8009ad0:	bf00      	nop
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d12a      	bne.n	8009b40 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009aea:	4a18      	ldr	r2, [pc, #96]	; (8009b4c <USBH_LL_Init+0x74>)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
  phost->pData = &hhcd_USB_OTG_FS;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a15      	ldr	r2, [pc, #84]	; (8009b4c <USBH_LL_Init+0x74>)
 8009af6:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009afa:	4b14      	ldr	r3, [pc, #80]	; (8009b4c <USBH_LL_Init+0x74>)
 8009afc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b00:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <USBH_LL_Init+0x74>)
 8009b04:	220c      	movs	r2, #12
 8009b06:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009b08:	4b10      	ldr	r3, [pc, #64]	; (8009b4c <USBH_LL_Init+0x74>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <USBH_LL_Init+0x74>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009b14:	4b0d      	ldr	r3, [pc, #52]	; (8009b4c <USBH_LL_Init+0x74>)
 8009b16:	2202      	movs	r2, #2
 8009b18:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b1a:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <USBH_LL_Init+0x74>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009b20:	480a      	ldr	r0, [pc, #40]	; (8009b4c <USBH_LL_Init+0x74>)
 8009b22:	f7f7 fbff 	bl	8001324 <HAL_HCD_Init>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009b2c:	f7f6 fe9c 	bl	8000868 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009b30:	4806      	ldr	r0, [pc, #24]	; (8009b4c <USBH_LL_Init+0x74>)
 8009b32:	f7f7 ffff 	bl	8001b34 <HAL_HCD_GetCurrentFrame>
 8009b36:	4603      	mov	r3, r0
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7fe feae 	bl	800889c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	200006c0 	.word	0x200006c0

08009b50 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7f7 ff81 	bl	8001a6e <HAL_HCD_Start>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 f94c 	bl	8009e10 <USBH_Get_USB_Status>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7f7 ff89 	bl	8001ab4 <HAL_HCD_Stop>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 f931 	bl	8009e10 <USBH_Get_USB_Status>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f7 ffbe 	bl	8001b50 <HAL_HCD_GetCurrentSpeed>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d00c      	beq.n	8009bf4 <USBH_LL_GetSpeed+0x38>
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d80d      	bhi.n	8009bfa <USBH_LL_GetSpeed+0x3e>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <USBH_LL_GetSpeed+0x2c>
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d003      	beq.n	8009bee <USBH_LL_GetSpeed+0x32>
 8009be6:	e008      	b.n	8009bfa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]
    break;
 8009bec:	e008      	b.n	8009c00 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf2:	e005      	b.n	8009c00 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf8:	e002      	b.n	8009c00 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	73fb      	strb	r3, [r7, #15]
    break;
 8009bfe:	bf00      	nop
  }
  return  speed;
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7f7 ff64 	bl	8001aee <HAL_HCD_ResetPort>
 8009c26:	4603      	mov	r3, r0
 8009c28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 f8ef 	bl	8009e10 <USBH_Get_USB_Status>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c40:	b590      	push	{r4, r7, lr}
 8009c42:	b089      	sub	sp, #36	; 0x24
 8009c44:	af04      	add	r7, sp, #16
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	4608      	mov	r0, r1
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4603      	mov	r3, r0
 8009c50:	70fb      	strb	r3, [r7, #3]
 8009c52:	460b      	mov	r3, r1
 8009c54:	70bb      	strb	r3, [r7, #2]
 8009c56:	4613      	mov	r3, r2
 8009c58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8009c68:	787c      	ldrb	r4, [r7, #1]
 8009c6a:	78ba      	ldrb	r2, [r7, #2]
 8009c6c:	78f9      	ldrb	r1, [r7, #3]
 8009c6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c70:	9302      	str	r3, [sp, #8]
 8009c72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	4623      	mov	r3, r4
 8009c80:	f7f7 fbb2 	bl	80013e8 <HAL_HCD_HC_Init>
 8009c84:	4603      	mov	r3, r0
 8009c86:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 f8c0 	bl	8009e10 <USBH_Get_USB_Status>
 8009c90:	4603      	mov	r3, r0
 8009c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd90      	pop	{r4, r7, pc}

08009c9e <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009cb8:	78fa      	ldrb	r2, [r7, #3]
 8009cba:	4611      	mov	r1, r2
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7f7 fc35 	bl	800152c <HAL_HCD_HC_Halt>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 f8a1 	bl	8009e10 <USBH_Get_USB_Status>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009cdc:	b590      	push	{r4, r7, lr}
 8009cde:	b089      	sub	sp, #36	; 0x24
 8009ce0:	af04      	add	r7, sp, #16
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4603      	mov	r3, r0
 8009cec:	70fb      	strb	r3, [r7, #3]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	70bb      	strb	r3, [r7, #2]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8009d04:	787c      	ldrb	r4, [r7, #1]
 8009d06:	78ba      	ldrb	r2, [r7, #2]
 8009d08:	78f9      	ldrb	r1, [r7, #3]
 8009d0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009d0e:	9303      	str	r3, [sp, #12]
 8009d10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009d12:	9302      	str	r3, [sp, #8]
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	4623      	mov	r3, r4
 8009d20:	f7f7 fc28 	bl	8001574 <HAL_HCD_HC_SubmitRequest>
 8009d24:	4603      	mov	r3, r0
 8009d26:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 f870 	bl	8009e10 <USBH_Get_USB_Status>
 8009d30:	4603      	mov	r3, r0
 8009d32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd90      	pop	{r4, r7, pc}

08009d3e <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b082      	sub	sp, #8
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009d50:	78fa      	ldrb	r2, [r7, #3]
 8009d52:	4611      	mov	r1, r2
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7f7 fed8 	bl	8001b0a <HAL_HCD_HC_GetURBState>
 8009d5a:	4603      	mov	r3, r0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d103      	bne.n	8009d82 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 f873 	bl	8009e68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009d82:	20c8      	movs	r0, #200	; 0xc8
 8009d84:	f7f6 ffae 	bl	8000ce4 <HAL_Delay>
  return USBH_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b085      	sub	sp, #20
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	70fb      	strb	r3, [r7, #3]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009da8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009daa:	78fa      	ldrb	r2, [r7, #3]
 8009dac:	68f9      	ldr	r1, [r7, #12]
 8009dae:	4613      	mov	r3, r2
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	4413      	add	r3, r2
 8009db4:	011b      	lsls	r3, r3, #4
 8009db6:	440b      	add	r3, r1
 8009db8:	333b      	adds	r3, #59	; 0x3b
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00a      	beq.n	8009dd6 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009dc0:	78fa      	ldrb	r2, [r7, #3]
 8009dc2:	68f9      	ldr	r1, [r7, #12]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	005b      	lsls	r3, r3, #1
 8009dc8:	4413      	add	r3, r2
 8009dca:	011b      	lsls	r3, r3, #4
 8009dcc:	440b      	add	r3, r1
 8009dce:	3358      	adds	r3, #88	; 0x58
 8009dd0:	78ba      	ldrb	r2, [r7, #2]
 8009dd2:	701a      	strb	r2, [r3, #0]
 8009dd4:	e009      	b.n	8009dea <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009dd6:	78fa      	ldrb	r2, [r7, #3]
 8009dd8:	68f9      	ldr	r1, [r7, #12]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	005b      	lsls	r3, r3, #1
 8009dde:	4413      	add	r3, r2
 8009de0:	011b      	lsls	r3, r3, #4
 8009de2:	440b      	add	r3, r1
 8009de4:	3359      	adds	r3, #89	; 0x59
 8009de6:	78ba      	ldrb	r2, [r7, #2]
 8009de8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7f6 ff6f 	bl	8000ce4 <HAL_Delay>
}
 8009e06:	bf00      	nop
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
	...

08009e10 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e1e:	79fb      	ldrb	r3, [r7, #7]
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	d817      	bhi.n	8009e54 <USBH_Get_USB_Status+0x44>
 8009e24:	a201      	add	r2, pc, #4	; (adr r2, 8009e2c <USBH_Get_USB_Status+0x1c>)
 8009e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2a:	bf00      	nop
 8009e2c:	08009e3d 	.word	0x08009e3d
 8009e30:	08009e43 	.word	0x08009e43
 8009e34:	08009e49 	.word	0x08009e49
 8009e38:	08009e4f 	.word	0x08009e4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e40:	e00b      	b.n	8009e5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009e42:	2302      	movs	r3, #2
 8009e44:	73fb      	strb	r3, [r7, #15]
    break;
 8009e46:	e008      	b.n	8009e5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4c:	e005      	b.n	8009e5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009e4e:	2302      	movs	r3, #2
 8009e50:	73fb      	strb	r3, [r7, #15]
    break;
 8009e52:	e002      	b.n	8009e5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009e54:	2302      	movs	r3, #2
 8009e56:	73fb      	strb	r3, [r7, #15]
    break;
 8009e58:	bf00      	nop
  }
  return usb_status;
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009e76:	79fb      	ldrb	r3, [r7, #7]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d102      	bne.n	8009e82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73fb      	strb	r3, [r7, #15]
 8009e80:	e001      	b.n	8009e86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009e82:	2301      	movs	r3, #1
 8009e84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	2140      	movs	r1, #64	; 0x40
 8009e8c:	4803      	ldr	r0, [pc, #12]	; (8009e9c <MX_DriverVbusFS+0x34>)
 8009e8e:	f7f7 fa31 	bl	80012f4 <HAL_GPIO_WritePin>
}
 8009e92:	bf00      	nop
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	48001800 	.word	0x48001800

08009ea0 <malloc>:
 8009ea0:	4b02      	ldr	r3, [pc, #8]	; (8009eac <malloc+0xc>)
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	6818      	ldr	r0, [r3, #0]
 8009ea6:	f000 b82b 	b.w	8009f00 <_malloc_r>
 8009eaa:	bf00      	nop
 8009eac:	20000078 	.word	0x20000078

08009eb0 <free>:
 8009eb0:	4b02      	ldr	r3, [pc, #8]	; (8009ebc <free+0xc>)
 8009eb2:	4601      	mov	r1, r0
 8009eb4:	6818      	ldr	r0, [r3, #0]
 8009eb6:	f000 b8f3 	b.w	800a0a0 <_free_r>
 8009eba:	bf00      	nop
 8009ebc:	20000078 	.word	0x20000078

08009ec0 <sbrk_aligned>:
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	4e0e      	ldr	r6, [pc, #56]	; (8009efc <sbrk_aligned+0x3c>)
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	6831      	ldr	r1, [r6, #0]
 8009ec8:	4605      	mov	r5, r0
 8009eca:	b911      	cbnz	r1, 8009ed2 <sbrk_aligned+0x12>
 8009ecc:	f000 f8ac 	bl	800a028 <_sbrk_r>
 8009ed0:	6030      	str	r0, [r6, #0]
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f000 f8a7 	bl	800a028 <_sbrk_r>
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	d00a      	beq.n	8009ef4 <sbrk_aligned+0x34>
 8009ede:	1cc4      	adds	r4, r0, #3
 8009ee0:	f024 0403 	bic.w	r4, r4, #3
 8009ee4:	42a0      	cmp	r0, r4
 8009ee6:	d007      	beq.n	8009ef8 <sbrk_aligned+0x38>
 8009ee8:	1a21      	subs	r1, r4, r0
 8009eea:	4628      	mov	r0, r5
 8009eec:	f000 f89c 	bl	800a028 <_sbrk_r>
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	d101      	bne.n	8009ef8 <sbrk_aligned+0x38>
 8009ef4:	f04f 34ff 	mov.w	r4, #4294967295
 8009ef8:	4620      	mov	r0, r4
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	20000a08 	.word	0x20000a08

08009f00 <_malloc_r>:
 8009f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f04:	1ccd      	adds	r5, r1, #3
 8009f06:	f025 0503 	bic.w	r5, r5, #3
 8009f0a:	3508      	adds	r5, #8
 8009f0c:	2d0c      	cmp	r5, #12
 8009f0e:	bf38      	it	cc
 8009f10:	250c      	movcc	r5, #12
 8009f12:	2d00      	cmp	r5, #0
 8009f14:	4607      	mov	r7, r0
 8009f16:	db01      	blt.n	8009f1c <_malloc_r+0x1c>
 8009f18:	42a9      	cmp	r1, r5
 8009f1a:	d905      	bls.n	8009f28 <_malloc_r+0x28>
 8009f1c:	230c      	movs	r3, #12
 8009f1e:	603b      	str	r3, [r7, #0]
 8009f20:	2600      	movs	r6, #0
 8009f22:	4630      	mov	r0, r6
 8009f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ffc <_malloc_r+0xfc>
 8009f2c:	f000 f868 	bl	800a000 <__malloc_lock>
 8009f30:	f8d8 3000 	ldr.w	r3, [r8]
 8009f34:	461c      	mov	r4, r3
 8009f36:	bb5c      	cbnz	r4, 8009f90 <_malloc_r+0x90>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	f7ff ffc0 	bl	8009ec0 <sbrk_aligned>
 8009f40:	1c43      	adds	r3, r0, #1
 8009f42:	4604      	mov	r4, r0
 8009f44:	d155      	bne.n	8009ff2 <_malloc_r+0xf2>
 8009f46:	f8d8 4000 	ldr.w	r4, [r8]
 8009f4a:	4626      	mov	r6, r4
 8009f4c:	2e00      	cmp	r6, #0
 8009f4e:	d145      	bne.n	8009fdc <_malloc_r+0xdc>
 8009f50:	2c00      	cmp	r4, #0
 8009f52:	d048      	beq.n	8009fe6 <_malloc_r+0xe6>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	4631      	mov	r1, r6
 8009f58:	4638      	mov	r0, r7
 8009f5a:	eb04 0903 	add.w	r9, r4, r3
 8009f5e:	f000 f863 	bl	800a028 <_sbrk_r>
 8009f62:	4581      	cmp	r9, r0
 8009f64:	d13f      	bne.n	8009fe6 <_malloc_r+0xe6>
 8009f66:	6821      	ldr	r1, [r4, #0]
 8009f68:	1a6d      	subs	r5, r5, r1
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7ff ffa7 	bl	8009ec0 <sbrk_aligned>
 8009f72:	3001      	adds	r0, #1
 8009f74:	d037      	beq.n	8009fe6 <_malloc_r+0xe6>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	442b      	add	r3, r5
 8009f7a:	6023      	str	r3, [r4, #0]
 8009f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d038      	beq.n	8009ff6 <_malloc_r+0xf6>
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	42a2      	cmp	r2, r4
 8009f88:	d12b      	bne.n	8009fe2 <_malloc_r+0xe2>
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	605a      	str	r2, [r3, #4]
 8009f8e:	e00f      	b.n	8009fb0 <_malloc_r+0xb0>
 8009f90:	6822      	ldr	r2, [r4, #0]
 8009f92:	1b52      	subs	r2, r2, r5
 8009f94:	d41f      	bmi.n	8009fd6 <_malloc_r+0xd6>
 8009f96:	2a0b      	cmp	r2, #11
 8009f98:	d917      	bls.n	8009fca <_malloc_r+0xca>
 8009f9a:	1961      	adds	r1, r4, r5
 8009f9c:	42a3      	cmp	r3, r4
 8009f9e:	6025      	str	r5, [r4, #0]
 8009fa0:	bf18      	it	ne
 8009fa2:	6059      	strne	r1, [r3, #4]
 8009fa4:	6863      	ldr	r3, [r4, #4]
 8009fa6:	bf08      	it	eq
 8009fa8:	f8c8 1000 	streq.w	r1, [r8]
 8009fac:	5162      	str	r2, [r4, r5]
 8009fae:	604b      	str	r3, [r1, #4]
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	f104 060b 	add.w	r6, r4, #11
 8009fb6:	f000 f829 	bl	800a00c <__malloc_unlock>
 8009fba:	f026 0607 	bic.w	r6, r6, #7
 8009fbe:	1d23      	adds	r3, r4, #4
 8009fc0:	1af2      	subs	r2, r6, r3
 8009fc2:	d0ae      	beq.n	8009f22 <_malloc_r+0x22>
 8009fc4:	1b9b      	subs	r3, r3, r6
 8009fc6:	50a3      	str	r3, [r4, r2]
 8009fc8:	e7ab      	b.n	8009f22 <_malloc_r+0x22>
 8009fca:	42a3      	cmp	r3, r4
 8009fcc:	6862      	ldr	r2, [r4, #4]
 8009fce:	d1dd      	bne.n	8009f8c <_malloc_r+0x8c>
 8009fd0:	f8c8 2000 	str.w	r2, [r8]
 8009fd4:	e7ec      	b.n	8009fb0 <_malloc_r+0xb0>
 8009fd6:	4623      	mov	r3, r4
 8009fd8:	6864      	ldr	r4, [r4, #4]
 8009fda:	e7ac      	b.n	8009f36 <_malloc_r+0x36>
 8009fdc:	4634      	mov	r4, r6
 8009fde:	6876      	ldr	r6, [r6, #4]
 8009fe0:	e7b4      	b.n	8009f4c <_malloc_r+0x4c>
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	e7cc      	b.n	8009f80 <_malloc_r+0x80>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	603b      	str	r3, [r7, #0]
 8009fea:	4638      	mov	r0, r7
 8009fec:	f000 f80e 	bl	800a00c <__malloc_unlock>
 8009ff0:	e797      	b.n	8009f22 <_malloc_r+0x22>
 8009ff2:	6025      	str	r5, [r4, #0]
 8009ff4:	e7dc      	b.n	8009fb0 <_malloc_r+0xb0>
 8009ff6:	605b      	str	r3, [r3, #4]
 8009ff8:	deff      	udf	#255	; 0xff
 8009ffa:	bf00      	nop
 8009ffc:	20000a04 	.word	0x20000a04

0800a000 <__malloc_lock>:
 800a000:	4801      	ldr	r0, [pc, #4]	; (800a008 <__malloc_lock+0x8>)
 800a002:	f000 b84b 	b.w	800a09c <__retarget_lock_acquire_recursive>
 800a006:	bf00      	nop
 800a008:	20000b48 	.word	0x20000b48

0800a00c <__malloc_unlock>:
 800a00c:	4801      	ldr	r0, [pc, #4]	; (800a014 <__malloc_unlock+0x8>)
 800a00e:	f000 b846 	b.w	800a09e <__retarget_lock_release_recursive>
 800a012:	bf00      	nop
 800a014:	20000b48 	.word	0x20000b48

0800a018 <memset>:
 800a018:	4402      	add	r2, r0
 800a01a:	4603      	mov	r3, r0
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d100      	bne.n	800a022 <memset+0xa>
 800a020:	4770      	bx	lr
 800a022:	f803 1b01 	strb.w	r1, [r3], #1
 800a026:	e7f9      	b.n	800a01c <memset+0x4>

0800a028 <_sbrk_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d06      	ldr	r5, [pc, #24]	; (800a044 <_sbrk_r+0x1c>)
 800a02c:	2300      	movs	r3, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	4608      	mov	r0, r1
 800a032:	602b      	str	r3, [r5, #0]
 800a034:	f7f6 fd70 	bl	8000b18 <_sbrk>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d102      	bne.n	800a042 <_sbrk_r+0x1a>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	b103      	cbz	r3, 800a042 <_sbrk_r+0x1a>
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	20000b44 	.word	0x20000b44

0800a048 <__errno>:
 800a048:	4b01      	ldr	r3, [pc, #4]	; (800a050 <__errno+0x8>)
 800a04a:	6818      	ldr	r0, [r3, #0]
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	20000078 	.word	0x20000078

0800a054 <__libc_init_array>:
 800a054:	b570      	push	{r4, r5, r6, lr}
 800a056:	4d0d      	ldr	r5, [pc, #52]	; (800a08c <__libc_init_array+0x38>)
 800a058:	4c0d      	ldr	r4, [pc, #52]	; (800a090 <__libc_init_array+0x3c>)
 800a05a:	1b64      	subs	r4, r4, r5
 800a05c:	10a4      	asrs	r4, r4, #2
 800a05e:	2600      	movs	r6, #0
 800a060:	42a6      	cmp	r6, r4
 800a062:	d109      	bne.n	800a078 <__libc_init_array+0x24>
 800a064:	4d0b      	ldr	r5, [pc, #44]	; (800a094 <__libc_init_array+0x40>)
 800a066:	4c0c      	ldr	r4, [pc, #48]	; (800a098 <__libc_init_array+0x44>)
 800a068:	f000 f866 	bl	800a138 <_init>
 800a06c:	1b64      	subs	r4, r4, r5
 800a06e:	10a4      	asrs	r4, r4, #2
 800a070:	2600      	movs	r6, #0
 800a072:	42a6      	cmp	r6, r4
 800a074:	d105      	bne.n	800a082 <__libc_init_array+0x2e>
 800a076:	bd70      	pop	{r4, r5, r6, pc}
 800a078:	f855 3b04 	ldr.w	r3, [r5], #4
 800a07c:	4798      	blx	r3
 800a07e:	3601      	adds	r6, #1
 800a080:	e7ee      	b.n	800a060 <__libc_init_array+0xc>
 800a082:	f855 3b04 	ldr.w	r3, [r5], #4
 800a086:	4798      	blx	r3
 800a088:	3601      	adds	r6, #1
 800a08a:	e7f2      	b.n	800a072 <__libc_init_array+0x1e>
 800a08c:	0800a1a8 	.word	0x0800a1a8
 800a090:	0800a1a8 	.word	0x0800a1a8
 800a094:	0800a1a8 	.word	0x0800a1a8
 800a098:	0800a1ac 	.word	0x0800a1ac

0800a09c <__retarget_lock_acquire_recursive>:
 800a09c:	4770      	bx	lr

0800a09e <__retarget_lock_release_recursive>:
 800a09e:	4770      	bx	lr

0800a0a0 <_free_r>:
 800a0a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0a2:	2900      	cmp	r1, #0
 800a0a4:	d044      	beq.n	800a130 <_free_r+0x90>
 800a0a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0aa:	9001      	str	r0, [sp, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f1a1 0404 	sub.w	r4, r1, #4
 800a0b2:	bfb8      	it	lt
 800a0b4:	18e4      	addlt	r4, r4, r3
 800a0b6:	f7ff ffa3 	bl	800a000 <__malloc_lock>
 800a0ba:	4a1e      	ldr	r2, [pc, #120]	; (800a134 <_free_r+0x94>)
 800a0bc:	9801      	ldr	r0, [sp, #4]
 800a0be:	6813      	ldr	r3, [r2, #0]
 800a0c0:	b933      	cbnz	r3, 800a0d0 <_free_r+0x30>
 800a0c2:	6063      	str	r3, [r4, #4]
 800a0c4:	6014      	str	r4, [r2, #0]
 800a0c6:	b003      	add	sp, #12
 800a0c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0cc:	f7ff bf9e 	b.w	800a00c <__malloc_unlock>
 800a0d0:	42a3      	cmp	r3, r4
 800a0d2:	d908      	bls.n	800a0e6 <_free_r+0x46>
 800a0d4:	6825      	ldr	r5, [r4, #0]
 800a0d6:	1961      	adds	r1, r4, r5
 800a0d8:	428b      	cmp	r3, r1
 800a0da:	bf01      	itttt	eq
 800a0dc:	6819      	ldreq	r1, [r3, #0]
 800a0de:	685b      	ldreq	r3, [r3, #4]
 800a0e0:	1949      	addeq	r1, r1, r5
 800a0e2:	6021      	streq	r1, [r4, #0]
 800a0e4:	e7ed      	b.n	800a0c2 <_free_r+0x22>
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	b10b      	cbz	r3, 800a0f0 <_free_r+0x50>
 800a0ec:	42a3      	cmp	r3, r4
 800a0ee:	d9fa      	bls.n	800a0e6 <_free_r+0x46>
 800a0f0:	6811      	ldr	r1, [r2, #0]
 800a0f2:	1855      	adds	r5, r2, r1
 800a0f4:	42a5      	cmp	r5, r4
 800a0f6:	d10b      	bne.n	800a110 <_free_r+0x70>
 800a0f8:	6824      	ldr	r4, [r4, #0]
 800a0fa:	4421      	add	r1, r4
 800a0fc:	1854      	adds	r4, r2, r1
 800a0fe:	42a3      	cmp	r3, r4
 800a100:	6011      	str	r1, [r2, #0]
 800a102:	d1e0      	bne.n	800a0c6 <_free_r+0x26>
 800a104:	681c      	ldr	r4, [r3, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	6053      	str	r3, [r2, #4]
 800a10a:	440c      	add	r4, r1
 800a10c:	6014      	str	r4, [r2, #0]
 800a10e:	e7da      	b.n	800a0c6 <_free_r+0x26>
 800a110:	d902      	bls.n	800a118 <_free_r+0x78>
 800a112:	230c      	movs	r3, #12
 800a114:	6003      	str	r3, [r0, #0]
 800a116:	e7d6      	b.n	800a0c6 <_free_r+0x26>
 800a118:	6825      	ldr	r5, [r4, #0]
 800a11a:	1961      	adds	r1, r4, r5
 800a11c:	428b      	cmp	r3, r1
 800a11e:	bf04      	itt	eq
 800a120:	6819      	ldreq	r1, [r3, #0]
 800a122:	685b      	ldreq	r3, [r3, #4]
 800a124:	6063      	str	r3, [r4, #4]
 800a126:	bf04      	itt	eq
 800a128:	1949      	addeq	r1, r1, r5
 800a12a:	6021      	streq	r1, [r4, #0]
 800a12c:	6054      	str	r4, [r2, #4]
 800a12e:	e7ca      	b.n	800a0c6 <_free_r+0x26>
 800a130:	b003      	add	sp, #12
 800a132:	bd30      	pop	{r4, r5, pc}
 800a134:	20000a04 	.word	0x20000a04

0800a138 <_init>:
 800a138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13a:	bf00      	nop
 800a13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13e:	bc08      	pop	{r3}
 800a140:	469e      	mov	lr, r3
 800a142:	4770      	bx	lr

0800a144 <_fini>:
 800a144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a146:	bf00      	nop
 800a148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a14a:	bc08      	pop	{r3}
 800a14c:	469e      	mov	lr, r3
 800a14e:	4770      	bx	lr
